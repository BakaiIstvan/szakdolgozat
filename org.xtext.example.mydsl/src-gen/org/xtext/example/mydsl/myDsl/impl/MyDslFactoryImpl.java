/**
 * generated by Xtext 2.16.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.mydsl.myDsl.Alt;
import org.xtext.example.mydsl.myDsl.AltCondition;
import org.xtext.example.mydsl.myDsl.AppearMessage;
import org.xtext.example.mydsl.myDsl.AssertionEntity;
import org.xtext.example.mydsl.myDsl.AssertionRelation;
import org.xtext.example.mydsl.myDsl.Attribute;
import org.xtext.example.mydsl.myDsl.AttributeValue;
import org.xtext.example.mydsl.myDsl.ChangeMessage;
import org.xtext.example.mydsl.myDsl.ChangeToMessage;
import org.xtext.example.mydsl.myDsl.ChangeToRelation;
import org.xtext.example.mydsl.myDsl.Clock;
import org.xtext.example.mydsl.myDsl.ClockConstraint;
import org.xtext.example.mydsl.myDsl.ClockConstraintExpression;
import org.xtext.example.mydsl.myDsl.ConstantParams;
import org.xtext.example.mydsl.myDsl.Constraint;
import org.xtext.example.mydsl.myDsl.ContextFragment;
import org.xtext.example.mydsl.myDsl.ContextMessage;
import org.xtext.example.mydsl.myDsl.ContextMessageContent;
import org.xtext.example.mydsl.myDsl.ContextModel;
import org.xtext.example.mydsl.myDsl.DisappearMessage;
import org.xtext.example.mydsl.myDsl.Domain;
import org.xtext.example.mydsl.myDsl.Entity;
import org.xtext.example.mydsl.myDsl.Expression;
import org.xtext.example.mydsl.myDsl.FEntity;
import org.xtext.example.mydsl.myDsl.FRelation;
import org.xtext.example.mydsl.myDsl.FragmentAttribute;
import org.xtext.example.mydsl.myDsl.Include;
import org.xtext.example.mydsl.myDsl.Loop;
import org.xtext.example.mydsl.myDsl.MatchMessage;
import org.xtext.example.mydsl.myDsl.Message;
import org.xtext.example.mydsl.myDsl.MyDslFactory;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.ObjectType;
import org.xtext.example.mydsl.myDsl.Operator;
import org.xtext.example.mydsl.myDsl.Par;
import org.xtext.example.mydsl.myDsl.ParExpression;
import org.xtext.example.mydsl.myDsl.Parameter;
import org.xtext.example.mydsl.myDsl.ParameterConstraint;
import org.xtext.example.mydsl.myDsl.Params;
import org.xtext.example.mydsl.myDsl.Relation;
import org.xtext.example.mydsl.myDsl.Scenario;
import org.xtext.example.mydsl.myDsl.ScenarioContent;
import org.xtext.example.mydsl.myDsl.Type;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MyDslFactoryImpl extends EFactoryImpl implements MyDslFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MyDslFactory init()
  {
    try
    {
      MyDslFactory theMyDslFactory = (MyDslFactory)EPackage.Registry.INSTANCE.getEFactory(MyDslPackage.eNS_URI);
      if (theMyDslFactory != null)
      {
        return theMyDslFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MyDslFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyDslFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MyDslPackage.DOMAIN: return createDomain();
      case MyDslPackage.INCLUDE: return createInclude();
      case MyDslPackage.CONTEXT_MODEL: return createContextModel();
      case MyDslPackage.CONTEXT_FRAGMENT: return createContextFragment();
      case MyDslPackage.ATTRIBUTE: return createAttribute();
      case MyDslPackage.ATTRIBUTE_VALUE: return createAttributeValue();
      case MyDslPackage.FRAGMENT_ATTRIBUTE: return createFragmentAttribute();
      case MyDslPackage.ENTITY: return createEntity();
      case MyDslPackage.FENTITY: return createFEntity();
      case MyDslPackage.RELATION: return createRelation();
      case MyDslPackage.FRELATION: return createFRelation();
      case MyDslPackage.SCENARIO: return createScenario();
      case MyDslPackage.SCENARIO_CONTENT: return createScenarioContent();
      case MyDslPackage.MESSAGE: return createMessage();
      case MyDslPackage.CLOCK_CONSTRAINT: return createClockConstraint();
      case MyDslPackage.CLOCK_CONSTRAINT_EXPRESSION: return createClockConstraintExpression();
      case MyDslPackage.CONTEXT_MESSAGE: return createContextMessage();
      case MyDslPackage.CONTEXT_MESSAGE_CONTENT: return createContextMessageContent();
      case MyDslPackage.MATCH_MESSAGE: return createMatchMessage();
      case MyDslPackage.CHANGE_MESSAGE: return createChangeMessage();
      case MyDslPackage.APPEAR_MESSAGE: return createAppearMessage();
      case MyDslPackage.DISAPPEAR_MESSAGE: return createDisappearMessage();
      case MyDslPackage.CHANGE_TO_MESSAGE: return createChangeToMessage();
      case MyDslPackage.CHANGE_TO_RELATION: return createChangeToRelation();
      case MyDslPackage.ASSERTION_ENTITY: return createAssertionEntity();
      case MyDslPackage.ASSERTION_RELATION: return createAssertionRelation();
      case MyDslPackage.PARAMS: return createParams();
      case MyDslPackage.CONSTANT_PARAMS: return createConstantParams();
      case MyDslPackage.PARAMETER: return createParameter();
      case MyDslPackage.PARAMETER_CONSTRAINT: return createParameterConstraint();
      case MyDslPackage.OPERATOR: return createOperator();
      case MyDslPackage.CLOCK: return createClock();
      case MyDslPackage.OBJECT_TYPE: return createObjectType();
      case MyDslPackage.OBJECT: return createObject();
      case MyDslPackage.CONSTRAINT: return createConstraint();
      case MyDslPackage.ALT: return createAlt();
      case MyDslPackage.ALT_CONDITION: return createAltCondition();
      case MyDslPackage.EXPRESSION: return createExpression();
      case MyDslPackage.PAR: return createPar();
      case MyDslPackage.PAR_EXPRESSION: return createParExpression();
      case MyDslPackage.LOOP: return createLoop();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case MyDslPackage.TYPE:
        return createTypeFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case MyDslPackage.TYPE:
        return convertTypeToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Domain createDomain()
  {
    DomainImpl domain = new DomainImpl();
    return domain;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Include createInclude()
  {
    IncludeImpl include = new IncludeImpl();
    return include;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ContextModel createContextModel()
  {
    ContextModelImpl contextModel = new ContextModelImpl();
    return contextModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ContextFragment createContextFragment()
  {
    ContextFragmentImpl contextFragment = new ContextFragmentImpl();
    return contextFragment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Attribute createAttribute()
  {
    AttributeImpl attribute = new AttributeImpl();
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AttributeValue createAttributeValue()
  {
    AttributeValueImpl attributeValue = new AttributeValueImpl();
    return attributeValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FragmentAttribute createFragmentAttribute()
  {
    FragmentAttributeImpl fragmentAttribute = new FragmentAttributeImpl();
    return fragmentAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Entity createEntity()
  {
    EntityImpl entity = new EntityImpl();
    return entity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FEntity createFEntity()
  {
    FEntityImpl fEntity = new FEntityImpl();
    return fEntity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Relation createRelation()
  {
    RelationImpl relation = new RelationImpl();
    return relation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FRelation createFRelation()
  {
    FRelationImpl fRelation = new FRelationImpl();
    return fRelation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Scenario createScenario()
  {
    ScenarioImpl scenario = new ScenarioImpl();
    return scenario;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ScenarioContent createScenarioContent()
  {
    ScenarioContentImpl scenarioContent = new ScenarioContentImpl();
    return scenarioContent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Message createMessage()
  {
    MessageImpl message = new MessageImpl();
    return message;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ClockConstraint createClockConstraint()
  {
    ClockConstraintImpl clockConstraint = new ClockConstraintImpl();
    return clockConstraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ClockConstraintExpression createClockConstraintExpression()
  {
    ClockConstraintExpressionImpl clockConstraintExpression = new ClockConstraintExpressionImpl();
    return clockConstraintExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ContextMessage createContextMessage()
  {
    ContextMessageImpl contextMessage = new ContextMessageImpl();
    return contextMessage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ContextMessageContent createContextMessageContent()
  {
    ContextMessageContentImpl contextMessageContent = new ContextMessageContentImpl();
    return contextMessageContent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MatchMessage createMatchMessage()
  {
    MatchMessageImpl matchMessage = new MatchMessageImpl();
    return matchMessage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ChangeMessage createChangeMessage()
  {
    ChangeMessageImpl changeMessage = new ChangeMessageImpl();
    return changeMessage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AppearMessage createAppearMessage()
  {
    AppearMessageImpl appearMessage = new AppearMessageImpl();
    return appearMessage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DisappearMessage createDisappearMessage()
  {
    DisappearMessageImpl disappearMessage = new DisappearMessageImpl();
    return disappearMessage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ChangeToMessage createChangeToMessage()
  {
    ChangeToMessageImpl changeToMessage = new ChangeToMessageImpl();
    return changeToMessage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ChangeToRelation createChangeToRelation()
  {
    ChangeToRelationImpl changeToRelation = new ChangeToRelationImpl();
    return changeToRelation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AssertionEntity createAssertionEntity()
  {
    AssertionEntityImpl assertionEntity = new AssertionEntityImpl();
    return assertionEntity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AssertionRelation createAssertionRelation()
  {
    AssertionRelationImpl assertionRelation = new AssertionRelationImpl();
    return assertionRelation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Params createParams()
  {
    ParamsImpl params = new ParamsImpl();
    return params;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConstantParams createConstantParams()
  {
    ConstantParamsImpl constantParams = new ConstantParamsImpl();
    return constantParams;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Parameter createParameter()
  {
    ParameterImpl parameter = new ParameterImpl();
    return parameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ParameterConstraint createParameterConstraint()
  {
    ParameterConstraintImpl parameterConstraint = new ParameterConstraintImpl();
    return parameterConstraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Operator createOperator()
  {
    OperatorImpl operator = new OperatorImpl();
    return operator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Clock createClock()
  {
    ClockImpl clock = new ClockImpl();
    return clock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ObjectType createObjectType()
  {
    ObjectTypeImpl objectType = new ObjectTypeImpl();
    return objectType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public org.xtext.example.mydsl.myDsl.Object createObject()
  {
    ObjectImpl object = new ObjectImpl();
    return object;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Constraint createConstraint()
  {
    ConstraintImpl constraint = new ConstraintImpl();
    return constraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Alt createAlt()
  {
    AltImpl alt = new AltImpl();
    return alt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AltCondition createAltCondition()
  {
    AltConditionImpl altCondition = new AltConditionImpl();
    return altCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Par createPar()
  {
    ParImpl par = new ParImpl();
    return par;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ParExpression createParExpression()
  {
    ParExpressionImpl parExpression = new ParExpressionImpl();
    return parExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Loop createLoop()
  {
    LoopImpl loop = new LoopImpl();
    return loop;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Type createTypeFromString(EDataType eDataType, String initialValue)
  {
    Type result = Type.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyDslPackage getMyDslPackage()
  {
    return (MyDslPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MyDslPackage getPackage()
  {
    return MyDslPackage.eINSTANCE;
  }

} //MyDslFactoryImpl
