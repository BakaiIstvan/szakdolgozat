/**
 * generated by Xtext 2.16.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.myDsl.ClockConstraint;
import org.xtext.example.mydsl.myDsl.ClockConstraintExpression;
import org.xtext.example.mydsl.myDsl.MyDslPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Clock Constraint Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ClockConstraintExpressionImpl#isNot <em>Not</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ClockConstraintExpressionImpl#getLclockconstraint <em>Lclockconstraint</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ClockConstraintExpressionImpl#getRclockconstraint <em>Rclockconstraint</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ClockConstraintExpressionImpl extends MinimalEObjectImpl.Container implements ClockConstraintExpression
{
  /**
   * The default value of the '{@link #isNot() <em>Not</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNot()
   * @generated
   * @ordered
   */
  protected static final boolean NOT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isNot() <em>Not</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNot()
   * @generated
   * @ordered
   */
  protected boolean not = NOT_EDEFAULT;

  /**
   * The cached value of the '{@link #getLclockconstraint() <em>Lclockconstraint</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLclockconstraint()
   * @generated
   * @ordered
   */
  protected ClockConstraint lclockconstraint;

  /**
   * The cached value of the '{@link #getRclockconstraint() <em>Rclockconstraint</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRclockconstraint()
   * @generated
   * @ordered
   */
  protected ClockConstraint rclockconstraint;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ClockConstraintExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.CLOCK_CONSTRAINT_EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isNot()
  {
    return not;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNot(boolean newNot)
  {
    boolean oldNot = not;
    not = newNot;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.CLOCK_CONSTRAINT_EXPRESSION__NOT, oldNot, not));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ClockConstraint getLclockconstraint()
  {
    return lclockconstraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLclockconstraint(ClockConstraint newLclockconstraint, NotificationChain msgs)
  {
    ClockConstraint oldLclockconstraint = lclockconstraint;
    lclockconstraint = newLclockconstraint;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.CLOCK_CONSTRAINT_EXPRESSION__LCLOCKCONSTRAINT, oldLclockconstraint, newLclockconstraint);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLclockconstraint(ClockConstraint newLclockconstraint)
  {
    if (newLclockconstraint != lclockconstraint)
    {
      NotificationChain msgs = null;
      if (lclockconstraint != null)
        msgs = ((InternalEObject)lclockconstraint).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.CLOCK_CONSTRAINT_EXPRESSION__LCLOCKCONSTRAINT, null, msgs);
      if (newLclockconstraint != null)
        msgs = ((InternalEObject)newLclockconstraint).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.CLOCK_CONSTRAINT_EXPRESSION__LCLOCKCONSTRAINT, null, msgs);
      msgs = basicSetLclockconstraint(newLclockconstraint, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.CLOCK_CONSTRAINT_EXPRESSION__LCLOCKCONSTRAINT, newLclockconstraint, newLclockconstraint));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ClockConstraint getRclockconstraint()
  {
    return rclockconstraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRclockconstraint(ClockConstraint newRclockconstraint, NotificationChain msgs)
  {
    ClockConstraint oldRclockconstraint = rclockconstraint;
    rclockconstraint = newRclockconstraint;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.CLOCK_CONSTRAINT_EXPRESSION__RCLOCKCONSTRAINT, oldRclockconstraint, newRclockconstraint);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRclockconstraint(ClockConstraint newRclockconstraint)
  {
    if (newRclockconstraint != rclockconstraint)
    {
      NotificationChain msgs = null;
      if (rclockconstraint != null)
        msgs = ((InternalEObject)rclockconstraint).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.CLOCK_CONSTRAINT_EXPRESSION__RCLOCKCONSTRAINT, null, msgs);
      if (newRclockconstraint != null)
        msgs = ((InternalEObject)newRclockconstraint).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.CLOCK_CONSTRAINT_EXPRESSION__RCLOCKCONSTRAINT, null, msgs);
      msgs = basicSetRclockconstraint(newRclockconstraint, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.CLOCK_CONSTRAINT_EXPRESSION__RCLOCKCONSTRAINT, newRclockconstraint, newRclockconstraint));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.CLOCK_CONSTRAINT_EXPRESSION__LCLOCKCONSTRAINT:
        return basicSetLclockconstraint(null, msgs);
      case MyDslPackage.CLOCK_CONSTRAINT_EXPRESSION__RCLOCKCONSTRAINT:
        return basicSetRclockconstraint(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.CLOCK_CONSTRAINT_EXPRESSION__NOT:
        return isNot();
      case MyDslPackage.CLOCK_CONSTRAINT_EXPRESSION__LCLOCKCONSTRAINT:
        return getLclockconstraint();
      case MyDslPackage.CLOCK_CONSTRAINT_EXPRESSION__RCLOCKCONSTRAINT:
        return getRclockconstraint();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.CLOCK_CONSTRAINT_EXPRESSION__NOT:
        setNot((Boolean)newValue);
        return;
      case MyDslPackage.CLOCK_CONSTRAINT_EXPRESSION__LCLOCKCONSTRAINT:
        setLclockconstraint((ClockConstraint)newValue);
        return;
      case MyDslPackage.CLOCK_CONSTRAINT_EXPRESSION__RCLOCKCONSTRAINT:
        setRclockconstraint((ClockConstraint)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.CLOCK_CONSTRAINT_EXPRESSION__NOT:
        setNot(NOT_EDEFAULT);
        return;
      case MyDslPackage.CLOCK_CONSTRAINT_EXPRESSION__LCLOCKCONSTRAINT:
        setLclockconstraint((ClockConstraint)null);
        return;
      case MyDslPackage.CLOCK_CONSTRAINT_EXPRESSION__RCLOCKCONSTRAINT:
        setRclockconstraint((ClockConstraint)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.CLOCK_CONSTRAINT_EXPRESSION__NOT:
        return not != NOT_EDEFAULT;
      case MyDslPackage.CLOCK_CONSTRAINT_EXPRESSION__LCLOCKCONSTRAINT:
        return lclockconstraint != null;
      case MyDslPackage.CLOCK_CONSTRAINT_EXPRESSION__RCLOCKCONSTRAINT:
        return rclockconstraint != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (not: ");
    result.append(not);
    result.append(')');
    return result.toString();
  }

} //ClockConstraintExpressionImpl
