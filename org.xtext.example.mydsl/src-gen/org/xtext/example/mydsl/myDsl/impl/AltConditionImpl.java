/**
 * generated by Xtext 2.16.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.myDsl.AltCondition;
import org.xtext.example.mydsl.myDsl.AttributeValue;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.Operator;
import org.xtext.example.mydsl.myDsl.Parameter;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Alt Condition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.AltConditionImpl#getParam <em>Param</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.AltConditionImpl#getOperator <em>Operator</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.AltConditionImpl#getValue <em>Value</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.AltConditionImpl#isElse <em>Else</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AltConditionImpl extends MinimalEObjectImpl.Container implements AltCondition
{
  /**
   * The cached value of the '{@link #getParam() <em>Param</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParam()
   * @generated
   * @ordered
   */
  protected Parameter param;

  /**
   * The cached value of the '{@link #getOperator() <em>Operator</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperator()
   * @generated
   * @ordered
   */
  protected EList<Operator> operator;

  /**
   * The cached value of the '{@link #getValue() <em>Value</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValue()
   * @generated
   * @ordered
   */
  protected EList<AttributeValue> value;

  /**
   * The default value of the '{@link #isElse() <em>Else</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isElse()
   * @generated
   * @ordered
   */
  protected static final boolean ELSE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isElse() <em>Else</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isElse()
   * @generated
   * @ordered
   */
  protected boolean else_ = ELSE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AltConditionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.ALT_CONDITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Parameter getParam()
  {
    if (param != null && param.eIsProxy())
    {
      InternalEObject oldParam = (InternalEObject)param;
      param = (Parameter)eResolveProxy(oldParam);
      if (param != oldParam)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MyDslPackage.ALT_CONDITION__PARAM, oldParam, param));
      }
    }
    return param;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Parameter basicGetParam()
  {
    return param;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParam(Parameter newParam)
  {
    Parameter oldParam = param;
    param = newParam;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.ALT_CONDITION__PARAM, oldParam, param));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Operator> getOperator()
  {
    if (operator == null)
    {
      operator = new EObjectContainmentEList<Operator>(Operator.class, this, MyDslPackage.ALT_CONDITION__OPERATOR);
    }
    return operator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<AttributeValue> getValue()
  {
    if (value == null)
    {
      value = new EObjectContainmentEList<AttributeValue>(AttributeValue.class, this, MyDslPackage.ALT_CONDITION__VALUE);
    }
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isElse()
  {
    return else_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setElse(boolean newElse)
  {
    boolean oldElse = else_;
    else_ = newElse;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.ALT_CONDITION__ELSE, oldElse, else_));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.ALT_CONDITION__OPERATOR:
        return ((InternalEList<?>)getOperator()).basicRemove(otherEnd, msgs);
      case MyDslPackage.ALT_CONDITION__VALUE:
        return ((InternalEList<?>)getValue()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.ALT_CONDITION__PARAM:
        if (resolve) return getParam();
        return basicGetParam();
      case MyDslPackage.ALT_CONDITION__OPERATOR:
        return getOperator();
      case MyDslPackage.ALT_CONDITION__VALUE:
        return getValue();
      case MyDslPackage.ALT_CONDITION__ELSE:
        return isElse();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.ALT_CONDITION__PARAM:
        setParam((Parameter)newValue);
        return;
      case MyDslPackage.ALT_CONDITION__OPERATOR:
        getOperator().clear();
        getOperator().addAll((Collection<? extends Operator>)newValue);
        return;
      case MyDslPackage.ALT_CONDITION__VALUE:
        getValue().clear();
        getValue().addAll((Collection<? extends AttributeValue>)newValue);
        return;
      case MyDslPackage.ALT_CONDITION__ELSE:
        setElse((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.ALT_CONDITION__PARAM:
        setParam((Parameter)null);
        return;
      case MyDslPackage.ALT_CONDITION__OPERATOR:
        getOperator().clear();
        return;
      case MyDslPackage.ALT_CONDITION__VALUE:
        getValue().clear();
        return;
      case MyDslPackage.ALT_CONDITION__ELSE:
        setElse(ELSE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.ALT_CONDITION__PARAM:
        return param != null;
      case MyDslPackage.ALT_CONDITION__OPERATOR:
        return operator != null && !operator.isEmpty();
      case MyDslPackage.ALT_CONDITION__VALUE:
        return value != null && !value.isEmpty();
      case MyDslPackage.ALT_CONDITION__ELSE:
        return else_ != ELSE_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (else: ");
    result.append(else_);
    result.append(')');
    return result.toString();
  }

} //AltConditionImpl
