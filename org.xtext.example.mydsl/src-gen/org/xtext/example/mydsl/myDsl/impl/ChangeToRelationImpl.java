/**
 * generated by Xtext 2.16.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.myDsl.Attribute;
import org.xtext.example.mydsl.myDsl.ChangeToRelation;
import org.xtext.example.mydsl.myDsl.ContextModel;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.Relation;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Change To Relation</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ChangeToRelationImpl#getContext <em>Context</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ChangeToRelationImpl#getRelation <em>Relation</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ChangeToRelationImpl#getAttribute <em>Attribute</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ChangeToRelationImpl#getChangevalue <em>Changevalue</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ChangeToRelationImpl extends MinimalEObjectImpl.Container implements ChangeToRelation
{
  /**
   * The cached value of the '{@link #getContext() <em>Context</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContext()
   * @generated
   * @ordered
   */
  protected ContextModel context;

  /**
   * The cached value of the '{@link #getRelation() <em>Relation</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRelation()
   * @generated
   * @ordered
   */
  protected Relation relation;

  /**
   * The cached value of the '{@link #getAttribute() <em>Attribute</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAttribute()
   * @generated
   * @ordered
   */
  protected Attribute attribute;

  /**
   * The default value of the '{@link #getChangevalue() <em>Changevalue</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChangevalue()
   * @generated
   * @ordered
   */
  protected static final String CHANGEVALUE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getChangevalue() <em>Changevalue</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChangevalue()
   * @generated
   * @ordered
   */
  protected String changevalue = CHANGEVALUE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ChangeToRelationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.CHANGE_TO_RELATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ContextModel getContext()
  {
    if (context != null && context.eIsProxy())
    {
      InternalEObject oldContext = (InternalEObject)context;
      context = (ContextModel)eResolveProxy(oldContext);
      if (context != oldContext)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MyDslPackage.CHANGE_TO_RELATION__CONTEXT, oldContext, context));
      }
    }
    return context;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ContextModel basicGetContext()
  {
    return context;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setContext(ContextModel newContext)
  {
    ContextModel oldContext = context;
    context = newContext;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.CHANGE_TO_RELATION__CONTEXT, oldContext, context));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Relation getRelation()
  {
    if (relation != null && relation.eIsProxy())
    {
      InternalEObject oldRelation = (InternalEObject)relation;
      relation = (Relation)eResolveProxy(oldRelation);
      if (relation != oldRelation)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MyDslPackage.CHANGE_TO_RELATION__RELATION, oldRelation, relation));
      }
    }
    return relation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Relation basicGetRelation()
  {
    return relation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRelation(Relation newRelation)
  {
    Relation oldRelation = relation;
    relation = newRelation;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.CHANGE_TO_RELATION__RELATION, oldRelation, relation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Attribute getAttribute()
  {
    if (attribute != null && attribute.eIsProxy())
    {
      InternalEObject oldAttribute = (InternalEObject)attribute;
      attribute = (Attribute)eResolveProxy(oldAttribute);
      if (attribute != oldAttribute)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MyDslPackage.CHANGE_TO_RELATION__ATTRIBUTE, oldAttribute, attribute));
      }
    }
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Attribute basicGetAttribute()
  {
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAttribute(Attribute newAttribute)
  {
    Attribute oldAttribute = attribute;
    attribute = newAttribute;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.CHANGE_TO_RELATION__ATTRIBUTE, oldAttribute, attribute));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getChangevalue()
  {
    return changevalue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setChangevalue(String newChangevalue)
  {
    String oldChangevalue = changevalue;
    changevalue = newChangevalue;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.CHANGE_TO_RELATION__CHANGEVALUE, oldChangevalue, changevalue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.CHANGE_TO_RELATION__CONTEXT:
        if (resolve) return getContext();
        return basicGetContext();
      case MyDslPackage.CHANGE_TO_RELATION__RELATION:
        if (resolve) return getRelation();
        return basicGetRelation();
      case MyDslPackage.CHANGE_TO_RELATION__ATTRIBUTE:
        if (resolve) return getAttribute();
        return basicGetAttribute();
      case MyDslPackage.CHANGE_TO_RELATION__CHANGEVALUE:
        return getChangevalue();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.CHANGE_TO_RELATION__CONTEXT:
        setContext((ContextModel)newValue);
        return;
      case MyDslPackage.CHANGE_TO_RELATION__RELATION:
        setRelation((Relation)newValue);
        return;
      case MyDslPackage.CHANGE_TO_RELATION__ATTRIBUTE:
        setAttribute((Attribute)newValue);
        return;
      case MyDslPackage.CHANGE_TO_RELATION__CHANGEVALUE:
        setChangevalue((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.CHANGE_TO_RELATION__CONTEXT:
        setContext((ContextModel)null);
        return;
      case MyDslPackage.CHANGE_TO_RELATION__RELATION:
        setRelation((Relation)null);
        return;
      case MyDslPackage.CHANGE_TO_RELATION__ATTRIBUTE:
        setAttribute((Attribute)null);
        return;
      case MyDslPackage.CHANGE_TO_RELATION__CHANGEVALUE:
        setChangevalue(CHANGEVALUE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.CHANGE_TO_RELATION__CONTEXT:
        return context != null;
      case MyDslPackage.CHANGE_TO_RELATION__RELATION:
        return relation != null;
      case MyDslPackage.CHANGE_TO_RELATION__ATTRIBUTE:
        return attribute != null;
      case MyDslPackage.CHANGE_TO_RELATION__CHANGEVALUE:
        return CHANGEVALUE_EDEFAULT == null ? changevalue != null : !CHANGEVALUE_EDEFAULT.equals(changevalue);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (changevalue: ");
    result.append(changevalue);
    result.append(')');
    return result.toString();
  }

} //ChangeToRelationImpl
