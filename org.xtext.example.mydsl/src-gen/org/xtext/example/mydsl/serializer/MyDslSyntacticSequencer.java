/*
 * generated by Xtext 2.16.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected MyDslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Expression_EqualsSignKeyword_2_q;
	protected AbstractElementAlias match_Expression_GreaterThanSignEqualsSignKeyword_5_q;
	protected AbstractElementAlias match_Expression_GreaterThanSignKeyword_3_q;
	protected AbstractElementAlias match_Expression_IDTerminalRuleCall_1_q;
	protected AbstractElementAlias match_Expression_LessThanSignEqualsSignKeyword_6_q;
	protected AbstractElementAlias match_Expression_LessThanSignKeyword_4_q;
	protected AbstractElementAlias match_Expression___IDTerminalRuleCall_7_0_or_NumberTerminalRuleCall_7_1__q;
	protected AbstractElementAlias match_Message_LeftCurlyBracketKeyword_11_q;
	protected AbstractElementAlias match_Message_RightCurlyBracketKeyword_13_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MyDslGrammarAccess) access;
		match_Expression_EqualsSignKeyword_2_q = new TokenAlias(false, true, grammarAccess.getExpressionAccess().getEqualsSignKeyword_2());
		match_Expression_GreaterThanSignEqualsSignKeyword_5_q = new TokenAlias(false, true, grammarAccess.getExpressionAccess().getGreaterThanSignEqualsSignKeyword_5());
		match_Expression_GreaterThanSignKeyword_3_q = new TokenAlias(false, true, grammarAccess.getExpressionAccess().getGreaterThanSignKeyword_3());
		match_Expression_IDTerminalRuleCall_1_q = new TokenAlias(false, true, grammarAccess.getExpressionAccess().getIDTerminalRuleCall_1());
		match_Expression_LessThanSignEqualsSignKeyword_6_q = new TokenAlias(false, true, grammarAccess.getExpressionAccess().getLessThanSignEqualsSignKeyword_6());
		match_Expression_LessThanSignKeyword_4_q = new TokenAlias(false, true, grammarAccess.getExpressionAccess().getLessThanSignKeyword_4());
		match_Expression___IDTerminalRuleCall_7_0_or_NumberTerminalRuleCall_7_1__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getExpressionAccess().getIDTerminalRuleCall_7_0()), new TokenAlias(false, false, grammarAccess.getExpressionAccess().getNumberTerminalRuleCall_7_1()));
		match_Message_LeftCurlyBracketKeyword_11_q = new TokenAlias(false, true, grammarAccess.getMessageAccess().getLeftCurlyBracketKeyword_11());
		match_Message_RightCurlyBracketKeyword_13_q = new TokenAlias(false, true, grammarAccess.getMessageAccess().getRightCurlyBracketKeyword_13());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getIDRule())
			return getIDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getNumberRule())
			return getNumberToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	 */
	protected String getIDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * terminal Number:
	 * 	('0'..'9')*
	 * ;
	 */
	protected String getNumberToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Expression_EqualsSignKeyword_2_q.equals(syntax))
				emit_Expression_EqualsSignKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Expression_GreaterThanSignEqualsSignKeyword_5_q.equals(syntax))
				emit_Expression_GreaterThanSignEqualsSignKeyword_5_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Expression_GreaterThanSignKeyword_3_q.equals(syntax))
				emit_Expression_GreaterThanSignKeyword_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Expression_IDTerminalRuleCall_1_q.equals(syntax))
				emit_Expression_IDTerminalRuleCall_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Expression_LessThanSignEqualsSignKeyword_6_q.equals(syntax))
				emit_Expression_LessThanSignEqualsSignKeyword_6_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Expression_LessThanSignKeyword_4_q.equals(syntax))
				emit_Expression_LessThanSignKeyword_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Expression___IDTerminalRuleCall_7_0_or_NumberTerminalRuleCall_7_1__q.equals(syntax))
				emit_Expression___IDTerminalRuleCall_7_0_or_NumberTerminalRuleCall_7_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Message_LeftCurlyBracketKeyword_11_q.equals(syntax))
				emit_Message_LeftCurlyBracketKeyword_11_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Message_RightCurlyBracketKeyword_13_q.equals(syntax))
				emit_Message_RightCurlyBracketKeyword_13_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '='?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '(' ID? (ambiguity) '>'? '<'? '>='? '<='? (ID | Number)? ')' '{' '}' (rule start)
	 *     (rule start) '(' ID? (ambiguity) '>'? '<'? '>='? '<='? (ID | Number)? ')' '{' messages+=Message
	 */
	protected void emit_Expression_EqualsSignKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '>='?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '(' ID? '='? '>'? '<'? (ambiguity) '<='? (ID | Number)? ')' '{' '}' (rule start)
	 *     (rule start) '(' ID? '='? '>'? '<'? (ambiguity) '<='? (ID | Number)? ')' '{' messages+=Message
	 */
	protected void emit_Expression_GreaterThanSignEqualsSignKeyword_5_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '>'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '(' ID? '='? (ambiguity) '<'? '>='? '<='? (ID | Number)? ')' '{' '}' (rule start)
	 *     (rule start) '(' ID? '='? (ambiguity) '<'? '>='? '<='? (ID | Number)? ')' '{' messages+=Message
	 */
	protected void emit_Expression_GreaterThanSignKeyword_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ID?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '(' (ambiguity) '='? '>'? '<'? '>='? '<='? (ID | Number)? ')' '{' '}' (rule start)
	 *     (rule start) '(' (ambiguity) '='? '>'? '<'? '>='? '<='? (ID | Number)? ')' '{' messages+=Message
	 */
	protected void emit_Expression_IDTerminalRuleCall_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '<='?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '(' ID? '='? '>'? '<'? '>='? (ambiguity) (ID | Number)? ')' '{' '}' (rule start)
	 *     (rule start) '(' ID? '='? '>'? '<'? '>='? (ambiguity) (ID | Number)? ')' '{' messages+=Message
	 */
	protected void emit_Expression_LessThanSignEqualsSignKeyword_6_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '<'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '(' ID? '='? '>'? (ambiguity) '>='? '<='? (ID | Number)? ')' '{' '}' (rule start)
	 *     (rule start) '(' ID? '='? '>'? (ambiguity) '>='? '<='? (ID | Number)? ')' '{' messages+=Message
	 */
	protected void emit_Expression_LessThanSignKeyword_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (ID | Number)?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '(' ID? '='? '>'? '<'? '>='? '<='? (ambiguity) ')' '{' '}' (rule start)
	 *     (rule start) '(' ID? '='? '>'? '<'? '>='? '<='? (ambiguity) ')' '{' messages+=Message
	 */
	protected void emit_Expression___IDTerminalRuleCall_7_0_or_NumberTerminalRuleCall_7_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '{'?
	 *
	 * This ambiguous syntax occurs at:
	 *     constraint?='constraint' (ambiguity) '}'? ';' (rule end)
	 *     constraint?='constraint' (ambiguity) c=[Constraint|ID]
	 *     future?='future' (ambiguity) '}'? ';' (rule end)
	 *     future?='future' (ambiguity) c=[Constraint|ID]
	 *     past?='past' (ambiguity) '}'? ';' (rule end)
	 *     past?='past' (ambiguity) c=[Constraint|ID]
	 *     receiver=[Object|ID] (ambiguity) '}'? ';' (rule end)
	 *     receiver=[Object|ID] (ambiguity) c=[Constraint|ID]
	 */
	protected void emit_Message_LeftCurlyBracketKeyword_11_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '}'?
	 *
	 * This ambiguous syntax occurs at:
	 *     c=[Constraint|ID] (ambiguity) ';' (rule end)
	 *     constraint?='constraint' '{'? (ambiguity) ';' (rule end)
	 *     future?='future' '{'? (ambiguity) ';' (rule end)
	 *     past?='past' '{'? (ambiguity) ';' (rule end)
	 *     receiver=[Object|ID] '{'? (ambiguity) ';' (rule end)
	 */
	protected void emit_Message_RightCurlyBracketKeyword_13_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
