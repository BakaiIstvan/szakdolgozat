/*
 * generated by Xtext 2.16.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected MyDslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Attribute_EqualsSignKeyword_6_q;
	protected AbstractElementAlias match_ChangeToMessage_CommaKeyword_3_q;
	protected AbstractElementAlias match_ChangeToRelation_CommaKeyword_3_q;
	protected AbstractElementAlias match_Domain_LeftCurlyBracketKeyword_2_q;
	protected AbstractElementAlias match_Domain_RightCurlyBracketKeyword_11_q;
	protected AbstractElementAlias match_MatchMessage_CommaKeyword_3_q;
	protected AbstractElementAlias match_Message_LeftCurlyBracketKeyword_14_q;
	protected AbstractElementAlias match_Message_LeftCurlyBracketKeyword_20_q;
	protected AbstractElementAlias match_Message_RightCurlyBracketKeyword_18_q;
	protected AbstractElementAlias match_Message_RightCurlyBracketKeyword_22_q;
	protected AbstractElementAlias match_Message_SemicolonKeyword_16_q;
	protected AbstractElementAlias match_Parameter_EqualsSignKeyword_2_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MyDslGrammarAccess) access;
		match_Attribute_EqualsSignKeyword_6_q = new TokenAlias(false, true, grammarAccess.getAttributeAccess().getEqualsSignKeyword_6());
		match_ChangeToMessage_CommaKeyword_3_q = new TokenAlias(false, true, grammarAccess.getChangeToMessageAccess().getCommaKeyword_3());
		match_ChangeToRelation_CommaKeyword_3_q = new TokenAlias(false, true, grammarAccess.getChangeToRelationAccess().getCommaKeyword_3());
		match_Domain_LeftCurlyBracketKeyword_2_q = new TokenAlias(false, true, grammarAccess.getDomainAccess().getLeftCurlyBracketKeyword_2());
		match_Domain_RightCurlyBracketKeyword_11_q = new TokenAlias(false, true, grammarAccess.getDomainAccess().getRightCurlyBracketKeyword_11());
		match_MatchMessage_CommaKeyword_3_q = new TokenAlias(false, true, grammarAccess.getMatchMessageAccess().getCommaKeyword_3());
		match_Message_LeftCurlyBracketKeyword_14_q = new TokenAlias(false, true, grammarAccess.getMessageAccess().getLeftCurlyBracketKeyword_14());
		match_Message_LeftCurlyBracketKeyword_20_q = new TokenAlias(false, true, grammarAccess.getMessageAccess().getLeftCurlyBracketKeyword_20());
		match_Message_RightCurlyBracketKeyword_18_q = new TokenAlias(false, true, grammarAccess.getMessageAccess().getRightCurlyBracketKeyword_18());
		match_Message_RightCurlyBracketKeyword_22_q = new TokenAlias(false, true, grammarAccess.getMessageAccess().getRightCurlyBracketKeyword_22());
		match_Message_SemicolonKeyword_16_q = new TokenAlias(false, true, grammarAccess.getMessageAccess().getSemicolonKeyword_16());
		match_Parameter_EqualsSignKeyword_2_q = new TokenAlias(false, true, grammarAccess.getParameterAccess().getEqualsSignKeyword_2());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Attribute_EqualsSignKeyword_6_q.equals(syntax))
				emit_Attribute_EqualsSignKeyword_6_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ChangeToMessage_CommaKeyword_3_q.equals(syntax))
				emit_ChangeToMessage_CommaKeyword_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ChangeToRelation_CommaKeyword_3_q.equals(syntax))
				emit_ChangeToRelation_CommaKeyword_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Domain_LeftCurlyBracketKeyword_2_q.equals(syntax))
				emit_Domain_LeftCurlyBracketKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Domain_RightCurlyBracketKeyword_11_q.equals(syntax))
				emit_Domain_RightCurlyBracketKeyword_11_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_MatchMessage_CommaKeyword_3_q.equals(syntax))
				emit_MatchMessage_CommaKeyword_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Message_LeftCurlyBracketKeyword_14_q.equals(syntax))
				emit_Message_LeftCurlyBracketKeyword_14_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Message_LeftCurlyBracketKeyword_20_q.equals(syntax))
				emit_Message_LeftCurlyBracketKeyword_20_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Message_RightCurlyBracketKeyword_18_q.equals(syntax))
				emit_Message_RightCurlyBracketKeyword_18_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Message_RightCurlyBracketKeyword_22_q.equals(syntax))
				emit_Message_RightCurlyBracketKeyword_22_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Message_SemicolonKeyword_16_q.equals(syntax))
				emit_Message_SemicolonKeyword_16_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Parameter_EqualsSignKeyword_2_q.equals(syntax))
				emit_Parameter_EqualsSignKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '='?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) ';' (rule end)
	 *     name=ID (ambiguity) value=AttributeValue
	 */
	protected void emit_Attribute_EqualsSignKeyword_6_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'changeTo' '(' (ambiguity) ')' (rule start)
	 *     (rule start) 'changeTo' '(' (ambiguity) changevalue=AttributeValue
	 *     attribute=[Attribute|ID] (ambiguity) ')' (rule end)
	 *     attribute=[Attribute|ID] (ambiguity) changevalue=AttributeValue
	 */
	protected void emit_ChangeToMessage_CommaKeyword_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'relationChangeTo' '(' (ambiguity) ')' (rule start)
	 *     (rule start) 'relationChangeTo' '(' (ambiguity) changevalue=AttributeValue
	 *     attribute=[Attribute|ID] (ambiguity) ')' (rule end)
	 *     attribute=[Attribute|ID] (ambiguity) changevalue=AttributeValue
	 */
	protected void emit_ChangeToRelation_CommaKeyword_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '{'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '}'? (rule start)
	 *     (rule start) (ambiguity) clocks+=Clock
	 *     (rule start) (ambiguity) constraints+=Constraint
	 *     (rule start) (ambiguity) contextfragments+=ContextFragment
	 *     (rule start) (ambiguity) contextmodels+=ContextModel
	 *     (rule start) (ambiguity) includes+=Include
	 *     (rule start) (ambiguity) objects+=Object
	 *     (rule start) (ambiguity) parameters+=Parameter
	 *     (rule start) (ambiguity) scenarios+=Scenario
	 *     name=ID (ambiguity) '}'? (rule end)
	 *     name=ID (ambiguity) clocks+=Clock
	 *     name=ID (ambiguity) constraints+=Constraint
	 *     name=ID (ambiguity) contextfragments+=ContextFragment
	 *     name=ID (ambiguity) contextmodels+=ContextModel
	 *     name=ID (ambiguity) includes+=Include
	 *     name=ID (ambiguity) objects+=Object
	 *     name=ID (ambiguity) parameters+=Parameter
	 *     name=ID (ambiguity) scenarios+=Scenario
	 *     specification='specification' (ambiguity) '}'? (rule end)
	 *     specification='specification' (ambiguity) clocks+=Clock
	 *     specification='specification' (ambiguity) constraints+=Constraint
	 *     specification='specification' (ambiguity) contextfragments+=ContextFragment
	 *     specification='specification' (ambiguity) contextmodels+=ContextModel
	 *     specification='specification' (ambiguity) includes+=Include
	 *     specification='specification' (ambiguity) objects+=Object
	 *     specification='specification' (ambiguity) parameters+=Parameter
	 *     specification='specification' (ambiguity) scenarios+=Scenario
	 */
	protected void emit_Domain_LeftCurlyBracketKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '}'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '{' (ambiguity) (rule start)
	 *     (rule start) '{'? (ambiguity) (rule start)
	 *     clocks+=Clock (ambiguity) (rule end)
	 *     constraints+=Constraint (ambiguity) (rule end)
	 *     contextfragments+=ContextFragment (ambiguity) (rule end)
	 *     contextmodels+=ContextModel (ambiguity) (rule end)
	 *     includes+=Include (ambiguity) (rule end)
	 *     name=ID '{'? (ambiguity) (rule end)
	 *     objects+=Object (ambiguity) (rule end)
	 *     parameters+=Parameter (ambiguity) (rule end)
	 *     scenarios+=Scenario (ambiguity) (rule end)
	 *     specification='specification' '{'? (ambiguity) (rule end)
	 */
	protected void emit_Domain_RightCurlyBracketKeyword_11_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'match' '(' (ambiguity) ')' (rule start)
	 *     (rule start) 'match' '(' (ambiguity) content=[ContextFragment|ID]
	 *     context=[ContextModel|ID] (ambiguity) ')' (rule end)
	 *     context=[ContextModel|ID] (ambiguity) content=[ContextFragment|ID]
	 */
	protected void emit_MatchMessage_CommaKeyword_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '{'?
	 *
	 * This ambiguous syntax occurs at:
	 *     constraint?='constraint' (ambiguity) ';'? '}'? '{'? '}'? ';' (rule end)
	 *     constraint?='constraint' (ambiguity) ';'? '}'? '{'? '}'? reset?='reset'
	 *     constraint?='constraint' (ambiguity) ';'? '}'? '{'? '}'? resetclock=[Clock|ID]
	 *     constraint?='constraint' (ambiguity) ';'? '}'? '{'? cConstraint=ClockConstraintExpression
	 *     constraint?='constraint' (ambiguity) ';'? '}'? clockconstraint?='clock'
	 *     constraint?='constraint' (ambiguity) ';'? constraintexp=ClockConstraintExpression
	 *     constraint?='constraint' (ambiguity) c=[Constraint|ID]
	 *     future?='future' (ambiguity) ';'? '}'? '{'? '}'? ';' (rule end)
	 *     future?='future' (ambiguity) ';'? '}'? '{'? '}'? reset?='reset'
	 *     future?='future' (ambiguity) ';'? '}'? '{'? '}'? resetclock=[Clock|ID]
	 *     future?='future' (ambiguity) ';'? '}'? '{'? cConstraint=ClockConstraintExpression
	 *     future?='future' (ambiguity) ';'? '}'? clockconstraint?='clock'
	 *     future?='future' (ambiguity) ';'? constraintexp=ClockConstraintExpression
	 *     future?='future' (ambiguity) c=[Constraint|ID]
	 *     past?='past' (ambiguity) ';'? '}'? '{'? '}'? ';' (rule end)
	 *     past?='past' (ambiguity) ';'? '}'? '{'? '}'? reset?='reset'
	 *     past?='past' (ambiguity) ';'? '}'? '{'? '}'? resetclock=[Clock|ID]
	 *     past?='past' (ambiguity) ';'? '}'? '{'? cConstraint=ClockConstraintExpression
	 *     past?='past' (ambiguity) ';'? '}'? clockconstraint?='clock'
	 *     past?='past' (ambiguity) ';'? constraintexp=ClockConstraintExpression
	 *     past?='past' (ambiguity) c=[Constraint|ID]
	 *     receiver=[Object|ID] (ambiguity) ';'? '}'? '{'? '}'? ';' (rule end)
	 *     receiver=[Object|ID] (ambiguity) ';'? '}'? '{'? '}'? reset?='reset'
	 *     receiver=[Object|ID] (ambiguity) ';'? '}'? '{'? '}'? resetclock=[Clock|ID]
	 *     receiver=[Object|ID] (ambiguity) ';'? '}'? '{'? cConstraint=ClockConstraintExpression
	 *     receiver=[Object|ID] (ambiguity) ';'? '}'? clockconstraint?='clock'
	 *     receiver=[Object|ID] (ambiguity) ';'? constraintexp=ClockConstraintExpression
	 *     receiver=[Object|ID] (ambiguity) c=[Constraint|ID]
	 */
	protected void emit_Message_LeftCurlyBracketKeyword_14_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '{'?
	 *
	 * This ambiguous syntax occurs at:
	 *     c=[Constraint|ID] ';'? '}'? (ambiguity) '}'? ';' (rule end)
	 *     c=[Constraint|ID] ';'? '}'? (ambiguity) '}'? reset?='reset'
	 *     c=[Constraint|ID] ';'? '}'? (ambiguity) '}'? resetclock=[Clock|ID]
	 *     c=[Constraint|ID] ';'? '}'? (ambiguity) cConstraint=ClockConstraintExpression
	 *     clockconstraint?='clock' 'constraint' (ambiguity) '}'? ';' (rule end)
	 *     clockconstraint?='clock' 'constraint' (ambiguity) '}'? reset?='reset'
	 *     clockconstraint?='clock' 'constraint' (ambiguity) '}'? resetclock=[Clock|ID]
	 *     clockconstraint?='clock' 'constraint' (ambiguity) cConstraint=ClockConstraintExpression
	 *     constraint?='constraint' '{'? ';'? '}'? (ambiguity) '}'? ';' (rule end)
	 *     constraint?='constraint' '{'? ';'? '}'? (ambiguity) '}'? reset?='reset'
	 *     constraint?='constraint' '{'? ';'? '}'? (ambiguity) '}'? resetclock=[Clock|ID]
	 *     constraint?='constraint' '{'? ';'? '}'? (ambiguity) cConstraint=ClockConstraintExpression
	 *     constraintexp=ClockConstraintExpression '}'? (ambiguity) '}'? ';' (rule end)
	 *     constraintexp=ClockConstraintExpression '}'? (ambiguity) '}'? reset?='reset'
	 *     constraintexp=ClockConstraintExpression '}'? (ambiguity) '}'? resetclock=[Clock|ID]
	 *     constraintexp=ClockConstraintExpression '}'? (ambiguity) cConstraint=ClockConstraintExpression
	 *     future?='future' '{'? ';'? '}'? (ambiguity) '}'? ';' (rule end)
	 *     future?='future' '{'? ';'? '}'? (ambiguity) '}'? reset?='reset'
	 *     future?='future' '{'? ';'? '}'? (ambiguity) '}'? resetclock=[Clock|ID]
	 *     future?='future' '{'? ';'? '}'? (ambiguity) cConstraint=ClockConstraintExpression
	 *     past?='past' '{'? ';'? '}'? (ambiguity) '}'? ';' (rule end)
	 *     past?='past' '{'? ';'? '}'? (ambiguity) '}'? reset?='reset'
	 *     past?='past' '{'? ';'? '}'? (ambiguity) '}'? resetclock=[Clock|ID]
	 *     past?='past' '{'? ';'? '}'? (ambiguity) cConstraint=ClockConstraintExpression
	 *     receiver=[Object|ID] '{'? ';'? '}'? (ambiguity) '}'? ';' (rule end)
	 *     receiver=[Object|ID] '{'? ';'? '}'? (ambiguity) '}'? reset?='reset'
	 *     receiver=[Object|ID] '{'? ';'? '}'? (ambiguity) '}'? resetclock=[Clock|ID]
	 *     receiver=[Object|ID] '{'? ';'? '}'? (ambiguity) cConstraint=ClockConstraintExpression
	 */
	protected void emit_Message_LeftCurlyBracketKeyword_20_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '}'?
	 *
	 * This ambiguous syntax occurs at:
	 *     c=[Constraint|ID] ';'? (ambiguity) '{'? '}'? ';' (rule end)
	 *     c=[Constraint|ID] ';'? (ambiguity) '{'? '}'? reset?='reset'
	 *     c=[Constraint|ID] ';'? (ambiguity) '{'? '}'? resetclock=[Clock|ID]
	 *     c=[Constraint|ID] ';'? (ambiguity) '{'? cConstraint=ClockConstraintExpression
	 *     c=[Constraint|ID] ';'? (ambiguity) clockconstraint?='clock'
	 *     constraint?='constraint' '{'? ';'? (ambiguity) '{'? '}'? ';' (rule end)
	 *     constraint?='constraint' '{'? ';'? (ambiguity) '{'? '}'? reset?='reset'
	 *     constraint?='constraint' '{'? ';'? (ambiguity) '{'? '}'? resetclock=[Clock|ID]
	 *     constraint?='constraint' '{'? ';'? (ambiguity) '{'? cConstraint=ClockConstraintExpression
	 *     constraint?='constraint' '{'? ';'? (ambiguity) clockconstraint?='clock'
	 *     constraintexp=ClockConstraintExpression (ambiguity) '{'? '}'? ';' (rule end)
	 *     constraintexp=ClockConstraintExpression (ambiguity) '{'? '}'? reset?='reset'
	 *     constraintexp=ClockConstraintExpression (ambiguity) '{'? '}'? resetclock=[Clock|ID]
	 *     constraintexp=ClockConstraintExpression (ambiguity) '{'? cConstraint=ClockConstraintExpression
	 *     constraintexp=ClockConstraintExpression (ambiguity) clockconstraint?='clock'
	 *     future?='future' '{'? ';'? (ambiguity) '{'? '}'? ';' (rule end)
	 *     future?='future' '{'? ';'? (ambiguity) '{'? '}'? reset?='reset'
	 *     future?='future' '{'? ';'? (ambiguity) '{'? '}'? resetclock=[Clock|ID]
	 *     future?='future' '{'? ';'? (ambiguity) '{'? cConstraint=ClockConstraintExpression
	 *     future?='future' '{'? ';'? (ambiguity) clockconstraint?='clock'
	 *     past?='past' '{'? ';'? (ambiguity) '{'? '}'? ';' (rule end)
	 *     past?='past' '{'? ';'? (ambiguity) '{'? '}'? reset?='reset'
	 *     past?='past' '{'? ';'? (ambiguity) '{'? '}'? resetclock=[Clock|ID]
	 *     past?='past' '{'? ';'? (ambiguity) '{'? cConstraint=ClockConstraintExpression
	 *     past?='past' '{'? ';'? (ambiguity) clockconstraint?='clock'
	 *     receiver=[Object|ID] '{'? ';'? (ambiguity) '{'? '}'? ';' (rule end)
	 *     receiver=[Object|ID] '{'? ';'? (ambiguity) '{'? '}'? reset?='reset'
	 *     receiver=[Object|ID] '{'? ';'? (ambiguity) '{'? '}'? resetclock=[Clock|ID]
	 *     receiver=[Object|ID] '{'? ';'? (ambiguity) '{'? cConstraint=ClockConstraintExpression
	 *     receiver=[Object|ID] '{'? ';'? (ambiguity) clockconstraint?='clock'
	 */
	protected void emit_Message_RightCurlyBracketKeyword_18_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '}'?
	 *
	 * This ambiguous syntax occurs at:
	 *     c=[Constraint|ID] ';'? '}'? '{'? (ambiguity) ';' (rule end)
	 *     c=[Constraint|ID] ';'? '}'? '{'? (ambiguity) reset?='reset'
	 *     c=[Constraint|ID] ';'? '}'? '{'? (ambiguity) resetclock=[Clock|ID]
	 *     cConstraint=ClockConstraintExpression (ambiguity) ';' (rule end)
	 *     cConstraint=ClockConstraintExpression (ambiguity) reset?='reset'
	 *     cConstraint=ClockConstraintExpression (ambiguity) resetclock=[Clock|ID]
	 *     clockconstraint?='clock' 'constraint' '{'? (ambiguity) ';' (rule end)
	 *     clockconstraint?='clock' 'constraint' '{'? (ambiguity) reset?='reset'
	 *     clockconstraint?='clock' 'constraint' '{'? (ambiguity) resetclock=[Clock|ID]
	 *     constraint?='constraint' '{'? ';'? '}'? '{'? (ambiguity) ';' (rule end)
	 *     constraint?='constraint' '{'? ';'? '}'? '{'? (ambiguity) reset?='reset'
	 *     constraint?='constraint' '{'? ';'? '}'? '{'? (ambiguity) resetclock=[Clock|ID]
	 *     constraintexp=ClockConstraintExpression '}'? '{'? (ambiguity) ';' (rule end)
	 *     constraintexp=ClockConstraintExpression '}'? '{'? (ambiguity) reset?='reset'
	 *     constraintexp=ClockConstraintExpression '}'? '{'? (ambiguity) resetclock=[Clock|ID]
	 *     future?='future' '{'? ';'? '}'? '{'? (ambiguity) ';' (rule end)
	 *     future?='future' '{'? ';'? '}'? '{'? (ambiguity) reset?='reset'
	 *     future?='future' '{'? ';'? '}'? '{'? (ambiguity) resetclock=[Clock|ID]
	 *     past?='past' '{'? ';'? '}'? '{'? (ambiguity) ';' (rule end)
	 *     past?='past' '{'? ';'? '}'? '{'? (ambiguity) reset?='reset'
	 *     past?='past' '{'? ';'? '}'? '{'? (ambiguity) resetclock=[Clock|ID]
	 *     receiver=[Object|ID] '{'? ';'? '}'? '{'? (ambiguity) ';' (rule end)
	 *     receiver=[Object|ID] '{'? ';'? '}'? '{'? (ambiguity) reset?='reset'
	 *     receiver=[Object|ID] '{'? ';'? '}'? '{'? (ambiguity) resetclock=[Clock|ID]
	 */
	protected void emit_Message_RightCurlyBracketKeyword_22_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     c=[Constraint|ID] (ambiguity) '}'? '{'? '}'? ';' (rule end)
	 *     c=[Constraint|ID] (ambiguity) '}'? '{'? '}'? reset?='reset'
	 *     c=[Constraint|ID] (ambiguity) '}'? '{'? '}'? resetclock=[Clock|ID]
	 *     c=[Constraint|ID] (ambiguity) '}'? '{'? cConstraint=ClockConstraintExpression
	 *     c=[Constraint|ID] (ambiguity) '}'? clockconstraint?='clock'
	 *     c=[Constraint|ID] (ambiguity) constraintexp=ClockConstraintExpression
	 *     constraint?='constraint' '{'? (ambiguity) '}'? '{'? '}'? ';' (rule end)
	 *     constraint?='constraint' '{'? (ambiguity) '}'? '{'? '}'? reset?='reset'
	 *     constraint?='constraint' '{'? (ambiguity) '}'? '{'? '}'? resetclock=[Clock|ID]
	 *     constraint?='constraint' '{'? (ambiguity) '}'? '{'? cConstraint=ClockConstraintExpression
	 *     constraint?='constraint' '{'? (ambiguity) '}'? clockconstraint?='clock'
	 *     constraint?='constraint' '{'? (ambiguity) constraintexp=ClockConstraintExpression
	 *     future?='future' '{'? (ambiguity) '}'? '{'? '}'? ';' (rule end)
	 *     future?='future' '{'? (ambiguity) '}'? '{'? '}'? reset?='reset'
	 *     future?='future' '{'? (ambiguity) '}'? '{'? '}'? resetclock=[Clock|ID]
	 *     future?='future' '{'? (ambiguity) '}'? '{'? cConstraint=ClockConstraintExpression
	 *     future?='future' '{'? (ambiguity) '}'? clockconstraint?='clock'
	 *     future?='future' '{'? (ambiguity) constraintexp=ClockConstraintExpression
	 *     past?='past' '{'? (ambiguity) '}'? '{'? '}'? ';' (rule end)
	 *     past?='past' '{'? (ambiguity) '}'? '{'? '}'? reset?='reset'
	 *     past?='past' '{'? (ambiguity) '}'? '{'? '}'? resetclock=[Clock|ID]
	 *     past?='past' '{'? (ambiguity) '}'? '{'? cConstraint=ClockConstraintExpression
	 *     past?='past' '{'? (ambiguity) '}'? clockconstraint?='clock'
	 *     past?='past' '{'? (ambiguity) constraintexp=ClockConstraintExpression
	 *     receiver=[Object|ID] '{'? (ambiguity) '}'? '{'? '}'? ';' (rule end)
	 *     receiver=[Object|ID] '{'? (ambiguity) '}'? '{'? '}'? reset?='reset'
	 *     receiver=[Object|ID] '{'? (ambiguity) '}'? '{'? '}'? resetclock=[Clock|ID]
	 *     receiver=[Object|ID] '{'? (ambiguity) '}'? '{'? cConstraint=ClockConstraintExpression
	 *     receiver=[Object|ID] '{'? (ambiguity) '}'? clockconstraint?='clock'
	 *     receiver=[Object|ID] '{'? (ambiguity) constraintexp=ClockConstraintExpression
	 */
	protected void emit_Message_SemicolonKeyword_16_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '='?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) ';' (rule end)
	 *     name=ID (ambiguity) value=AttributeValue
	 */
	protected void emit_Parameter_EqualsSignKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
