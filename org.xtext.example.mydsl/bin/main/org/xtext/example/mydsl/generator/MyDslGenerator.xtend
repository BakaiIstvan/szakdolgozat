/*
 * generated by Xtext 2.16.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.mydsl.myDsl.Scenario
import org.xtext.example.mydsl.myDsl.Domain
import org.xtext.example.mydsl.myDsl.Message
import org.xtext.example.mydsl.myDsl.MatchMessage
import org.xtext.example.mydsl.myDsl.AppearMessage
import org.xtext.example.mydsl.myDsl.DisappearMessage
import org.xtext.example.mydsl.myDsl.ChangeToMessage
import org.eclipse.xtext.naming.IQualifiedNameProvider
import com.google.inject.Inject
import org.xtext.example.mydsl.myDsl.ContextModel
import org.xtext.example.mydsl.myDsl.Entity
import org.xtext.example.mydsl.myDsl.Relation
import org.xtext.example.mydsl.myDsl.ChangeToRelation
import org.xtext.example.mydsl.myDsl.FEntity
import org.xtext.example.mydsl.myDsl.FRelation
import org.xtext.example.mydsl.myDsl.ContextFragment

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {
	
	@Inject extension IQualifiedNameProvider
	
	@Inject
	ContextModelGenerator contextModelGenerator
	
	@Inject
	ContextFragmentGenerator contextFragmentGenerator
	
	@Inject
	EntityGenerator entityGenerator
	
	@Inject
	RelationGenerator relationGenerator
	
	@Inject 
	EventCreatorGenerator eventCreatorGenerator
	
	@Inject
	StateGenerator stateGenerator
	
	@Inject
	TransitionGenerator transitionGenerator
	
	@Inject
	AutomatonGenerator automatonGenerator

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		contextModelGenerator.doGenerate(resource, fsa, context);
		contextFragmentGenerator.doGenerate(resource, fsa, context);
		entityGenerator.doGenerate(resource, fsa, context);
		relationGenerator.doGenerate(resource, fsa, context);
		eventCreatorGenerator.doGenerate(resource, fsa, context);
		stateGenerator.doGenerate(resource, fsa, context);
		transitionGenerator.doGenerate(resource,fsa, context);
		automatonGenerator.doGenerate(resource, fsa, context);
				
		for(s : resource.allContents.toIterable.filter(Domain)){
			fsa.generateFile("Specification.java", s.compile)
		}
	}
	
	def compile(Domain s) '''
		import java.io.FileNotFoundException;
		import java.io.PrintWriter;
		import java.io.UnsupportedEncodingException;
		import java.util.ArrayList;
		
		public class Specification{
			private String id = "«s.name»";
			private ArrayList<Automaton> automatas;
			
			public Specification(){
				automatas = new ArrayList<Automaton>();
				String str;
				State actualState;
				State acceptState;
				State finalState;
				State newState;
				State acceptState_new;
				«FOR scenario:s.scenarios»
					Automaton a = new Automaton("«scenario.name»");
					Automaton b;
					ArrayList<Automaton> altauto;
					ArrayList<Automaton> parauto;
					Automaton loopauto;
					Automaton expression;
					int counter = 0;
					
					«FOR sc : scenario.scenariocontents»
						«FOR cm :sc.contextmessage»
							«IF cm.strict»
								«IF cm.required»
									«FOR co : cm.content»
										«FOR ma : co.match»
											«ma.compile_match_strict_required»
											a.collapse(b);
										«ENDFOR»
										«FOR ca : co.change»
											«FOR a : ca.appear»
												«a.compile_appear_strict_required»
												a.collapse(b);																											
											«ENDFOR»
											«FOR d : ca.disappear»
												«d.compile_disappear_strict_required»
												a.collapse(b);																																						
											«ENDFOR»
											«FOR t : ca.changeto»
												«t.compile_changeto_strict_required»
												a.collapse(b);																																				
											«ENDFOR»
											«FOR t : ca.changetor»
												«t.compile_changetor_strict_required»
												a.collapse(b);																																				
											«ENDFOR»																	
										«ENDFOR»					
									«ENDFOR»
								«ENDIF»
								«IF cm.fail»
									«FOR co : cm.content»
										«FOR ma : co.match»
											«ma.compile_match_strict_fail»
											a.collapse(b);										
										«ENDFOR»
										«FOR ca : co.change»
											«FOR a : ca.appear»
												«a.compile_appear_strict_fail»
												a.collapse(b);																										
											«ENDFOR»
											«FOR d : ca.disappear»
												«d.compile_disappear_strict_fail»
												a.collapse(b);																																						
											«ENDFOR»
											«FOR t : ca.changeto»
												«t.compile_changeto_strict_fail»
												a.collapse(b);																																				
											«ENDFOR»
											«FOR t : ca.changetor»
												«t.compile_changetor_strict_fail»
												a.collapse(b);																																				
											«ENDFOR»																	
										«ENDFOR»					
									«ENDFOR»
								«ENDIF»
								«IF !cm.required && !cm.fail»
									«FOR co : cm.content»
										«FOR ma : co.match»
											«ma.compile_match_strict»
											a.collapse(b);
										«ENDFOR»
										«FOR ca : co.change»
											«FOR a : ca.appear»
												«a.compile_appear_strict»
												a.collapse(b);																											
											«ENDFOR»
											«FOR d : ca.disappear»
												«d.compile_disappear_strict»
												a.collapse(b);																																						
											«ENDFOR»
											«FOR t : ca.changeto»
												«t.compile_changeto_strict»
												a.collapse(b);																																				
											«ENDFOR»
											«FOR t : ca.changetor»
												«t.compile_changetor_strict»
												a.collapse(b);																																				
											«ENDFOR»																	
										«ENDFOR»					
									«ENDFOR»
								«ENDIF»
							«ENDIF»
							
							«IF !cm.strict»
								«IF cm.required»
									«FOR co : cm.content»
										«FOR ma : co.match»
											«ma.compile_match_required»
											a.collapse(b);
										«ENDFOR»
										«FOR ca : co.change»
											«FOR a : ca.appear»
												«a.compile_appear_required»
												a.collapse(b);
											«ENDFOR»
											«FOR d : ca.disappear»
												«d.compile_disappear_required»
												a.collapse(b);
											«ENDFOR»
											«FOR t : ca.changeto»
												«t.compile_changeto_required»
												a.collapse(b);
											«ENDFOR»
											«FOR t : ca.changetor»
												«t.compile_changetor_required»
												a.collapse(b);
											«ENDFOR»																	
										«ENDFOR»					
									«ENDFOR»
								«ENDIF»
								«IF cm.fail»
									«FOR co : cm.content»
										«FOR ma : co.match»
											«ma.compile_match_fail»
											a.collapse(b);									
										«ENDFOR»
										«FOR ca : co.change»
											«FOR a : ca.appear»
												«a.compile_appear_fail»
												a.collapse(b);																											
											«ENDFOR»
											«FOR d : ca.disappear»
												«d.compile_disappear_fail»
												a.collapse(b);																																						
											«ENDFOR»
											«FOR t : ca.changeto»
												«t.compile_changeto_fail»
												a.collapse(b);																																				
											«ENDFOR»
											«FOR t : ca.changetor»
												«t.compile_changetor_fail»
												a.collapse(b);																																				
											«ENDFOR»																	
										«ENDFOR»					
									«ENDFOR»
								«ENDIF»
								«IF !cm.required && !cm.fail»
									«FOR co : cm.content»
										«FOR ma : co.match»
											«ma.compile_match_msg»
											a.collapse(b);							
										«ENDFOR»
										«FOR ca : co.change»
											«FOR a : ca.appear»
												«a.compile_appear_msg»
												a.collapse(b);																								
											«ENDFOR»
											«FOR d : ca.disappear»
												«d.compile_disappear_msg»
												a.collapse(b);																							
											«ENDFOR»
											«FOR t : ca.changeto»
												«t.compile_changeto_msg»
												a.collapse(b);																																	
											«ENDFOR»
											«FOR t : ca.changetor»
												«t.compile_changetor_msg»
												a.collapse(b);																																	
											«ENDFOR»																	
										«ENDFOR»					
									«ENDFOR»
								«ENDIF»
							«ENDIF»
						«ENDFOR»
						«FOR l :sc.loop»
							loopauto = new Automaton("loopauto" + counter);
							«FOR m : l.messages»
								«IF m.constraint»
									str = "" 
									«FOR msg : m.c.messages»
										+ "!(" + "«msg.sender.name»" + "." + "«msg.name»" + "." + "«msg.receiver.name»)" + " & "
									«ENDFOR»;
									str= str.substring(0, str.length() - 3);
								«ENDIF»
								«IF !m.strict»
									«IF m.required»
										«IF m.future»
											«m.compile_required_future»
											loopauto.collapse(b);
										«ENDIF»
										«IF m.past»
											«m.compile_required_past»
											loopauto.collapse(b);
										«ENDIF»
										«IF !m.past && !m.future»
											«m.compile_required»
											loopauto.collapse(b);
										«ENDIF»
									«ENDIF»
									«IF m.fail»
										«IF m.past»
											«m.compile_fail_past»
											loopauto.collapse(b);
										«ENDIF»
										«IF !m.past && !m.future»
											«m.compile_fail»
											loopauto.collapse(b);
										«ENDIF»
									«ENDIF»
									«IF !m.fail && !m.required»
										«IF m.future»
											«m.compile_future»
											loopauto.collapse(b);
										«ENDIF»
										«IF m.past»
											«m.compile_past»
											loopauto.collapse(b);
										«ENDIF»
										«IF !m.past && !m.future»
											«m.compile_msg»
											loopauto.collapse(b);
										«ENDIF»
									«ENDIF»
								«ENDIF»
								
								«IF m.strict»
									«IF m.required»
										«IF m.future»
											«m.compile_strict_required_future»
											loopauto.collapse(b);
										«ENDIF»
										«IF !m.past && !m.future»
											«m.compile_strict_required»
											loopauto.collapse(b);
										«ENDIF»
									«ENDIF»
									«IF m.fail»
										«IF !m.past && !m.future»
											«m.compile_strict_fail»
											loopauto.collapse(b);
										«ENDIF»
									«ENDIF»
									«IF !m.fail && !m.required»
										«IF m.future»
											«m.compile_strict_future»
											loopauto.collapse(b);
										«ENDIF»
										«IF !m.past && !m.future»
											«m.compile_strict»
											loopauto.collapse(b);
										«ENDIF» 
									«ENDIF»
								«ENDIF»
							«ENDFOR»
							a.merge(loopSetup(loopauto, «l.min», «l.max»));
						«ENDFOR»
						«FOR p : sc.par»
							parauto = new ArrayList<Automaton>();
							«FOR pe : p.parexpression»
								expression = new Automaton("expauto" + counter);
								«FOR m : pe.messages»
									«IF m.constraint»
										str = "" 
										«FOR msg : m.c.messages»
											+ "!(" + "«msg.sender.name»" + "." + "«msg.name»" + "." + "«msg.receiver.name»)" + " & "
										«ENDFOR»;
										str= str.substring(0, str.length() - 3);
									«ENDIF»
									«IF !m.strict»
										«IF m.required»
											«IF m.future»
												«m.compile_required_future»
												expression.collapse(b);
											«ENDIF»
											«IF m.past»
												«m.compile_required_past»
												expression.collapse(b);
											«ENDIF»
											«IF !m.past && !m.future»
												«m.compile_required»
												expression.collapse(b);
											«ENDIF»
										«ENDIF»
										«IF m.fail»
											«IF m.past»
												«m.compile_fail_past»
												expression.collapse(b);
											«ENDIF»
											«IF !m.past && !m.future»
												«m.compile_fail»
												expression.collapse(b);
											«ENDIF»
										«ENDIF»
										«IF !m.fail && !m.required»
											«IF m.future»
												«m.compile_future»
												expression.collapse(b);
											«ENDIF»
											«IF m.past»
												«m.compile_past»
												expression.collapse(b);
											«ENDIF»
											«IF !m.past && !m.future»
												«m.compile_msg»
												expression.collapse(b);
											«ENDIF»
										«ENDIF»
									«ENDIF»
									
									«IF m.strict»
										«IF m.required»
											«IF m.future»
												«m.compile_strict_required_future»
												expression.collapse(b);
											«ENDIF»
											«IF !m.past && !m.future»
												«m.compile_strict_required»
												expression.collapse(b);
											«ENDIF»
										«ENDIF»
										«IF m.fail»
											«IF !m.past && !m.future»
												«m.compile_strict_fail»
												expression.collapse(b);
											«ENDIF»
										«ENDIF»
										«IF !m.fail && !m.required»
											«IF m.future»
												«m.compile_strict_future»
												expression.collapse(b);
											«ENDIF»
											«IF !m.past && !m.future»
												«m.compile_strict»
												expression.collapse(b);
											«ENDIF» 
										«ENDIF»
									«ENDIF»
								«ENDFOR»
								parauto.add(expression);			
							«ENDFOR»
							a.merge(par(parauto));
						«ENDFOR»
						«FOR a : sc.alt»
						altauto = new ArrayList<Automaton>();
							«FOR e : a.expressions»
								expression = new Automaton("expauto" + counter);
								«FOR m : e.messages»
									«IF m.constraint»
										str = "" 
										«FOR msg : m.c.messages»
											+ "!(" + "«msg.sender.name»" + "." + "«msg.name»" + "." + "«msg.receiver.name»)" + " & "
										«ENDFOR»;
										str= str.substring(0, str.length() - 3);
									«ENDIF»
									«IF !m.strict»
										«IF m.required»
											«IF m.future»
												«m.compile_required_future»
												expression.collapse(b);
											«ENDIF»
											«IF m.past»
												«m.compile_required_past»
												expression.collapse(b);
											«ENDIF»
											«IF !m.past && !m.future»
												«m.compile_required»
												expression.collapse(b);
											«ENDIF»
										«ENDIF»
										«IF m.fail»
											«IF m.past»
												«m.compile_fail_past»
												expression.collapse(b);
											«ENDIF»
											«IF !m.past && !m.future»
												«m.compile_fail»
												expression.collapse(b);
											«ENDIF»
										«ENDIF»
										«IF !m.fail && !m.required»
											«IF m.future»
												«m.compile_future»
												expression.collapse(b);
											«ENDIF»
											«IF m.past»
												«m.compile_past»
												expression.collapse(b);
											«ENDIF»
											«IF !m.past && !m.future»
												«m.compile_msg»
												expression.collapse(b);
											«ENDIF»
										«ENDIF»
									«ENDIF»
									
									«IF m.strict»
										«IF m.required»
											«IF m.future»
												«m.compile_strict_required_future»
												expression.collapse(b);
											«ENDIF»
											«IF !m.past && !m.future»
												«m.compile_strict_required»
												expression.collapse(b);
											«ENDIF»
										«ENDIF»
										«IF m.fail»
											«IF !m.past && !m.future»
												«m.compile_strict_fail»
												expression.collapse(b);
											«ENDIF»
										«ENDIF»
										«IF !m.fail && !m.required»
											«IF m.future»
												«m.compile_strict_future»
												expression.collapse(b);
											«ENDIF»
											«IF !m.past && !m.future»
												«m.compile_strict»
												expression.collapse(b);
											«ENDIF» 
										«ENDIF»
									«ENDIF»
								«ENDFOR»
								altauto.add(expression);						
							«ENDFOR»
							a.merge(altauto);
						«ENDFOR»
						«FOR m : sc.message»
							«IF m.constraint»
								str = "" 
								«FOR msg : m.c.messages»
									+ "!(" + "«msg.sender.name»" + "." + "«msg.name»" + "." + "«msg.receiver.name»)" + " & "
								«ENDFOR»;
								str= str.substring(0, str.length() - 3);
							«ENDIF»
							«IF !m.strict»
								«IF m.required»
									«IF m.future»
										«m.compile_required_future»
										a.collapse(b);
									«ENDIF»
									«IF m.past»
										«m.compile_required_past»
										a.collapse(b);
									«ENDIF»
									«IF !m.past && !m.future»
										«m.compile_required»
										a.collapse(b);
									«ENDIF»
								«ENDIF»
								«IF m.fail»
									«IF m.past»
										«m.compile_fail_past»
										a.collapse(b);
									«ENDIF»
									«IF !m.past && !m.future»
										«m.compile_fail»
										a.collapse(b);
									«ENDIF»
								«ENDIF»
								«IF !m.fail && !m.required»
									«IF m.future»
										«m.compile_future»
										a.collapse(b);
									«ENDIF»
									«IF m.past»
										«m.compile_past»
										a.collapse(b);
									«ENDIF»
									«IF !m.past && !m.future»
										«m.compile_msg»
										a.collapse(b);
									«ENDIF»
								«ENDIF»
							«ENDIF»
							
							«IF m.strict»
								«IF m.required»
									«IF m.future»
										«m.compile_strict_required_future»
										a.collapse(b);
									«ENDIF»
									«IF !m.past && !m.future»
										«m.compile_strict_required»
										a.collapse(b);
									«ENDIF»
								«ENDIF»
								«IF m.fail»
									«IF !m.past && !m.future»
										«m.compile_strict_fail»
										a.collapse(b);
									«ENDIF»
								«ENDIF»
								«IF !m.fail && !m.required»
									«IF m.future»
										«m.compile_strict_future»
										a.collapse(b);
									«ENDIF»
									«IF !m.past && !m.future»
										«m.compile_strict»
										a.collapse(b);
									«ENDIF» 
								«ENDIF»
							«ENDIF»
						«ENDFOR»
					«ENDFOR»
					a.rename();
					automatas.add(a);
				«ENDFOR»
			}
			
			public void listAutomatas(){
				for(Automaton a : this.automatas){
					for(State s : a.getStates()){
						s.writeState();	
					}
					
					for(Transition t : a.getTransitions()){
						t.writeTransition();
					}
				}
			}
			
			public ArrayList<Automaton> par(ArrayList<Automaton> automatas) {
			        ArrayList<ArrayList<Automaton>> automataList = new ArrayList<>();
			        permute(automataList, new ArrayList<>(), automatas);
			        return listConverter((automataList));
			}
		
		    private void permute(ArrayList<ArrayList<Automaton>> list, ArrayList<Automaton> resultList, ArrayList<Automaton> automatas) {
		        if (resultList.size() == automatas.size()) {
		            list.add(new ArrayList<>(resultList));
		        } else {
		            for (int i = 0; i < automatas.size(); i++) {
		                if (resultList.contains((automatas.get(i)))) {
		                    continue;
		                }
		
		                resultList.add(automatas.get(i));
		                permute(list, resultList, automatas);
		                resultList.remove(resultList.size() - 1);
		            }
		        }
		    }
		
		    private ArrayList<Automaton> listConverter(ArrayList<ArrayList<Automaton>> list) {
		        ArrayList<Automaton> result = new ArrayList<>();
		        for (ArrayList<Automaton> alist : list) {
		            Automaton newauto = new Automaton("listConverter");
		            for (Automaton auto : alist) {
		                newauto.collapse(copyAutomaton(auto));
		            }
		            result.add(newauto);
		        }
		        return result;
		    }
		    
		    public ArrayList<Automaton> loopSetup(Automaton loopauto, int min, int max) {
	            ArrayList<Automaton> result = new ArrayList<>();
	    
	            for (int i = min; i <= max; i++) {
	                Automaton newauto = new Automaton("loopauto");
	                for (int j = 0; j < i; j++) {
	                    newauto.collapse(copyAutomaton(loopauto));
	                }
	                result.add(newauto);
	            }
	            return result;
		    }
		    
		    public Automaton copyAutomaton(Automaton referenceAuto) {
		            Automaton result = new Automaton("copy automaton");
		            int count = 0;
		            State previousSender = new State();
		            State referencePreviousSender = new State();
		    
		            for (Transition t : referenceAuto.getTransitions()) {
		                State sender = new State();
		                State receiver = new State();
		                Transition transition = new Transition();
		                Automaton temp = new Automaton("temp");
		    
		                transition.setId(t.getId());
		    
		                if (t.getSender() == referencePreviousSender) {
		                    receiver.setId("c" + count);
		                    count++;
		                    receiver.setType(t.getReceiver().getType());
		    
		                    transition.setSender(previousSender);
		                    transition.setReceiver(receiver);
		                    temp.addState(previousSender);
		                    temp.addState(receiver);
		                    temp.setInitial(previousSender);
		                    temp.setFinale(receiver);
		                } else {
		                    if (t.getSender() == t.getReceiver()) {
		                        sender.setId("c" + count);
		                        count++;
		                        sender.setType(t.getSender().getType());
		    
		                        transition.setSender(sender);
		                        transition.setReceiver(sender);
		    
		                        temp.addState(sender);
		                        temp.setInitial(sender);
		                        temp.setFinale(sender);
		                    } else {
		                        sender.setId("c" + count);
		                        count++;
		                        sender.setType(t.getSender().getType());
		    
		                        receiver.setId("c" + count);
		                        count++;
		                        receiver.setType(t.getReceiver().getType());
		    
		                        transition.setSender(sender);
		                        transition.setReceiver(receiver);
		    
		                        temp.addState(sender);
		                        temp.addState(receiver);
		                        temp.setInitial(sender);
		                        temp.setFinale(receiver);
		                    }
		                    previousSender = sender;
		                    referencePreviousSender = t.getSender();
		                }
		    
		                temp.addTransition(transition);
		                result.collapse(temp);
		            }
		    
		            return result;
		        }
			
			public static void main(String[] args) throws FileNotFoundException, UnsupportedEncodingException{
				Specification specification = new Specification();
				specification.listAutomatas();
				boolean acceptState = false;
				
				PrintWriter writer = new PrintWriter("«s.name»" + ".txt", "UTF-8");
				for(Automaton a : specification.automatas){
					writer.println("never{ /*" + a.getId()+ "Monitor" + "*/");
					for(State s : a.getStates()){
						if(s == a.getInitial()){
							writer.println("T0_init:");
							writer.println(" if");
							for(Transition t : a.findSender(s)){
								if(t.getReceiver() == a.getInitial()){
									writer.println(" :: (" + t.getId() + ") " + "->" + " goto T0_init");
								}else if(t.getReceiver().getType().equals(StateType.NORMAL)){
									writer.println(" :: (" + t.getId() + ") " + "->" + " goto T0_" + t.getReceiver().getId());
								}else if(t.getReceiver().getType().equals(StateType.ACCEPT_ALL)){
									writer.println(" :: (" + t.getId() + ") " + "->" + " goto accept_all" );
								}else if(t.getReceiver().getType().equals(StateType.FINAL)){
									writer.println(" :: (" + t.getId() + ") " + "->" + " goto T0_" + t.getReceiver().getId());
								}else if(t.getReceiver().getType().equals(StateType.ACCEPT)){
									writer.println(" :: (" + t.getId() + ") " + "->" + " goto accept_" + t.getReceiver().getId());
								}
							}
							writer.println(" fi;");
						}else if(s.getType().equals(StateType.NORMAL)){
							writer.println("T0_" + s.getId() + ":");
							writer.println(" if");
							for(Transition t : a.findSender(s)){
								if(t.getReceiver() == a.getInitial()){
									writer.println(" :: (" + t.getId() + ") " + "->" + " goto T0_init");
								}else if(t.getReceiver().getType().equals(StateType.NORMAL)){
									writer.println(" :: (" + t.getId() + ") " + "->" + " goto T0_" + t.getReceiver().getId());
								}else if(t.getReceiver().getType().equals(StateType.ACCEPT_ALL)){
									writer.println(" :: (" + t.getId() + ") " + "->" + " goto accept_all" );
								}else if(t.getReceiver().getType().equals(StateType.FINAL)){
									writer.println(" :: (" + t.getId() + ") " + "->" + " goto T0_" + t.getReceiver().getId());
								}else if(t.getReceiver().getType().equals(StateType.ACCEPT)){
									writer.println(" :: (" + t.getId() + ") " + "->" + " goto accept_" + t.getReceiver().getId());
								}
							}
							writer.println(" fi;");
						}else if(s.getType().equals(StateType.ACCEPT_ALL) && !acceptState){
							writer.println("accept_all:");
							writer.println("skip");
							acceptState = true;
						}else if(s.getType().equals(StateType.FINAL)){
							writer.println("T0_" + s.getId() + ":");
							writer.println(" if");
							for(Transition t : a.findSender(s)){
								if(t.getReceiver() == a.getInitial()){
									writer.println(" :: (" + t.getId() + ")" + "->" + " goto T0_init");
								}else if(t.getReceiver().getType().equals(StateType.NORMAL)){
									writer.println(" :: (" + t.getId() + ") " + "->" + " goto T0_" + t.getReceiver().getId());
								}else if(t.getReceiver().getType().equals(StateType.ACCEPT_ALL)){
									writer.println(" :: (" + t.getId() + ") " + "->" + " goto accept_all" );
								}else if(t.getReceiver().getType().equals(StateType.FINAL)){
									writer.println(" :: (" + t.getId() + ") " + "->" + " goto T0_" + t.getReceiver().getId());
								}else if(t.getReceiver().getType().equals(StateType.ACCEPT)){
									writer.println(" :: (" + t.getId() + ") " + "->" + " goto accept_" + t.getReceiver().getId());
								}
							}
							writer.println(" fi;");
						}else if(s.getType().equals(StateType.ACCEPT)){
							writer.println("accept_" + s.getId() + ":");
							writer.println(" if");
							for(Transition t : a.findSender(s)){
								if(t.getReceiver() == a.getInitial()){
									writer.println(" :: (" + t.getId() + ")" + "->" + " goto T0_init");
								}else if(t.getReceiver().getType().equals(StateType.NORMAL)){
									writer.println(" :: (" + t.getId() + ") " + "->" + " goto T0_" + t.getReceiver().getId());
								}else if(t.getReceiver().getType().equals(StateType.ACCEPT_ALL)){
									writer.println(" :: (" + t.getId() + ") " + "->" + " goto accept_all" );
								}else if(t.getReceiver().getType().equals(StateType.FINAL)){
									writer.println(" :: (" + t.getId() + ") " + "->" + " goto T0_" + t.getReceiver().getId());
								}else if(t.getReceiver().getType().equals(StateType.ACCEPT)){
									writer.println(" :: (" + t.getId() + ") " + "->" + " goto accept_" + t.getReceiver().getId());
								}
							}
							writer.println(" fi;");
						}
						
					}
					writer.println("}");
				}
				writer.close();
			}
		}
	'''
	
	def compile_required_future(Message m)'''
		b = new Automaton("auto1");
		actualState = new State("q" + counter, StateType.ACCEPT);
		counter++;
		b.addState(actualState);
		b.setInitial(actualState);
											
		b.addTransition(new Transition("!(" + "«m.sender.name»" + "." + "«m.name»" + "." + "«m.receiver.name»" + ")", actualState, actualState));
		finalState = new State("q" + counter, StateType.FINAL);
		counter++;
		acceptState = new State("q" + counter, StateType.ACCEPT_ALL);
		counter++;
		b.addTransition(new Transition("«m.sender.name»" + "." + "«m.name»" + "." + "«m.receiver.name»", actualState, finalState));
		b.addTransition(new Transition(str, finalState, finalState));
		b.addTransition(new Transition("!" + "(" + str + ")", finalState, acceptState));
		b.addTransition(new Transition("1", acceptState, acceptState));
		b.addState(acceptState);
		b.addState(finalState);
		b.setFinale(finalState);
		
	'''
	
	def compile_required_past(Message m)'''
		b = new Automaton("auto2");
		actualState = new State("q" + counter, StateType.ACCEPT);
		counter++;
		b.addState(actualState);
		b.setInitial(actualState);
		
											
		b.addTransition(new Transition("!(" + "«m.sender.name»" + "." + "«m.name»" + "." + "«m.receiver.name»" + " & " + str + ")", actualState, actualState));
		acceptState = new State("q" + counter, StateType.ACCEPT_ALL);
		counter++;
		finalState = new State("q" + counter, StateType.FINAL);
		counter++;
		b.addTransition(new Transition("«m.sender.name»" + "." + "«m.name»" + "." + "«m.receiver.name»", actualState, finalState));
		b.addTransition(new Transition("!" + "(" + str + ")", actualState, acceptState));
		b.addTransition(new Transition("1", acceptState, acceptState));
		b.addState(acceptState);
		b.addState(finalState);
		b.setFinale(finalState);
	'''
	
	def compile_required(Message m)'''
		b = new Automaton("auto3");
		actualState = new State("q" + counter, StateType.ACCEPT);
		counter++;
		b.addState(actualState);
		b.setInitial(actualState);
		
		
		b.addTransition(new Transition("!(" + "«m.sender.name»" + "." + "«m.name»" + "." + "«m.receiver.name»" + ")", actualState, actualState));
		newState = new State("q" + counter, StateType.FINAL);
		counter++;
		b.addTransition(new Transition("«m.sender.name»" + "." + "«m.name»" + "." + "«m.receiver.name»", actualState, newState));
		b.addState(newState);
		b.setFinale(newState);
	'''
	
	def compile_match_required(MatchMessage ma)'''
		b = new Automaton("auto3");
		actualState = new State("q" + counter, StateType.ACCEPT);
		counter++;
		b.addState(actualState);
		b.setInitial(actualState);
		
		
		b.addTransition(new Transition("!(" + "match(" + "«ma.context.name»" + ", " + "«ma.content.name»" + "))", actualState, actualState));
		newState = new State("q" + counter, StateType.FINAL);
		counter++;
		b.addTransition(new Transition("match(" + "«ma.context.name»" + ", " + "«ma.content.name»" + ")", actualState, newState));
		b.addState(newState);
		b.setFinale(newState);
	'''
	
	def compile_appear_required(AppearMessage am)'''
		b = new Automaton("auto3");
		actualState = new State("q" + counter, StateType.ACCEPT);
		counter++;
		b.addState(actualState);
		b.setInitial(actualState);
		
		
		b.addTransition(new Transition("!(" + "appear(" + "«am.context.name»" + "." + "«am.entity.name»" + "))", actualState, actualState));
		newState = new State("q" + counter, StateType.FINAL);
		counter++;
		b.addTransition(new Transition("appear(" + "«am.context.name»" + "." + "«am.entity.name»" + ")", actualState, newState));
		b.addState(newState);
		b.setFinale(newState);
	'''
	
	def compile_disappear_required(DisappearMessage dm)'''
		b = new Automaton("auto3");
		actualState = new State("q" + counter, StateType.ACCEPT);
		counter++;
		b.addState(actualState);
		b.setInitial(actualState);
		
		
		b.addTransition(new Transition("!("+ "disappear(" + "«dm.context.name»" + "." + "«dm.entity.name»" + "))", actualState, actualState));
		newState = new State("q" + counter, StateType.FINAL);
		counter++;
		b.addTransition(new Transition("disappear(" + "«dm.context.name»" + "." + "«dm.entity.name»" + ")", actualState, newState));
		b.addState(newState);
		b.setFinale(newState);
	'''
	
	def compile_changeto_required(ChangeToMessage cm)'''
		b = new Automaton("auto3");
		actualState = new State("q" + counter, StateType.ACCEPT);
		counter++;
		b.addState(actualState);
		b.setInitial(actualState);
		
		b.addTransition(new Transition("!(" + "changeTo(" + "«cm.context.name»" + "." + "«cm.entity.name»" + "." + "«cm.attribute.name», «cm.changevalue»" + "))", actualState, actualState));
		newState = new State("q" + counter, StateType.FINAL);
		counter++;
		b.addTransition(new Transition("changeTo(" + "«cm.context.name»" + "." + "«cm.entity.name»" + "." + "«cm.attribute.name», «cm.changevalue»" + ")", actualState, newState));
		b.addState(newState);
		b.setFinale(newState);
	'''
	
	def compile_changetor_required(ChangeToRelation cm)'''
		b = new Automaton("auto3");
		actualState = new State("q" + counter, StateType.ACCEPT);
		counter++;
		b.addState(actualState);
		b.setInitial(actualState);
		
		b.addTransition(new Transition("!(" + "changeTo(" + "«cm.context.name»" + "." + "«cm.relation.name»" + "." + "«cm.attribute.name», «cm.changevalue»" + "))", actualState, actualState));
		newState = new State("q" + counter, StateType.FINAL);
		counter++;
		b.addTransition(new Transition("changeTo(" + "«cm.context.name»" + "." + "«cm.relation.name»" + "." + "«cm.attribute.name», «cm.changevalue»" + ")", actualState, newState));
		b.addState(newState);
		b.setFinale(newState);
	'''
	
	def compile_fail_past(Message m)'''
		b = new Automaton("auto4");
		actualState = new State("q" + counter, StateType.NORMAL);
		counter++;
		b.addState(actualState);
		b.setInitial(actualState);
		
											
		b.addTransition(new Transition(str, actualState, actualState));
		finalState = new State("q" + counter, StateType.FINAL);
		counter++;
		acceptState = new State("q" + counter, StateType.ACCEPT_ALL);
		counter++;
		b.addTransition(new Transition("!" + "(" + str + ")", actualState, finalState));
		b.addTransition(new Transition("«m.sender.name»" + "." + "«m.name»" + "." + "«m.receiver.name»" , actualState, acceptState));
		b.addTransition(new Transition("1", acceptState, acceptState));
		b.addState(acceptState);
		b.addState(finalState);
		b.setFinale(finalState);
	'''
	
	def compile_fail(Message m)'''
		b = new Automaton("auto5");
		actualState = new State("q" + counter, StateType.FINAL);
		counter++;
		b.addState(actualState);
		b.setInitial(actualState);
		b.setFinale(actualState);
											
		b.addTransition(new Transition("1", actualState, actualState));
		newState = new State("q" + counter, StateType.ACCEPT_ALL);
		counter++;
		b.addTransition(new Transition("«m.sender.name»" + "." + "«m.name»" + "." + "«m.receiver.name»" , actualState, newState));
		b.addState(newState);
		b.addTransition(new Transition("1", newState, newState));
	'''
	
	def compile_appear_fail(AppearMessage am)'''
		b = new Automaton("auto5");
		actualState = new State("q" + counter, StateType.FINAL);
		counter++;
		b.addState(actualState);
		b.setInitial(actualState);
		b.setFinale(actualState);
											
		b.addTransition(new Transition("1", actualState, actualState));
		newState = new State("q" + counter, StateType.ACCEPT_ALL);
		counter++;
		b.addTransition(new Transition("appear(" + "«am.context.name»" + "." + "«am.entity.name»" + ")" , actualState, newState));
		b.addState(newState);
		b.addTransition(new Transition("1", newState, newState));
	'''
	
	def compile_disappear_fail(DisappearMessage dm)'''
		b = new Automaton("auto5");
		actualState = new State("q" + counter, StateType.FINAL);
		counter++;
		b.addState(actualState);
		b.setInitial(actualState);
		b.setFinale(actualState);
											
		b.addTransition(new Transition("1", actualState, actualState));
		newState = new State("q" + counter, StateType.ACCEPT_ALL);
		counter++;
		b.addTransition(new Transition("disappear(" + "«dm.context.name»" + "." + "«dm.entity.name»" + ")" , actualState, newState));
		b.addState(newState);
		b.addTransition(new Transition("1", newState, newState));
	'''
	
	def compile_match_fail(MatchMessage ma)'''
		b = new Automaton("auto5");
		actualState = new State("q" + counter, StateType.FINAL);
		counter++;
		b.addState(actualState);
		b.setInitial(actualState);
		b.setFinale(actualState);
											
		b.addTransition(new Transition("1", actualState, actualState));
		newState = new State("q" + counter, StateType.ACCEPT_ALL);
		counter++;
		b.addTransition(new Transition("match(" + "«ma.context.name»" + ", " + "«ma.content.name»" + ")" , actualState, newState));
		b.addState(newState);
		b.addTransition(new Transition("1", newState, newState));
	'''
	
	def compile_changeto_fail(ChangeToMessage cm)'''
		b = new Automaton("auto5");
		actualState = new State("q" + counter, StateType.FINAL);
		counter++;
		b.addState(actualState);
		b.setInitial(actualState);
		b.setFinale(actualState);
		
		b.addTransition(new Transition("1", actualState, actualState));
		newState = new State("q" + counter, StateType.ACCEPT_ALL);
		counter++;
		b.addTransition(new Transition("changeTo(" + "«cm.context.name»" + "." + "«cm.entity.name»" + "." + "«cm.attribute.name», «cm.changevalue»" + ")" , actualState, newState));
		b.addState(newState);
		b.addTransition(new Transition("1", newState, newState));
	'''
	
	def compile_changetor_fail(ChangeToRelation cm)'''
		b = new Automaton("auto5");
		actualState = new State("q" + counter, StateType.FINAL);
		counter++;
		b.addState(actualState);
		b.setInitial(actualState);
		b.setFinale(actualState);
		
		b.addTransition(new Transition("1", actualState, actualState));
		newState = new State("q" + counter, StateType.ACCEPT_ALL);
		counter++;
		b.addTransition(new Transition("changeTo(" + "«cm.context.name»" + "." + "«cm.relation.name»" + "." + "«cm.attribute.name», «cm.changevalue»" + ")" , actualState, newState));
		b.addState(newState);
		b.addTransition(new Transition("1", newState, newState));
	'''
	
	def compile_future(Message m)'''
		b = new Automaton("auto6");
		actualState = new State("q" + counter, StateType.NORMAL);
		counter++;
		b.addState(actualState);
		b.setInitial(actualState);
											
		b.addTransition(new Transition("1", actualState, actualState));
		newState = new State("q" + counter, StateType.FINAL);
		counter++;
		b.addTransition(new Transition("«m.sender.name»" + "." + "«m.name»" + "." + "«m.receiver.name»" , actualState, newState));
		b.addState(newState);
		b.addTransition(new Transition(str, newState, newState));
		b.setFinale(newState);
	'''
	
	def compile_past(Message m)'''
		b = new Automaton("auto7");
		actualState = new State("q" + counter, StateType.NORMAL);
		counter++;
		b.addState(actualState);
		b.setInitial(actualState);
												
		b.addTransition(new Transition(str, actualState, actualState));
		newState = new State("q" + counter, StateType.FINAL);
		counter++;
		b.addTransition(new Transition("«m.sender.name»" + "." + "«m.name»" + "." + "«m.receiver.name»", actualState, newState));
		b.addState(newState);
		b.setFinale(newState);
	'''
	
	def compile_msg(Message m)'''
		b = new Automaton("auto7");
		actualState = new State("q" + counter, StateType.NORMAL);
		counter++;
		b.addState(actualState);
		b.setInitial(actualState);
											
		b.addTransition(new Transition("1", actualState, actualState));
		newState = new State("q" + counter, StateType.FINAL);
		counter++;
		b.addTransition(new Transition("«m.sender.name»" + "." + "«m.name»" + "." + "«m.receiver.name»" , actualState, newState));
		b.addState(newState);
		b.setFinale(newState);
	'''
	
	def compile_match_msg(MatchMessage ma)'''
		b = new Automaton("match1");
		actualState = new State("q" + counter, StateType.NORMAL);
		counter++;
		b.addState(actualState);
		b.setInitial(actualState);
											
		b.addTransition(new Transition("1", actualState, actualState));
		newState = new State("q" + counter, StateType.FINAL);
		counter++;
		b.addTransition(new Transition("match(" + "«ma.context.name»" + ", " + "«ma.content.name»" + ")" , actualState, newState));
		b.addState(newState);
		b.setFinale(newState);
	'''
	
	def compile_appear_msg(AppearMessage am)'''
		b = new Automaton("match1");
		actualState = new State("q" + counter, StateType.NORMAL);
		counter++;
		b.addState(actualState);
		b.setInitial(actualState);
											
		b.addTransition(new Transition("1", actualState, actualState));
		newState = new State("q" + counter, StateType.FINAL);
		counter++;
		b.addTransition(new Transition("appear(" + "«am.context.name»" + "." + "«am.entity.name»" + ")" , actualState, newState));
		b.addState(newState);
		b.setFinale(newState);
	'''
	
	def compile_disappear_msg(DisappearMessage dm)'''
		b = new Automaton("match1");
		actualState = new State("q" + counter, StateType.NORMAL);
		counter++;
		b.addState(actualState);
		b.setInitial(actualState);
											
		b.addTransition(new Transition("1", actualState, actualState));
		newState = new State("q" + counter, StateType.FINAL);
		counter++;
		b.addTransition(new Transition("disappear(" + "«dm.context.name»" + "." + "«dm.entity.name»" + ")" , actualState, newState));
		b.addState(newState);
		b.setFinale(newState);
	'''
	
	def compile_changeto_msg(ChangeToMessage cm)'''
		b = new Automaton("match1");
		actualState = new State("q" + counter, StateType.NORMAL);
		counter++;
		b.addState(actualState);
		b.setInitial(actualState);
		
		b.addTransition(new Transition("1", actualState, actualState));
		newState = new State("q" + counter, StateType.FINAL);
		counter++;
		b.addTransition(new Transition("changeTo(" + "«cm.context.name»" + "." + "«cm.entity.name»" + "." + "«cm.attribute.name», «cm.changevalue»" + ")" , actualState, newState));
		b.addState(newState);
		b.setFinale(newState);
	'''
	
	def compile_changetor_msg(ChangeToRelation cm)'''
		b = new Automaton("match1");
		actualState = new State("q" + counter, StateType.NORMAL);
		counter++;
		b.addState(actualState);
		b.setInitial(actualState);
		
		b.addTransition(new Transition("1", actualState, actualState));
		newState = new State("q" + counter, StateType.FINAL);
		counter++;
		b.addTransition(new Transition("changeTo(" + "«cm.context.name»" + "." + "«cm.relation.name»" + "." + "«cm.attribute.name», «cm.changevalue»" + ")" , actualState, newState));
		b.addState(newState);
		b.setFinale(newState);
	'''
		
	def compile_strict_required_future(Message m)'''
		b = new Automaton("auto8");
		actualState = new State("q" + counter, StateType.ACCEPT);
		counter++;
		b.addState(actualState);
		b.setInitial(actualState);
											
		finalState = new State("q" + counter, StateType.FINAL);
		counter++;
		acceptState = new State("q" + counter, StateType.ACCEPT_ALL);
		counter++;
		acceptState_new = new State("q" + counter, StateType.ACCEPT_ALL);
		counter++;
		b.addTransition(new Transition("!(" + "«m.sender.name»" + "." + "«m.name»" + "." + "«m.receiver.name»" + ")", actualState, acceptState_new));
		b.addTransition(new Transition("1", acceptState_new, acceptState_new));
		b.addTransition(new Transition("«m.sender.name»" + "." + "«m.name»" + "." + "«m.receiver.name»", actualState, finalState));
		b.addTransition(new Transition(str, finalState, finalState));
		b.addTransition(new Transition("!" + "(" + str + ")", finalState, acceptState));
		b.addTransition(new Transition("1", acceptState, acceptState));
		b.addState(finalState);
		b.addState(acceptState);
		b.addState(acceptState_new);
		b.setFinale(finalState);
	'''
	
	def compile_strict_required(Message m)'''
		b = new Automaton("auto9");
		actualState = new State("q" + counter, StateType.ACCEPT);
		counter++;
		b.addState(actualState);
		b.setInitial(actualState);
											
		finalState = new State("q" + counter, StateType.FINAL);
		counter++;
		acceptState = new State("q" + counter, StateType.ACCEPT_ALL);
		counter++;
		b.addTransition(new Transition("«m.sender.name»" + "." + "«m.name»" + "." + "«m.receiver.name»" , actualState, finalState));
		b.addTransition(new Transition("!(" + "«m.sender.name»" + "." + "«m.name»" + "." + "«m.receiver.name»" + ")", actualState, acceptState));
		b.addTransition(new Transition("1", acceptState, acceptState));
		b.addState(acceptState);
		b.addState(finalState);
		b.setFinale(finalState);
	'''
	
	def compile_match_strict_required(MatchMessage ma)'''
		b = new Automaton("auto9");
		actualState = new State("q" + counter, StateType.ACCEPT);
		counter++;
		b.addState(actualState);
		b.setInitial(actualState);
											
		finalState = new State("q" + counter, StateType.FINAL);
		counter++;
		acceptState = new State("q" + counter, StateType.ACCEPT_ALL);
		counter++;
		b.addTransition(new Transition("match(" + "«ma.context.name»" + ", " + "«ma.content.name»" + ")" , actualState, finalState));
		b.addTransition(new Transition("!(" + "match(" + "«ma.context.name»" + ", " + "«ma.content.name»" + "))" , actualState, acceptState));
		b.addTransition(new Transition("1", acceptState, acceptState));
		b.addState(acceptState);
		b.addState(finalState);
		b.setFinale(finalState);
	'''
	
	def compile_appear_strict_required(AppearMessage am)'''
		b = new Automaton("auto9");
		actualState = new State("q" + counter, StateType.ACCEPT);
		counter++;
		b.addState(actualState);
		b.setInitial(actualState);
											
		finalState = new State("q" + counter, StateType.FINAL);
		counter++;
		acceptState = new State("q" + counter, StateType.ACCEPT_ALL);
		counter++;
		b.addTransition(new Transition("appear(" + "«am.context.name»" + "." + "«am.entity.name»" + ")" , actualState, finalState));
		b.addTransition(new Transition("!(" + "appear(" + "«am.context.name»" + "." + "«am.entity.name»" + "))" , actualState, acceptState));
		b.addTransition(new Transition("1", acceptState, acceptState));
		b.addState(acceptState);
		b.addState(finalState);
		b.setFinale(finalState);
	'''
	
	def compile_disappear_strict_required(DisappearMessage dm)'''
		b = new Automaton("auto9");
		actualState = new State("q" + counter, StateType.ACCEPT);
		counter++;
		b.addState(actualState);
		b.setInitial(actualState);
											
		finalState = new State("q" + counter, StateType.FINAL);
		counter++;
		acceptState = new State("q" + counter, StateType.ACCEPT_ALL);
		counter++;
		b.addTransition(new Transition("disappear(" + "«dm.context.name»" + "." + "«dm.entity.name»" + ")" , actualState, finalState));
		b.addTransition(new Transition("!(" + "disappear(" + "«dm.context.name»" + "." + "«dm.entity.name»" + "))" , actualState, acceptState));
		b.addTransition(new Transition("1", acceptState, acceptState));
		b.addState(acceptState);
		b.addState(finalState);
		b.setFinale(finalState);
	'''
	
	def compile_changeto_strict_required(ChangeToMessage cm)'''
		b = new Automaton("auto9");
		actualState = new State("q" + counter, StateType.ACCEPT);
		counter++;
		b.addState(actualState);
		b.setInitial(actualState);
		
		finalState = new State("q" + counter, StateType.FINAL);
		counter++;
		acceptState = new State("q" + counter, StateType.ACCEPT_ALL);
		counter++;
		b.addTransition(new Transition("changeTo(" + "«cm.context.name»" + "." + "«cm.entity.name»" + "." + "«cm.attribute.name», «cm.changevalue»" + ")" , actualState, finalState));
		b.addTransition(new Transition("!(" + "changeTo(" + "«cm.context.name»" + "." + "«cm.entity.name»" + "." + "«cm.attribute.name», «cm.changevalue»" + "))" , actualState, acceptState));
		b.addTransition(new Transition("1", acceptState, acceptState));
		b.addState(acceptState);
		b.addState(finalState);
		b.setFinale(finalState);
	'''
	
	def compile_changetor_strict_required(ChangeToRelation cm)'''
		b = new Automaton("auto9");
		actualState = new State("q" + counter, StateType.ACCEPT);
		counter++;
		b.addState(actualState);
		b.setInitial(actualState);
		
		finalState = new State("q" + counter, StateType.FINAL);
		counter++;
		acceptState = new State("q" + counter, StateType.ACCEPT_ALL);
		counter++;
		b.addTransition(new Transition("changeTo(" + "«cm.context.name»" + "." + "«cm.relation.name»" + "." + "«cm.attribute.name», «cm.changevalue»" + ")" , actualState, finalState));
		b.addTransition(new Transition("!(" + "changeTo(" + "«cm.context.name»" + "." + "«cm.relation.name»" + "." + "«cm.attribute.name», «cm.changevalue»" + "))" , actualState, acceptState));
		b.addTransition(new Transition("1", acceptState, acceptState));
		b.addState(acceptState);
		b.addState(finalState);
		b.setFinale(finalState);
	'''
	
	def compile_strict_fail(Message m)'''
		b = new Automaton("auto10");
		actualState = new State("q" + counter, StateType.NORMAL);
		counter++;
		b.addState(actualState);
		b.setInitial(actualState);
											
		finalState = new State("q" + counter, StateType.FINAL);
		counter++;
		acceptState = new State("q" + counter, StateType.ACCEPT_ALL);
		counter++;
		b.addTransition(new Transition("!(" + "«m.sender.name»" + "." + "«m.name»" + "." + "«m.receiver.name»" + ")", actualState, finalState));
		b.addTransition(new Transition("«m.sender.name»" + "." + "«m.name»" + "." + "«m.receiver.name»", actualState, acceptState));
		b.addTransition(new Transition("1", acceptState, acceptState));
		b.addState(finalState);
		b.addState(acceptState);
		b.setFinale(finalState);
	'''
	
	def compile_match_strict_fail(MatchMessage ma)'''
		b = new Automaton("auto10");
		actualState = new State("q" + counter, StateType.NORMAL);
		counter++;
		b.addState(actualState);
		b.setInitial(actualState);
											
		finalState = new State("q" + counter, StateType.FINAL);
		counter++;
		acceptState = new State("q" + counter, StateType.ACCEPT_ALL);
		counter++;
		b.addTransition(new Transition("!(" + "match(" + "«ma.context.name»" + ", " + "«ma.content.name»" + "))", actualState, finalState));
		b.addTransition(new Transition("match(" + "«ma.context.name»" + ", " + "«ma.content.name»" + ")", actualState, acceptState));
		b.addTransition(new Transition("1", acceptState, acceptState));
		b.addState(finalState);
		b.addState(acceptState);
		b.setFinale(finalState);
	'''
	
	def compile_appear_strict_fail(AppearMessage am)'''
		b = new Automaton("auto10");
		actualState = new State("q" + counter, StateType.NORMAL);
		counter++;
		b.addState(actualState);
		b.setInitial(actualState);
											
		finalState = new State("q" + counter, StateType.FINAL);
		counter++;
		acceptState = new State("q" + counter, StateType.ACCEPT_ALL);
		counter++;
		b.addTransition(new Transition("!(" + "appear(" + "«am.context.name»" + "." + "«am.entity.name»" + "))", actualState, finalState));
		b.addTransition(new Transition("appear(" + "«am.context.name»" + "." + "«am.entity.name»" + ")", actualState, acceptState));
		b.addTransition(new Transition("1", acceptState, acceptState));
		b.addState(finalState);
		b.addState(acceptState);
		b.setFinale(finalState);
	'''
	
	def compile_disappear_strict_fail(DisappearMessage dm)'''
		b = new Automaton("auto10");
		actualState = new State("q" + counter, StateType.NORMAL);
		counter++;
		b.addState(actualState);
		b.setInitial(actualState);
											
		finalState = new State("q" + counter, StateType.FINAL);
		counter++;
		acceptState = new State("q" + counter, StateType.ACCEPT_ALL);
		counter++;
		b.addTransition(new Transition("!(" + "disappear(" + "«dm.context.name»" + "." + "«dm.entity.name»" + "))", actualState, finalState));
		b.addTransition(new Transition("disappear(" + "«dm.context.name»" + "." + "«dm.entity.name»" + ")", actualState, acceptState));
		b.addTransition(new Transition("1", acceptState, acceptState));
		b.addState(finalState);
		b.addState(acceptState);
		b.setFinale(finalState);
	'''
	
	def compile_changeto_strict_fail(ChangeToMessage cm)'''
		b = new Automaton("auto10");
		actualState = new State("q" + counter, StateType.NORMAL);
		counter++;
		b.addState(actualState);
		b.setInitial(actualState);
		
		finalState = new State("q" + counter, StateType.FINAL);
		counter++;
		acceptState = new State("q" + counter, StateType.ACCEPT_ALL);
		counter++;
		b.addTransition(new Transition("!(" + "changeTo(" + "«cm.context.name»" + "." + "«cm.entity.name»" + "." + "«cm.attribute.name», «cm.changevalue»" + "))", actualState, finalState));
		b.addTransition(new Transition("changeTo(" + "«cm.context.name»" + "." + "«cm.entity.name»" + "." + "«cm.attribute.name», «cm.changevalue»" + ")", actualState, acceptState));
		b.addTransition(new Transition("1", acceptState, acceptState));
		b.addState(finalState);
		b.addState(acceptState);
		b.setFinale(finalState);
	'''
	
	def compile_changetor_strict_fail(ChangeToRelation cm)'''
		b = new Automaton("auto10");
		actualState = new State("q" + counter, StateType.NORMAL);
		counter++;
		b.addState(actualState);
		b.setInitial(actualState);
		
		finalState = new State("q" + counter, StateType.FINAL);
		counter++;
		acceptState = new State("q" + counter, StateType.ACCEPT_ALL);
		counter++;
		b.addTransition(new Transition("!(" + "changeTo(" + "«cm.context.name»" + "." + "«cm.relation.name»" + "." + "«cm.attribute.name», «cm.changevalue»" + "))", actualState, finalState));
		b.addTransition(new Transition("changeTo(" + "«cm.context.name»" + "." + "«cm.relation.name»" + "." + "«cm.attribute.name», «cm.changevalue»" + ")", actualState, acceptState));
		b.addTransition(new Transition("1", acceptState, acceptState));
		b.addState(finalState);
		b.addState(acceptState);
		b.setFinale(finalState);
	'''
	
	def compile_strict_future(Message m)'''
		b = new Automaton("auto11");
		actualState = new State("q" + counter, StateType.NORMAL);
		counter++;
		b.addState(actualState);
		b.setInitial(actualState);
											
		newState = new State("q" + counter, StateType.FINAL);
		counter++;
		b.addTransition(new Transition("«m.sender.name»" + "." + "«m.name»" + "." + "«m.receiver.name»", actualState, newState));
		b.addState(newState);
		b.addTransition(new Transition(str, newState, newState));
		b.setFinale(newState);
	'''
	
	def compile_strict(Message m)'''
		b = new Automaton("auto12");
		actualState = new State("q" + counter, StateType.NORMAL);
		counter++;
		b.addState(actualState);
		b.setInitial(actualState);
												
		newState = new State("q" + counter, StateType.FINAL);
		counter++;
		b.addTransition(new Transition("«m.sender.name»" + "." + "«m.name»" + "." + "«m.receiver.name»", actualState, newState));
		b.addState(newState);
		b.setFinale(newState);
	'''
	
	def compile_match_strict(MatchMessage ma)'''
		b = new Automaton("auto12");
		actualState = new State("q" + counter, StateType.NORMAL);
		counter++;
		b.addState(actualState);
		b.setInitial(actualState);
												
		newState = new State("q" + counter, StateType.FINAL);
		counter++;
		b.addTransition(new Transition("match(" + "«ma.context.name»" + ", " + "«ma.content.name»" + ")", actualState, newState));
		b.addState(newState);
		b.setFinale(newState);
	'''
	
	def compile_appear_strict(AppearMessage am)'''
		b = new Automaton("auto12");
		actualState = new State("q" + counter, StateType.NORMAL);
		counter++;
		b.addState(actualState);
		b.setInitial(actualState);
												
		newState = new State("q" + counter, StateType.FINAL);
		counter++;
		b.addTransition(new Transition("appear" + "(" + "«am.context.name»" + "." + "«am.entity.name»" + ")", actualState, newState));
		b.addState(newState);
		b.setFinale(newState);
	'''
	
	def compile_disappear_strict(DisappearMessage dm)'''
		b = new Automaton("auto12");
		actualState = new State("q" + counter, StateType.NORMAL);
		counter++;
		b.addState(actualState);
		b.setInitial(actualState);
												
		newState = new State("q" + counter, StateType.FINAL);
		counter++;
		b.addTransition(new Transition("disappear" + "(" + "«dm.context.name»" + "." + "«dm.entity.name»" + ")", actualState, newState));
		b.addState(newState);
		b.setFinale(newState);
	'''
	
	def compile_changeto_strict(ChangeToMessage cm)'''
		b = new Automaton("auto12");
		actualState = new State("q" + counter, StateType.NORMAL);
		counter++;
		b.addState(actualState);
		b.setInitial(actualState);
		
		newState = new State("q" + counter, StateType.FINAL);
		counter++;
		b.addTransition(new Transition("changeTo(" + "«cm.context.name»" + "." + "«cm.entity.name»" + "." + "«cm.attribute.name», «cm.changevalue»" + ")", actualState, newState));
		b.addState(newState);
		b.setFinale(newState);
	'''
	
	def compile_changetor_strict(ChangeToRelation cm)'''
		b = new Automaton("auto12");
		actualState = new State("q" + counter, StateType.NORMAL);
		counter++;
		b.addState(actualState);
		b.setInitial(actualState);
		
		newState = new State("q" + counter, StateType.FINAL);
		counter++;
		b.addTransition(new Transition("changeTo(" + "«cm.context.name»" + "." + "«cm.relation.name»" + "." + "«cm.attribute.name», «cm.changevalue»" + ")", actualState, newState));
		b.addState(newState);
		b.setFinale(newState);
	'''
}
