package org.xtext.example.mydsl.generator;

import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;

@SuppressWarnings("all")
public class AutomatonGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource input, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.Map;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Automaton {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private String id;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private ArrayList<State> states;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private ArrayList<Transition> transitions;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private State initial;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private State finale;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Automaton(String id) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.id = id;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.states = new ArrayList<>();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.transitions = new ArrayList<>();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setFinale(State state){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.finale = state;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public State getFinale(){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this.finale;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setInitial(State state){");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("this.initial = state;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public State getInitial(){");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return this.initial;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}\t");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public ArrayList<State> getStates(){");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return states;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public ArrayList<Transition> getTransitions(){");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return transitions;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String getId() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return id;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setId(String id) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.id = id;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void addState(State newState){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("states.add(newState);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void rename(){");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("int counter = 0;");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("int _counter = 0;");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("for(State s : this.states) {");
    _builder.newLine();
    _builder.append("       \t");
    _builder.append("if(s.getId().equals(\"qinit\") || s.getId().equals(\"qfinal\") || s.getId().equals(\"qaccepting\")){");
    _builder.newLine();
    _builder.append("       \t\t");
    _builder.append("s.setId(s.getId() + _counter);");
    _builder.newLine();
    _builder.append("       \t\t");
    _builder.append("_counter++;");
    _builder.newLine();
    _builder.append("       \t");
    _builder.append("}else{");
    _builder.newLine();
    _builder.append("         \t");
    _builder.append("s.setId(\"q\" + counter);");
    _builder.newLine();
    _builder.append("         \t");
    _builder.append("counter++;");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("}  ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public ArrayList<Transition> findSender(State state){");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("ArrayList<Transition> senderTransitions = new ArrayList<Transition>();");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("for(Transition t : this.transitions){");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("if(t.getSender().getId().equals(state.getId()))");
    _builder.newLine();
    _builder.append("    \t\t\t");
    _builder.append("senderTransitions.add(t);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("}\t");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return senderTransitions;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public ArrayList<Transition> findReceiver(State state){");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("ArrayList<Transition> receiverTransitions = new ArrayList<Transition>();");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("for(Transition t : this.transitions){");
    _builder.newLine();
    _builder.append("       \t ");
    _builder.append("if(t.getReceiver().getId().equals(state.getId()))");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("receiverTransitions.add(t);");
    _builder.newLine();
    _builder.append("         ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("       ");
    _builder.append("return receiverTransitions;");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("     \t\t\t");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void addTransition(Transition newTransition){");
    _builder.newLine();
    _builder.append("   \t\t");
    _builder.append("if(transitions.isEmpty()){");
    _builder.newLine();
    _builder.append("   \t\t\t");
    _builder.append("transitions.add(newTransition);");
    _builder.newLine();
    _builder.append("   \t\t    ");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("   \t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("   \t\t        ");
    _builder.newLine();
    _builder.append("   \t\t");
    _builder.append("for(Transition t : transitions){");
    _builder.newLine();
    _builder.append("   \t\t\t");
    _builder.append("if(t.getId().equals(newTransition.getId()) ");
    _builder.newLine();
    _builder.append("   \t\t    \t");
    _builder.append("&& t.getSender().equals(newTransition.getSender()) ");
    _builder.newLine();
    _builder.append("   \t\t        ");
    _builder.append("&& t.getReceiver().equals(newTransition.getReceiver()))");
    _builder.newLine();
    _builder.append("   \t\t        \t");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("   \t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("   \t\t        ");
    _builder.newLine();
    _builder.append("   \t\t");
    _builder.append("transitions.add(newTransition);");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("   ");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("public void collapse(Automaton automaton){");
    _builder.newLine();
    _builder.append("           ");
    _builder.append("if(this.states.isEmpty() && this.transitions.isEmpty()){");
    _builder.newLine();
    _builder.append("               ");
    _builder.append("for (State s : automaton.states)");
    _builder.newLine();
    _builder.append("                   ");
    _builder.append("this.addState(s);");
    _builder.newLine();
    _builder.append("               ");
    _builder.newLine();
    _builder.append("   ");
    _builder.newLine();
    _builder.append("               ");
    _builder.append("for (Transition t : automaton.transitions)");
    _builder.newLine();
    _builder.append("                   ");
    _builder.append("this.addTransition(t);");
    _builder.newLine();
    _builder.append("                   ");
    _builder.newLine();
    _builder.append("               ");
    _builder.append("this.initial = automaton.initial;");
    _builder.newLine();
    _builder.append("               ");
    _builder.append("this.finale = automaton.finale;");
    _builder.newLine();
    _builder.append("               ");
    _builder.newLine();
    _builder.append("           ");
    _builder.append("}else {");
    _builder.newLine();
    _builder.append("               ");
    _builder.append("ArrayList<Transition> receive = findReceiver(this.finale);");
    _builder.newLine();
    _builder.append("               ");
    _builder.append("ArrayList<Transition> send = findSender(this.finale);");
    _builder.newLine();
    _builder.append("   ");
    _builder.newLine();
    _builder.append("               ");
    _builder.append("for (State s : automaton.states) ");
    _builder.newLine();
    _builder.append("                   ");
    _builder.append("this.addState(s);");
    _builder.newLine();
    _builder.append("               ");
    _builder.newLine();
    _builder.append("   ");
    _builder.newLine();
    _builder.append("               ");
    _builder.append("for (Transition t : automaton.transitions) ");
    _builder.newLine();
    _builder.append("                   ");
    _builder.append("this.addTransition(t);");
    _builder.newLine();
    _builder.append("               ");
    _builder.newLine();
    _builder.append("   ");
    _builder.newLine();
    _builder.append("               ");
    _builder.append("for (Transition t : receive) ");
    _builder.newLine();
    _builder.append("                   ");
    _builder.append("t.setReceiver(automaton.initial);");
    _builder.newLine();
    _builder.append("               ");
    _builder.newLine();
    _builder.append("   ");
    _builder.newLine();
    _builder.append("               ");
    _builder.append("for (Transition t : send) ");
    _builder.newLine();
    _builder.append("                   ");
    _builder.append("t.setSender(automaton.initial);");
    _builder.newLine();
    _builder.append("               ");
    _builder.newLine();
    _builder.append("   ");
    _builder.newLine();
    _builder.append("               ");
    _builder.append("this.states.remove(finale);");
    _builder.newLine();
    _builder.append("               ");
    _builder.append("this.finale = automaton.finale;");
    _builder.newLine();
    _builder.append("           ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("public void merge(Map<String, Automaton> automatas){");
    _builder.newLine();
    _builder.append("      ");
    _builder.newLine();
    _builder.append("\t\t              ");
    _builder.append("State qinit = new State(\"qinit\", StateType.NORMAL);");
    _builder.newLine();
    _builder.append("\t\t              ");
    _builder.append("State qfinal = new State(\"qfinal\", StateType.FINAL);");
    _builder.newLine();
    _builder.append("\t\t              ");
    _builder.newLine();
    _builder.append("\t\t              ");
    _builder.append("if(this.states.isEmpty() && this.transitions.isEmpty()){");
    _builder.newLine();
    _builder.append("\t\t                  ");
    _builder.append("this.initial = qinit;");
    _builder.newLine();
    _builder.append("\t\t              ");
    _builder.append("}else{");
    _builder.newLine();
    _builder.append("\t\t                  ");
    _builder.append("this.addTransition(new Transition(\"epsilon\", this.finale, qinit));");
    _builder.newLine();
    _builder.append("\t\t              ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t      ");
    _builder.newLine();
    _builder.append("\t\t              ");
    _builder.append("this.addState(qinit);");
    _builder.newLine();
    _builder.append("\t\t              ");
    _builder.append("this.addState(qfinal);");
    _builder.newLine();
    _builder.append("\t\t              ");
    _builder.append("this.finale = qfinal;");
    _builder.newLine();
    _builder.append("\t\t              ");
    _builder.newLine();
    _builder.append("\t\t              ");
    _builder.append("State qaccepting = new State(\"qaccepting\", StateType.ACCEPT_ALL);");
    _builder.newLine();
    _builder.append("\t\t              ");
    _builder.append("this.addState(qaccepting);");
    _builder.newLine();
    _builder.append("\t\t      ");
    _builder.newLine();
    _builder.append("\t\t              ");
    _builder.append("for (Map.Entry<String, Automaton> a : automatas.entrySet()) {");
    _builder.newLine();
    _builder.append("\t\t                  ");
    _builder.append("for (Transition t : a.getValue().transitions)");
    _builder.newLine();
    _builder.append("\t\t                      ");
    _builder.append("this.addTransition(t);");
    _builder.newLine();
    _builder.append("\t\t   ");
    _builder.newLine();
    _builder.append("\t\t                  ");
    _builder.append("for (State s : a.getValue().states) {");
    _builder.newLine();
    _builder.append("\t\t                      ");
    _builder.append("this.addState(s);");
    _builder.newLine();
    _builder.append("\t\t                      ");
    _builder.append("if (s.getType().equals(StateType.FINAL))");
    _builder.newLine();
    _builder.append("\t\t                          ");
    _builder.append("this.addTransition(new Transition(\"epsilon\", s, qfinal));");
    _builder.newLine();
    _builder.append("\t\t                      ");
    _builder.append("if (s.getType().equals(StateType.ACCEPT_ALL))");
    _builder.newLine();
    _builder.append("\t\t                          ");
    _builder.append("this.addTransition(new Transition(\"epsilon\", s, qaccepting));");
    _builder.newLine();
    _builder.append("\t\t                  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t                  ");
    _builder.append("this.addTransition(new Transition(\"epsilon; \" + a.getKey(), qinit, a.getValue().initial));");
    _builder.newLine();
    _builder.append("\t\t              ");
    _builder.append("}   ");
    _builder.newLine();
    _builder.append("\t\t       \t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    fsa.generateFile("Automaton.java", _builder);
  }
}
