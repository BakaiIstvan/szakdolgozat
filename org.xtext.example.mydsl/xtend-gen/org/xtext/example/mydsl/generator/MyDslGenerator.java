/**
 * generated by Xtext 2.16.0
 */
package org.xtext.example.mydsl.generator;

import com.google.common.collect.Iterables;
import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.xbase.lib.ExclusiveRange;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.example.mydsl.generator.AppearMessages;
import org.xtext.example.mydsl.generator.AutomatonGenerator;
import org.xtext.example.mydsl.generator.ChangeToMessages;
import org.xtext.example.mydsl.generator.ContextFragmentGenerator;
import org.xtext.example.mydsl.generator.ContextModelGenerator;
import org.xtext.example.mydsl.generator.DisappearMessages;
import org.xtext.example.mydsl.generator.EntityGenerator;
import org.xtext.example.mydsl.generator.EventCreatorGenerator;
import org.xtext.example.mydsl.generator.FailMessage;
import org.xtext.example.mydsl.generator.MatchMessages;
import org.xtext.example.mydsl.generator.RegularMessage;
import org.xtext.example.mydsl.generator.RelationGenerator;
import org.xtext.example.mydsl.generator.RequiredMessage;
import org.xtext.example.mydsl.generator.StateGenerator;
import org.xtext.example.mydsl.generator.TransitionGenerator;
import org.xtext.example.mydsl.myDsl.Alt;
import org.xtext.example.mydsl.myDsl.AppearMessage;
import org.xtext.example.mydsl.myDsl.ChangeMessage;
import org.xtext.example.mydsl.myDsl.ChangeToMessage;
import org.xtext.example.mydsl.myDsl.ChangeToRelation;
import org.xtext.example.mydsl.myDsl.ConstantParams;
import org.xtext.example.mydsl.myDsl.ContextMessage;
import org.xtext.example.mydsl.myDsl.ContextMessageContent;
import org.xtext.example.mydsl.myDsl.DisappearMessage;
import org.xtext.example.mydsl.myDsl.Domain;
import org.xtext.example.mydsl.myDsl.Expression;
import org.xtext.example.mydsl.myDsl.Loop;
import org.xtext.example.mydsl.myDsl.MatchMessage;
import org.xtext.example.mydsl.myDsl.Message;
import org.xtext.example.mydsl.myDsl.Par;
import org.xtext.example.mydsl.myDsl.ParExpression;
import org.xtext.example.mydsl.myDsl.Params;
import org.xtext.example.mydsl.myDsl.Scenario;
import org.xtext.example.mydsl.myDsl.ScenarioContent;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  @Inject
  private ContextModelGenerator contextModelGenerator;
  
  @Inject
  private ContextFragmentGenerator contextFragmentGenerator;
  
  @Inject
  private EntityGenerator entityGenerator;
  
  @Inject
  private RelationGenerator relationGenerator;
  
  @Inject
  private EventCreatorGenerator eventCreatorGenerator;
  
  @Inject
  private StateGenerator stateGenerator;
  
  @Inject
  private TransitionGenerator transitionGenerator;
  
  @Inject
  private AutomatonGenerator automatonGenerator;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    this.contextModelGenerator.doGenerate(resource, fsa, context);
    this.contextFragmentGenerator.doGenerate(resource, fsa, context);
    this.entityGenerator.doGenerate(resource, fsa, context);
    this.relationGenerator.doGenerate(resource, fsa, context);
    this.eventCreatorGenerator.doGenerate(resource, fsa, context);
    this.stateGenerator.doGenerate(resource, fsa, context);
    this.transitionGenerator.doGenerate(resource, fsa, context);
    this.automatonGenerator.doGenerate(resource, fsa, context);
    Iterable<Domain> _filter = Iterables.<Domain>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Domain.class);
    for (final Domain s : _filter) {
      fsa.generateFile("Specification.java", this.compile(s));
    }
  }
  
  public CharSequence compile(final Domain s) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.io.FileNotFoundException;");
    _builder.newLine();
    _builder.append("import java.io.PrintWriter;");
    _builder.newLine();
    _builder.append("import java.io.UnsupportedEncodingException;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Specification{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String id = \"");
    String _name = s.getName();
    _builder.append(_name, "\t");
    _builder.append("\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("private ArrayList<Automaton> automatas;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Specification(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("automatas = new ArrayList<Automaton>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String str;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("State actualState;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("State acceptState;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("State finalState;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("State newState;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("State acceptState_new;");
    _builder.newLine();
    {
      EList<Scenario> _scenarios = s.getScenarios();
      for(final Scenario scenario : _scenarios) {
        _builder.append("\t\t");
        _builder.append("Automaton a = new Automaton(\"");
        String _name_1 = scenario.getName();
        _builder.append(_name_1, "\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("Automaton b;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("ArrayList<Automaton> altauto;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("ArrayList<Automaton> parauto;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("Automaton loopauto;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("Automaton expression;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("int counter = 0;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.newLine();
        {
          EList<ScenarioContent> _scenariocontents = scenario.getScenariocontents();
          for(final ScenarioContent sc : _scenariocontents) {
            {
              EList<ContextMessage> _contextmessage = sc.getContextmessage();
              for(final ContextMessage cm : _contextmessage) {
                {
                  boolean _isStrict = cm.isStrict();
                  if (_isStrict) {
                    {
                      boolean _isRequired = cm.isRequired();
                      if (_isRequired) {
                        {
                          EList<ContextMessageContent> _content = cm.getContent();
                          for(final ContextMessageContent co : _content) {
                            {
                              EList<MatchMessage> _match = co.getMatch();
                              for(final MatchMessage ma : _match) {
                                _builder.append("\t\t");
                                CharSequence _compile_match_strict_required = new MatchMessages().compile_match_strict_required(ma);
                                _builder.append(_compile_match_strict_required, "\t\t");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t\t");
                                _builder.append("a.collapse(b);");
                                _builder.newLine();
                              }
                            }
                            {
                              EList<ChangeMessage> _change = co.getChange();
                              for(final ChangeMessage ca : _change) {
                                {
                                  EList<AppearMessage> _appear = ca.getAppear();
                                  for(final AppearMessage a : _appear) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_appear_strict_required = new AppearMessages().compile_appear_strict_required(a);
                                    _builder.append(_compile_appear_strict_required, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("a.collapse(b);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
                                    _builder.newLine();
                                  }
                                }
                                {
                                  EList<DisappearMessage> _disappear = ca.getDisappear();
                                  for(final DisappearMessage d : _disappear) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_disappear_strict_required = new DisappearMessages().compile_disappear_strict_required(d);
                                    _builder.append(_compile_disappear_strict_required, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("a.collapse(b);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
                                    _builder.newLine();
                                  }
                                }
                                {
                                  EList<ChangeToMessage> _changeto = ca.getChangeto();
                                  for(final ChangeToMessage t : _changeto) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_changeto_strict_required = new ChangeToMessages().compile_changeto_strict_required(t);
                                    _builder.append(_compile_changeto_strict_required, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("a.collapse(b);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
                                    _builder.newLine();
                                  }
                                }
                                {
                                  EList<ChangeToRelation> _changetor = ca.getChangetor();
                                  for(final ChangeToRelation t_1 : _changetor) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_changetor_strict_required = new ChangeToMessages().compile_changetor_strict_required(t_1);
                                    _builder.append(_compile_changetor_strict_required, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("a.collapse(b);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
                                    _builder.newLine();
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    {
                      boolean _isFail = cm.isFail();
                      if (_isFail) {
                        {
                          EList<ContextMessageContent> _content_1 = cm.getContent();
                          for(final ContextMessageContent co_1 : _content_1) {
                            {
                              EList<MatchMessage> _match_1 = co_1.getMatch();
                              for(final MatchMessage ma_1 : _match_1) {
                                _builder.append("\t\t");
                                CharSequence _compile_match_strict_fail = new MatchMessages().compile_match_strict_fail(ma_1);
                                _builder.append(_compile_match_strict_fail, "\t\t");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t\t");
                                _builder.append("a.collapse(b);\t\t\t\t\t\t\t\t\t\t");
                                _builder.newLine();
                              }
                            }
                            {
                              EList<ChangeMessage> _change_1 = co_1.getChange();
                              for(final ChangeMessage ca_1 : _change_1) {
                                {
                                  EList<AppearMessage> _appear_1 = ca_1.getAppear();
                                  for(final AppearMessage a_1 : _appear_1) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_appear_strict_fail = new AppearMessages().compile_appear_strict_fail(a_1);
                                    _builder.append(_compile_appear_strict_fail, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("a.collapse(b);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
                                    _builder.newLine();
                                  }
                                }
                                {
                                  EList<DisappearMessage> _disappear_1 = ca_1.getDisappear();
                                  for(final DisappearMessage d_1 : _disappear_1) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_disappear_strict_fail = new DisappearMessages().compile_disappear_strict_fail(d_1);
                                    _builder.append(_compile_disappear_strict_fail, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("a.collapse(b);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
                                    _builder.newLine();
                                  }
                                }
                                {
                                  EList<ChangeToMessage> _changeto_1 = ca_1.getChangeto();
                                  for(final ChangeToMessage t_2 : _changeto_1) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_changeto_strict_fail = new ChangeToMessages().compile_changeto_strict_fail(t_2);
                                    _builder.append(_compile_changeto_strict_fail, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("a.collapse(b);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
                                    _builder.newLine();
                                  }
                                }
                                {
                                  EList<ChangeToRelation> _changetor_1 = ca_1.getChangetor();
                                  for(final ChangeToRelation t_3 : _changetor_1) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_changetor_strict_fail = new ChangeToMessages().compile_changetor_strict_fail(t_3);
                                    _builder.append(_compile_changetor_strict_fail, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("a.collapse(b);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
                                    _builder.newLine();
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    {
                      if (((!cm.isRequired()) && (!cm.isFail()))) {
                        {
                          EList<ContextMessageContent> _content_2 = cm.getContent();
                          for(final ContextMessageContent co_2 : _content_2) {
                            {
                              EList<MatchMessage> _match_2 = co_2.getMatch();
                              for(final MatchMessage ma_2 : _match_2) {
                                _builder.append("\t\t");
                                CharSequence _compile_match_strict = new MatchMessages().compile_match_strict(ma_2);
                                _builder.append(_compile_match_strict, "\t\t");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t\t");
                                _builder.append("a.collapse(b);");
                                _builder.newLine();
                              }
                            }
                            {
                              EList<ChangeMessage> _change_2 = co_2.getChange();
                              for(final ChangeMessage ca_2 : _change_2) {
                                {
                                  EList<AppearMessage> _appear_2 = ca_2.getAppear();
                                  for(final AppearMessage a_2 : _appear_2) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_appear_strict = new AppearMessages().compile_appear_strict(a_2);
                                    _builder.append(_compile_appear_strict, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("a.collapse(b);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
                                    _builder.newLine();
                                  }
                                }
                                {
                                  EList<DisappearMessage> _disappear_2 = ca_2.getDisappear();
                                  for(final DisappearMessage d_2 : _disappear_2) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_disappear_strict = new DisappearMessages().compile_disappear_strict(d_2);
                                    _builder.append(_compile_disappear_strict, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("a.collapse(b);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
                                    _builder.newLine();
                                  }
                                }
                                {
                                  EList<ChangeToMessage> _changeto_2 = ca_2.getChangeto();
                                  for(final ChangeToMessage t_4 : _changeto_2) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_changeto_strict = new ChangeToMessages().compile_changeto_strict(t_4);
                                    _builder.append(_compile_changeto_strict, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("a.collapse(b);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
                                    _builder.newLine();
                                  }
                                }
                                {
                                  EList<ChangeToRelation> _changetor_2 = ca_2.getChangetor();
                                  for(final ChangeToRelation t_5 : _changetor_2) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_changetor_strict = new ChangeToMessages().compile_changetor_strict(t_5);
                                    _builder.append(_compile_changetor_strict, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("a.collapse(b);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
                                    _builder.newLine();
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                _builder.append("\t\t");
                _builder.newLine();
                {
                  boolean _isStrict_1 = cm.isStrict();
                  boolean _not = (!_isStrict_1);
                  if (_not) {
                    {
                      boolean _isRequired_1 = cm.isRequired();
                      if (_isRequired_1) {
                        {
                          EList<ContextMessageContent> _content_3 = cm.getContent();
                          for(final ContextMessageContent co_3 : _content_3) {
                            {
                              EList<MatchMessage> _match_3 = co_3.getMatch();
                              for(final MatchMessage ma_3 : _match_3) {
                                _builder.append("\t\t");
                                CharSequence _compile_match_required = new MatchMessages().compile_match_required(ma_3);
                                _builder.append(_compile_match_required, "\t\t");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t\t");
                                _builder.append("a.collapse(b);");
                                _builder.newLine();
                              }
                            }
                            {
                              EList<ChangeMessage> _change_3 = co_3.getChange();
                              for(final ChangeMessage ca_3 : _change_3) {
                                {
                                  EList<AppearMessage> _appear_3 = ca_3.getAppear();
                                  for(final AppearMessage a_3 : _appear_3) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_appear_required = new AppearMessages().compile_appear_required(a_3);
                                    _builder.append(_compile_appear_required, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("a.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                                {
                                  EList<DisappearMessage> _disappear_3 = ca_3.getDisappear();
                                  for(final DisappearMessage d_3 : _disappear_3) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_disappear_required = new DisappearMessages().compile_disappear_required(d_3);
                                    _builder.append(_compile_disappear_required, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("a.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                                {
                                  EList<ChangeToMessage> _changeto_3 = ca_3.getChangeto();
                                  for(final ChangeToMessage t_6 : _changeto_3) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_changeto_required = new ChangeToMessages().compile_changeto_required(t_6);
                                    _builder.append(_compile_changeto_required, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("a.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                                {
                                  EList<ChangeToRelation> _changetor_3 = ca_3.getChangetor();
                                  for(final ChangeToRelation t_7 : _changetor_3) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_changetor_required = new ChangeToMessages().compile_changetor_required(t_7);
                                    _builder.append(_compile_changetor_required, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("a.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    {
                      boolean _isFail_1 = cm.isFail();
                      if (_isFail_1) {
                        {
                          EList<ContextMessageContent> _content_4 = cm.getContent();
                          for(final ContextMessageContent co_4 : _content_4) {
                            {
                              EList<MatchMessage> _match_4 = co_4.getMatch();
                              for(final MatchMessage ma_4 : _match_4) {
                                _builder.append("\t\t");
                                CharSequence _compile_match_fail = new MatchMessages().compile_match_fail(ma_4);
                                _builder.append(_compile_match_fail, "\t\t");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t\t");
                                _builder.append("a.collapse(b);\t\t\t\t\t\t\t\t\t");
                                _builder.newLine();
                              }
                            }
                            {
                              EList<ChangeMessage> _change_4 = co_4.getChange();
                              for(final ChangeMessage ca_4 : _change_4) {
                                {
                                  EList<AppearMessage> _appear_4 = ca_4.getAppear();
                                  for(final AppearMessage a_4 : _appear_4) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_appear_fail = new AppearMessages().compile_appear_fail(a_4);
                                    _builder.append(_compile_appear_fail, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("a.collapse(b);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
                                    _builder.newLine();
                                  }
                                }
                                {
                                  EList<DisappearMessage> _disappear_4 = ca_4.getDisappear();
                                  for(final DisappearMessage d_4 : _disappear_4) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_disappear_fail = new DisappearMessages().compile_disappear_fail(d_4);
                                    _builder.append(_compile_disappear_fail, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("a.collapse(b);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
                                    _builder.newLine();
                                  }
                                }
                                {
                                  EList<ChangeToMessage> _changeto_4 = ca_4.getChangeto();
                                  for(final ChangeToMessage t_8 : _changeto_4) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_changeto_fail = new ChangeToMessages().compile_changeto_fail(t_8);
                                    _builder.append(_compile_changeto_fail, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("a.collapse(b);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
                                    _builder.newLine();
                                  }
                                }
                                {
                                  EList<ChangeToRelation> _changetor_4 = ca_4.getChangetor();
                                  for(final ChangeToRelation t_9 : _changetor_4) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_changetor_fail = new ChangeToMessages().compile_changetor_fail(t_9);
                                    _builder.append(_compile_changetor_fail, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("a.collapse(b);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
                                    _builder.newLine();
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    {
                      if (((!cm.isRequired()) && (!cm.isFail()))) {
                        {
                          EList<ContextMessageContent> _content_5 = cm.getContent();
                          for(final ContextMessageContent co_5 : _content_5) {
                            {
                              EList<MatchMessage> _match_5 = co_5.getMatch();
                              for(final MatchMessage ma_5 : _match_5) {
                                _builder.append("\t\t");
                                CharSequence _compile_match_msg = new MatchMessages().compile_match_msg(ma_5);
                                _builder.append(_compile_match_msg, "\t\t");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t\t");
                                _builder.append("a.collapse(b);\t\t\t\t\t\t\t");
                                _builder.newLine();
                              }
                            }
                            {
                              EList<ChangeMessage> _change_5 = co_5.getChange();
                              for(final ChangeMessage ca_5 : _change_5) {
                                {
                                  EList<AppearMessage> _appear_5 = ca_5.getAppear();
                                  for(final AppearMessage a_5 : _appear_5) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_appear_msg = new AppearMessages().compile_appear_msg(a_5);
                                    _builder.append(_compile_appear_msg, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("a.collapse(b);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
                                    _builder.newLine();
                                  }
                                }
                                {
                                  EList<DisappearMessage> _disappear_5 = ca_5.getDisappear();
                                  for(final DisappearMessage d_5 : _disappear_5) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_disappear_msg = new DisappearMessages().compile_disappear_msg(d_5);
                                    _builder.append(_compile_disappear_msg, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("a.collapse(b);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
                                    _builder.newLine();
                                  }
                                }
                                {
                                  EList<ChangeToMessage> _changeto_5 = ca_5.getChangeto();
                                  for(final ChangeToMessage t_10 : _changeto_5) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_changeto_msg = new ChangeToMessages().compile_changeto_msg(t_10);
                                    _builder.append(_compile_changeto_msg, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("a.collapse(b);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
                                    _builder.newLine();
                                  }
                                }
                                {
                                  EList<ChangeToRelation> _changetor_5 = ca_5.getChangetor();
                                  for(final ChangeToRelation t_11 : _changetor_5) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_changetor_msg = new ChangeToMessages().compile_changetor_msg(t_11);
                                    _builder.append(_compile_changetor_msg, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("a.collapse(b);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
                                    _builder.newLine();
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            {
              EList<Loop> _loop = sc.getLoop();
              for(final Loop l : _loop) {
                _builder.append("\t\t");
                _builder.append("loopauto = new Automaton(\"loopauto\" + counter);");
                _builder.newLine();
                {
                  EList<Message> _messages = l.getMessages();
                  for(final Message m : _messages) {
                    {
                      boolean _isConstraint = m.isConstraint();
                      if (_isConstraint) {
                        _builder.append("\t\t");
                        _builder.append("str = \"\" ");
                        _builder.newLine();
                        {
                          EList<Message> _messages_1 = m.getC().getMessages();
                          for(final Message msg : _messages_1) {
                            _builder.append("\t\t");
                            _builder.append("+ \"!(\" + \"");
                            String _name_2 = msg.getSender().getName();
                            _builder.append(_name_2, "\t\t");
                            _builder.append("\" + \".\" +");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t\t");
                            _builder.append("\"");
                            String _name_3 = msg.getName();
                            _builder.append(_name_3, "\t\t");
                            _builder.append("\" + \"(\" ");
                            _builder.newLineIfNotEmpty();
                            {
                              EList<Params> _params = msg.getParams();
                              for(final Params p : _params) {
                                {
                                  int _size = p.getParams().size();
                                  ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, _size, true);
                                  for(final Integer param : _doubleDotLessThan) {
                                    _builder.append("\t\t");
                                    _builder.append("+");
                                    _builder.newLine();
                                    {
                                      boolean _startsWith = p.getParams().get((param).intValue()).getValue().getValue().startsWith("\"");
                                      if (_startsWith) {
                                        _builder.append("\t\t");
                                        String _value = p.getParams().get((param).intValue()).getValue().getValue();
                                        _builder.append(_value, "\t\t");
                                        _builder.newLineIfNotEmpty();
                                      } else {
                                        _builder.append("\t\t");
                                        _builder.append("\"");
                                        String _value_1 = p.getParams().get((param).intValue()).getValue().getValue();
                                        _builder.append(_value_1, "\t\t");
                                        _builder.append("\"");
                                        _builder.newLineIfNotEmpty();
                                      }
                                    }
                                    {
                                      int _size_1 = p.getParams().size();
                                      int _minus = (_size_1 - 1);
                                      boolean _notEquals = ((param).intValue() != _minus);
                                      if (_notEquals) {
                                        _builder.append("\t\t");
                                        _builder.append("+ \", \"");
                                        _builder.newLine();
                                      }
                                    }
                                  }
                                }
                              }
                            }
                            {
                              EList<ConstantParams> _constantparams = msg.getConstantparams();
                              for(final ConstantParams p_1 : _constantparams) {
                                {
                                  int _size_2 = p_1.getValues().size();
                                  ExclusiveRange _doubleDotLessThan_1 = new ExclusiveRange(0, _size_2, true);
                                  for(final Integer param_1 : _doubleDotLessThan_1) {
                                    _builder.append("\t\t");
                                    _builder.append("+");
                                    _builder.newLine();
                                    {
                                      boolean _startsWith_1 = p_1.getValues().get((param_1).intValue()).getValue().startsWith("\"");
                                      if (_startsWith_1) {
                                        _builder.append("\t\t");
                                        String _value_2 = p_1.getValues().get((param_1).intValue()).getValue();
                                        _builder.append(_value_2, "\t\t");
                                        _builder.newLineIfNotEmpty();
                                      } else {
                                        _builder.append("\t\t");
                                        _builder.append("\"");
                                        String _value_3 = p_1.getValues().get((param_1).intValue()).getValue();
                                        _builder.append(_value_3, "\t\t");
                                        _builder.append("\"");
                                        _builder.newLineIfNotEmpty();
                                      }
                                    }
                                    {
                                      int _size_3 = p_1.getValues().size();
                                      int _minus_1 = (_size_3 - 1);
                                      boolean _notEquals_1 = ((param_1).intValue() != _minus_1);
                                      if (_notEquals_1) {
                                        _builder.append("\t\t");
                                        _builder.append("+ \", \" ");
                                        _builder.newLine();
                                      }
                                    }
                                  }
                                }
                              }
                            }
                            _builder.append("\t\t");
                            _builder.append("+ \")\"");
                            _builder.newLine();
                            _builder.append("\t\t");
                            _builder.append("+ \".\" + \"");
                            String _name_4 = msg.getReceiver().getName();
                            _builder.append(_name_4, "\t\t");
                            _builder.append(")\" + \" & \"");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t\t\t\t\t\t\t\t\t");
                          }
                        }
                        _builder.append(";");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t");
                        _builder.append("str= str.substring(0, str.length() - 3);");
                        _builder.newLine();
                      }
                    }
                    {
                      boolean _isStrict_2 = m.isStrict();
                      boolean _not_1 = (!_isStrict_2);
                      if (_not_1) {
                        {
                          boolean _isRequired_2 = m.isRequired();
                          if (_isRequired_2) {
                            {
                              boolean _isFuture = m.isFuture();
                              if (_isFuture) {
                                _builder.append("\t\t");
                                CharSequence _compile_required_future = new RequiredMessage().compile_required_future(m);
                                _builder.append(_compile_required_future, "\t\t");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t\t");
                                _builder.append("loopauto.collapse(b);");
                                _builder.newLine();
                              }
                            }
                            {
                              boolean _isPast = m.isPast();
                              if (_isPast) {
                                _builder.append("\t\t");
                                CharSequence _compile_required_past = new RequiredMessage().compile_required_past(m);
                                _builder.append(_compile_required_past, "\t\t");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t\t");
                                _builder.append("loopauto.collapse(b);");
                                _builder.newLine();
                              }
                            }
                            {
                              if (((!m.isPast()) && (!m.isFuture()))) {
                                _builder.append("\t\t");
                                CharSequence _compile_required = new RequiredMessage().compile_required(m);
                                _builder.append(_compile_required, "\t\t");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t\t");
                                _builder.append("loopauto.collapse(b);");
                                _builder.newLine();
                              }
                            }
                          }
                        }
                        {
                          boolean _isFail_2 = m.isFail();
                          if (_isFail_2) {
                            {
                              boolean _isPast_1 = m.isPast();
                              if (_isPast_1) {
                                _builder.append("\t\t");
                                CharSequence _compile_fail_past = new FailMessage().compile_fail_past(m);
                                _builder.append(_compile_fail_past, "\t\t");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t\t");
                                _builder.append("loopauto.collapse(b);");
                                _builder.newLine();
                              }
                            }
                            {
                              if (((!m.isPast()) && (!m.isFuture()))) {
                                _builder.append("\t\t");
                                CharSequence _compile_fail = new FailMessage().compile_fail(m);
                                _builder.append(_compile_fail, "\t\t");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t\t");
                                _builder.append("loopauto.collapse(b);");
                                _builder.newLine();
                              }
                            }
                          }
                        }
                        {
                          if (((!m.isFail()) && (!m.isRequired()))) {
                            {
                              boolean _isFuture_1 = m.isFuture();
                              if (_isFuture_1) {
                                _builder.append("\t\t");
                                CharSequence _compile_future = new RegularMessage().compile_future(m);
                                _builder.append(_compile_future, "\t\t");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t\t");
                                _builder.append("loopauto.collapse(b);");
                                _builder.newLine();
                              }
                            }
                            {
                              boolean _isPast_2 = m.isPast();
                              if (_isPast_2) {
                                _builder.append("\t\t");
                                CharSequence _compile_past = new RegularMessage().compile_past(m);
                                _builder.append(_compile_past, "\t\t");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t\t");
                                _builder.append("loopauto.collapse(b);");
                                _builder.newLine();
                              }
                            }
                            {
                              if (((!m.isPast()) && (!m.isFuture()))) {
                                _builder.append("\t\t");
                                CharSequence _compile_msg = new RegularMessage().compile_msg(m);
                                _builder.append(_compile_msg, "\t\t");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t\t");
                                _builder.append("loopauto.collapse(b);");
                                _builder.newLine();
                              }
                            }
                          }
                        }
                      }
                    }
                    _builder.append("\t\t");
                    _builder.newLine();
                    {
                      boolean _isStrict_3 = m.isStrict();
                      if (_isStrict_3) {
                        {
                          boolean _isRequired_3 = m.isRequired();
                          if (_isRequired_3) {
                            {
                              boolean _isFuture_2 = m.isFuture();
                              if (_isFuture_2) {
                                _builder.append("\t\t");
                                CharSequence _compile_strict_required_future = new RequiredMessage().compile_strict_required_future(m);
                                _builder.append(_compile_strict_required_future, "\t\t");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t\t");
                                _builder.append("loopauto.collapse(b);");
                                _builder.newLine();
                              }
                            }
                            {
                              if (((!m.isPast()) && (!m.isFuture()))) {
                                _builder.append("\t\t");
                                CharSequence _compile_strict_required = new RequiredMessage().compile_strict_required(m);
                                _builder.append(_compile_strict_required, "\t\t");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t\t");
                                _builder.append("loopauto.collapse(b);");
                                _builder.newLine();
                              }
                            }
                          }
                        }
                        {
                          boolean _isFail_3 = m.isFail();
                          if (_isFail_3) {
                            {
                              if (((!m.isPast()) && (!m.isFuture()))) {
                                _builder.append("\t\t");
                                CharSequence _compile_strict_fail = new FailMessage().compile_strict_fail(m);
                                _builder.append(_compile_strict_fail, "\t\t");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t\t");
                                _builder.append("loopauto.collapse(b);");
                                _builder.newLine();
                              }
                            }
                          }
                        }
                        {
                          if (((!m.isFail()) && (!m.isRequired()))) {
                            {
                              boolean _isFuture_3 = m.isFuture();
                              if (_isFuture_3) {
                                _builder.append("\t\t");
                                CharSequence _compile_strict_future = new RegularMessage().compile_strict_future(m);
                                _builder.append(_compile_strict_future, "\t\t");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t\t");
                                _builder.append("loopauto.collapse(b);");
                                _builder.newLine();
                              }
                            }
                            {
                              if (((!m.isPast()) && (!m.isFuture()))) {
                                _builder.append("\t\t");
                                CharSequence _compile_strict = new RegularMessage().compile_strict(m);
                                _builder.append(_compile_strict, "\t\t");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t\t");
                                _builder.append("loopauto.collapse(b);");
                                _builder.newLine();
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                _builder.append("\t\t");
                _builder.append("a.merge(loopSetup(loopauto, ");
                String _min = l.getMin();
                _builder.append(_min, "\t\t");
                _builder.append(", ");
                String _max = l.getMax();
                _builder.append(_max, "\t\t");
                _builder.append("));");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              EList<Par> _par = sc.getPar();
              for(final Par p_2 : _par) {
                _builder.append("\t\t");
                _builder.append("parauto = new ArrayList<Automaton>();");
                _builder.newLine();
                {
                  EList<ParExpression> _parexpression = p_2.getParexpression();
                  for(final ParExpression pe : _parexpression) {
                    _builder.append("\t\t");
                    _builder.append("expression = new Automaton(\"expauto\" + counter);");
                    _builder.newLine();
                    {
                      EList<Message> _messages_2 = pe.getMessages();
                      for(final Message m_1 : _messages_2) {
                        {
                          boolean _isConstraint_1 = m_1.isConstraint();
                          if (_isConstraint_1) {
                            _builder.append("\t\t");
                            _builder.append("str = \"\" ");
                            _builder.newLine();
                            {
                              EList<Message> _messages_3 = m_1.getC().getMessages();
                              for(final Message msg_1 : _messages_3) {
                                _builder.append("\t\t");
                                _builder.append("+ \"!(\" + \"");
                                String _name_5 = msg_1.getSender().getName();
                                _builder.append(_name_5, "\t\t");
                                _builder.append("\" + \".\" + ");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t\t");
                                _builder.append("\"");
                                String _name_6 = msg_1.getName();
                                _builder.append(_name_6, "\t\t");
                                _builder.append("\" + \"(\"");
                                _builder.newLineIfNotEmpty();
                                {
                                  EList<Params> _params_1 = msg_1.getParams();
                                  for(final Params p1 : _params_1) {
                                    {
                                      int _size_4 = p1.getParams().size();
                                      ExclusiveRange _doubleDotLessThan_2 = new ExclusiveRange(0, _size_4, true);
                                      for(final Integer param_2 : _doubleDotLessThan_2) {
                                        _builder.append("\t\t");
                                        _builder.append("+");
                                        _builder.newLine();
                                        {
                                          boolean _startsWith_2 = p1.getParams().get((param_2).intValue()).getValue().getValue().startsWith("\"");
                                          if (_startsWith_2) {
                                            _builder.append("\t\t");
                                            String _value_4 = p1.getParams().get((param_2).intValue()).getValue().getValue();
                                            _builder.append(_value_4, "\t\t");
                                            _builder.newLineIfNotEmpty();
                                          } else {
                                            _builder.append("\t\t");
                                            _builder.append("\"");
                                            String _value_5 = p1.getParams().get((param_2).intValue()).getValue().getValue();
                                            _builder.append(_value_5, "\t\t");
                                            _builder.append("\"");
                                            _builder.newLineIfNotEmpty();
                                          }
                                        }
                                        {
                                          int _size_5 = p1.getParams().size();
                                          int _minus_2 = (_size_5 - 1);
                                          boolean _notEquals_2 = ((param_2).intValue() != _minus_2);
                                          if (_notEquals_2) {
                                            _builder.append("\t\t");
                                            _builder.append("+ \", \" ");
                                            _builder.newLine();
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                {
                                  EList<ConstantParams> _constantparams_1 = msg_1.getConstantparams();
                                  for(final ConstantParams p1_1 : _constantparams_1) {
                                    {
                                      int _size_6 = p1_1.getValues().size();
                                      ExclusiveRange _doubleDotLessThan_3 = new ExclusiveRange(0, _size_6, true);
                                      for(final Integer param_3 : _doubleDotLessThan_3) {
                                        _builder.append("\t\t");
                                        _builder.append("+");
                                        _builder.newLine();
                                        {
                                          boolean _startsWith_3 = p1_1.getValues().get((param_3).intValue()).getValue().startsWith("\"");
                                          if (_startsWith_3) {
                                            _builder.append("\t\t");
                                            String _value_6 = p1_1.getValues().get((param_3).intValue()).getValue();
                                            _builder.append(_value_6, "\t\t");
                                            _builder.newLineIfNotEmpty();
                                          } else {
                                            _builder.append("\t\t");
                                            _builder.append("\"");
                                            String _value_7 = p1_1.getValues().get((param_3).intValue()).getValue();
                                            _builder.append(_value_7, "\t\t");
                                            _builder.append("\"");
                                            _builder.newLineIfNotEmpty();
                                          }
                                        }
                                        {
                                          int _size_7 = p1_1.getValues().size();
                                          int _minus_3 = (_size_7 - 1);
                                          boolean _notEquals_3 = ((param_3).intValue() != _minus_3);
                                          if (_notEquals_3) {
                                            _builder.append("\t\t");
                                            _builder.append("+ \", \"");
                                            _builder.newLine();
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                _builder.append("\t\t");
                                _builder.append("+ \")\" ");
                                _builder.newLine();
                                _builder.append("\t\t");
                                _builder.newLine();
                                _builder.append("\t\t");
                                _builder.append("+ \".\" + \"");
                                String _name_7 = msg_1.getReceiver().getName();
                                _builder.append(_name_7, "\t\t");
                                _builder.append(")\" + \" & \"");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t\t\t\t\t\t\t\t\t\t");
                              }
                            }
                            _builder.append(";");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t\t");
                            _builder.append("str= str.substring(0, str.length() - 3);");
                            _builder.newLine();
                          }
                        }
                        {
                          boolean _isStrict_4 = m_1.isStrict();
                          boolean _not_2 = (!_isStrict_4);
                          if (_not_2) {
                            {
                              boolean _isRequired_4 = m_1.isRequired();
                              if (_isRequired_4) {
                                {
                                  boolean _isFuture_4 = m_1.isFuture();
                                  if (_isFuture_4) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_required_future_1 = new RequiredMessage().compile_required_future(m_1);
                                    _builder.append(_compile_required_future_1, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                                {
                                  boolean _isPast_3 = m_1.isPast();
                                  if (_isPast_3) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_required_past_1 = new RequiredMessage().compile_required_past(m_1);
                                    _builder.append(_compile_required_past_1, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                                {
                                  if (((!m_1.isPast()) && (!m_1.isFuture()))) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_required_1 = new RequiredMessage().compile_required(m_1);
                                    _builder.append(_compile_required_1, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                              }
                            }
                            {
                              boolean _isFail_4 = m_1.isFail();
                              if (_isFail_4) {
                                {
                                  boolean _isPast_4 = m_1.isPast();
                                  if (_isPast_4) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_fail_past_1 = new FailMessage().compile_fail_past(m_1);
                                    _builder.append(_compile_fail_past_1, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                                {
                                  if (((!m_1.isPast()) && (!m_1.isFuture()))) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_fail_1 = new FailMessage().compile_fail(m_1);
                                    _builder.append(_compile_fail_1, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                              }
                            }
                            {
                              if (((!m_1.isFail()) && (!m_1.isRequired()))) {
                                {
                                  boolean _isFuture_5 = m_1.isFuture();
                                  if (_isFuture_5) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_future_1 = new RegularMessage().compile_future(m_1);
                                    _builder.append(_compile_future_1, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                                {
                                  boolean _isPast_5 = m_1.isPast();
                                  if (_isPast_5) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_past_1 = new RegularMessage().compile_past(m_1);
                                    _builder.append(_compile_past_1, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                                {
                                  if (((!m_1.isPast()) && (!m_1.isFuture()))) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_msg_1 = new RegularMessage().compile_msg(m_1);
                                    _builder.append(_compile_msg_1, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                              }
                            }
                          }
                        }
                        _builder.append("\t\t");
                        _builder.newLine();
                        {
                          boolean _isStrict_5 = m_1.isStrict();
                          if (_isStrict_5) {
                            {
                              boolean _isRequired_5 = m_1.isRequired();
                              if (_isRequired_5) {
                                {
                                  boolean _isFuture_6 = m_1.isFuture();
                                  if (_isFuture_6) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_strict_required_future_1 = new RequiredMessage().compile_strict_required_future(m_1);
                                    _builder.append(_compile_strict_required_future_1, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                                {
                                  if (((!m_1.isPast()) && (!m_1.isFuture()))) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_strict_required_1 = new RequiredMessage().compile_strict_required(m_1);
                                    _builder.append(_compile_strict_required_1, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                              }
                            }
                            {
                              boolean _isFail_5 = m_1.isFail();
                              if (_isFail_5) {
                                {
                                  if (((!m_1.isPast()) && (!m_1.isFuture()))) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_strict_fail_1 = new FailMessage().compile_strict_fail(m_1);
                                    _builder.append(_compile_strict_fail_1, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                              }
                            }
                            {
                              if (((!m_1.isFail()) && (!m_1.isRequired()))) {
                                {
                                  boolean _isFuture_7 = m_1.isFuture();
                                  if (_isFuture_7) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_strict_future_1 = new RegularMessage().compile_strict_future(m_1);
                                    _builder.append(_compile_strict_future_1, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                                {
                                  if (((!m_1.isPast()) && (!m_1.isFuture()))) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_strict_1 = new RegularMessage().compile_strict(m_1);
                                    _builder.append(_compile_strict_1, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    _builder.append("\t\t");
                    _builder.append("parauto.add(expression);\t\t\t");
                    _builder.newLine();
                  }
                }
                _builder.append("\t\t");
                _builder.append("a.merge(par(parauto));");
                _builder.newLine();
              }
            }
            {
              EList<Alt> _alt = sc.getAlt();
              for(final Alt a_6 : _alt) {
                _builder.append("\t\t");
                _builder.append("altauto = new ArrayList<Automaton>();");
                _builder.newLine();
                {
                  EList<Expression> _expressions = a_6.getExpressions();
                  for(final Expression e : _expressions) {
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("expression = new Automaton(\"expauto\" + counter);");
                    _builder.newLine();
                    {
                      EList<Message> _messages_4 = e.getMessages();
                      for(final Message m_2 : _messages_4) {
                        {
                          boolean _isConstraint_2 = m_2.isConstraint();
                          if (_isConstraint_2) {
                            _builder.append("\t\t");
                            _builder.append("\t");
                            _builder.append("str = \"\" ");
                            _builder.newLine();
                            {
                              EList<Message> _messages_5 = m_2.getC().getMessages();
                              for(final Message msg_2 : _messages_5) {
                                _builder.append("\t\t");
                                _builder.append("\t");
                                _builder.append("+ \"!(\" + \"");
                                String _name_8 = msg_2.getSender().getName();
                                _builder.append(_name_8, "\t\t\t");
                                _builder.append("\" + \".\" +");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t\t");
                                _builder.append("\t");
                                _builder.append("\"");
                                String _name_9 = msg_2.getName();
                                _builder.append(_name_9, "\t\t\t");
                                _builder.append("\" + \"(\"");
                                _builder.newLineIfNotEmpty();
                                {
                                  EList<Params> _params_2 = msg_2.getParams();
                                  for(final Params p_3 : _params_2) {
                                    {
                                      int _size_8 = p_3.getParams().size();
                                      ExclusiveRange _doubleDotLessThan_4 = new ExclusiveRange(0, _size_8, true);
                                      for(final Integer param_4 : _doubleDotLessThan_4) {
                                        _builder.append("\t\t");
                                        _builder.append("\t");
                                        _builder.append("+");
                                        _builder.newLine();
                                        {
                                          boolean _startsWith_4 = p_3.getParams().get((param_4).intValue()).getValue().getValue().startsWith("\"");
                                          if (_startsWith_4) {
                                            _builder.append("\t\t");
                                            _builder.append("\t");
                                            String _value_8 = p_3.getParams().get((param_4).intValue()).getValue().getValue();
                                            _builder.append(_value_8, "\t\t\t");
                                            _builder.newLineIfNotEmpty();
                                          } else {
                                            _builder.append("\t\t");
                                            _builder.append("\t");
                                            _builder.append("\"");
                                            String _value_9 = p_3.getParams().get((param_4).intValue()).getValue().getValue();
                                            _builder.append(_value_9, "\t\t\t");
                                            _builder.append("\"");
                                            _builder.newLineIfNotEmpty();
                                          }
                                        }
                                        {
                                          int _size_9 = p_3.getParams().size();
                                          int _minus_4 = (_size_9 - 1);
                                          boolean _notEquals_4 = ((param_4).intValue() != _minus_4);
                                          if (_notEquals_4) {
                                            _builder.append("\t\t");
                                            _builder.append("\t");
                                            _builder.append("+ \", \" ");
                                            _builder.newLine();
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                {
                                  EList<ConstantParams> _constantparams_2 = msg_2.getConstantparams();
                                  for(final ConstantParams p_4 : _constantparams_2) {
                                    {
                                      int _size_10 = p_4.getValues().size();
                                      ExclusiveRange _doubleDotLessThan_5 = new ExclusiveRange(0, _size_10, true);
                                      for(final Integer param_5 : _doubleDotLessThan_5) {
                                        _builder.append("\t\t");
                                        _builder.append("\t");
                                        _builder.append("+");
                                        _builder.newLine();
                                        {
                                          boolean _startsWith_5 = p_4.getValues().get((param_5).intValue()).getValue().startsWith("\"");
                                          if (_startsWith_5) {
                                            _builder.append("\t\t");
                                            _builder.append("\t");
                                            String _value_10 = p_4.getValues().get((param_5).intValue()).getValue();
                                            _builder.append(_value_10, "\t\t\t");
                                            _builder.newLineIfNotEmpty();
                                          } else {
                                            _builder.append("\t\t");
                                            _builder.append("\t");
                                            _builder.append("\"");
                                            String _value_11 = p_4.getValues().get((param_5).intValue()).getValue();
                                            _builder.append(_value_11, "\t\t\t");
                                            _builder.append("\"");
                                            _builder.newLineIfNotEmpty();
                                          }
                                        }
                                        {
                                          int _size_11 = p_4.getValues().size();
                                          int _minus_5 = (_size_11 - 1);
                                          boolean _notEquals_5 = ((param_5).intValue() != _minus_5);
                                          if (_notEquals_5) {
                                            _builder.append("\t\t");
                                            _builder.append("\t");
                                            _builder.append("+ \", \"");
                                            _builder.newLine();
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                _builder.append("\t\t");
                                _builder.append("\t");
                                _builder.append("+ \")\"");
                                _builder.newLine();
                                _builder.append("\t\t");
                                _builder.append("\t");
                                _builder.newLine();
                                _builder.append("\t\t");
                                _builder.append("\t");
                                _builder.append("+ \".\" + \"");
                                String _name_10 = msg_2.getReceiver().getName();
                                _builder.append(_name_10, "\t\t\t");
                                _builder.append(")\" + \" & \"");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t\t\t\t\t\t\t\t\t\t");
                              }
                            }
                            _builder.append(";");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t\t");
                            _builder.append("\t");
                            _builder.append("str= str.substring(0, str.length() - 3);");
                            _builder.newLine();
                          }
                        }
                        {
                          boolean _isStrict_6 = m_2.isStrict();
                          boolean _not_3 = (!_isStrict_6);
                          if (_not_3) {
                            {
                              boolean _isRequired_6 = m_2.isRequired();
                              if (_isRequired_6) {
                                {
                                  boolean _isFuture_8 = m_2.isFuture();
                                  if (_isFuture_8) {
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    CharSequence _compile_required_future_2 = new RequiredMessage().compile_required_future(m_2);
                                    _builder.append(_compile_required_future_2, "\t\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                                {
                                  boolean _isPast_6 = m_2.isPast();
                                  if (_isPast_6) {
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    CharSequence _compile_required_past_2 = new RequiredMessage().compile_required_past(m_2);
                                    _builder.append(_compile_required_past_2, "\t\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                                {
                                  if (((!m_2.isPast()) && (!m_2.isFuture()))) {
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    CharSequence _compile_required_2 = new RequiredMessage().compile_required(m_2);
                                    _builder.append(_compile_required_2, "\t\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                              }
                            }
                            {
                              boolean _isFail_6 = m_2.isFail();
                              if (_isFail_6) {
                                {
                                  boolean _isPast_7 = m_2.isPast();
                                  if (_isPast_7) {
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    CharSequence _compile_fail_past_2 = new FailMessage().compile_fail_past(m_2);
                                    _builder.append(_compile_fail_past_2, "\t\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                                {
                                  if (((!m_2.isPast()) && (!m_2.isFuture()))) {
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    CharSequence _compile_fail_2 = new FailMessage().compile_fail(m_2);
                                    _builder.append(_compile_fail_2, "\t\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                              }
                            }
                            {
                              if (((!m_2.isFail()) && (!m_2.isRequired()))) {
                                {
                                  boolean _isFuture_9 = m_2.isFuture();
                                  if (_isFuture_9) {
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    CharSequence _compile_future_2 = new RegularMessage().compile_future(m_2);
                                    _builder.append(_compile_future_2, "\t\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                                {
                                  boolean _isPast_8 = m_2.isPast();
                                  if (_isPast_8) {
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    CharSequence _compile_past_2 = new RegularMessage().compile_past(m_2);
                                    _builder.append(_compile_past_2, "\t\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                                {
                                  if (((!m_2.isPast()) && (!m_2.isFuture()))) {
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    CharSequence _compile_msg_2 = new RegularMessage().compile_msg(m_2);
                                    _builder.append(_compile_msg_2, "\t\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                              }
                            }
                          }
                        }
                        _builder.append("\t\t");
                        _builder.append("\t");
                        _builder.newLine();
                        {
                          boolean _isStrict_7 = m_2.isStrict();
                          if (_isStrict_7) {
                            {
                              boolean _isRequired_7 = m_2.isRequired();
                              if (_isRequired_7) {
                                {
                                  boolean _isFuture_10 = m_2.isFuture();
                                  if (_isFuture_10) {
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    CharSequence _compile_strict_required_future_2 = new RequiredMessage().compile_strict_required_future(m_2);
                                    _builder.append(_compile_strict_required_future_2, "\t\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                                {
                                  if (((!m_2.isPast()) && (!m_2.isFuture()))) {
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    CharSequence _compile_strict_required_2 = new RequiredMessage().compile_strict_required(m_2);
                                    _builder.append(_compile_strict_required_2, "\t\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                              }
                            }
                            {
                              boolean _isFail_7 = m_2.isFail();
                              if (_isFail_7) {
                                {
                                  if (((!m_2.isPast()) && (!m_2.isFuture()))) {
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    CharSequence _compile_strict_fail_2 = new FailMessage().compile_strict_fail(m_2);
                                    _builder.append(_compile_strict_fail_2, "\t\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                              }
                            }
                            {
                              if (((!m_2.isFail()) && (!m_2.isRequired()))) {
                                {
                                  boolean _isFuture_11 = m_2.isFuture();
                                  if (_isFuture_11) {
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    CharSequence _compile_strict_future_2 = new RegularMessage().compile_strict_future(m_2);
                                    _builder.append(_compile_strict_future_2, "\t\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                                {
                                  if (((!m_2.isPast()) && (!m_2.isFuture()))) {
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    CharSequence _compile_strict_2 = new RegularMessage().compile_strict(m_2);
                                    _builder.append(_compile_strict_2, "\t\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("altauto.add(expression);\t\t\t\t\t\t");
                    _builder.newLine();
                  }
                }
                _builder.append("\t\t");
                _builder.append("\t");
                _builder.append("a.merge(altauto);");
                _builder.newLine();
              }
            }
            {
              EList<Message> _message = sc.getMessage();
              for(final Message m_3 : _message) {
                {
                  boolean _isConstraint_3 = m_3.isConstraint();
                  if (_isConstraint_3) {
                    _builder.append("\t\t");
                    _builder.append("str = \"\" ");
                    _builder.newLine();
                    {
                      EList<Message> _messages_6 = m_3.getC().getMessages();
                      for(final Message msg_3 : _messages_6) {
                        _builder.append("\t\t");
                        _builder.append("+ \"!(\" + \"");
                        String _name_11 = msg_3.getSender().getName();
                        _builder.append(_name_11, "\t\t");
                        _builder.append("\" + \".\" +");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t");
                        _builder.append("\"");
                        String _name_12 = msg_3.getName();
                        _builder.append(_name_12, "\t\t");
                        _builder.append("\" + \"(\"");
                        _builder.newLineIfNotEmpty();
                        {
                          EList<Params> _params_3 = msg_3.getParams();
                          for(final Params p_5 : _params_3) {
                            {
                              int _size_12 = p_5.getParams().size();
                              ExclusiveRange _doubleDotLessThan_6 = new ExclusiveRange(0, _size_12, true);
                              for(final Integer param_6 : _doubleDotLessThan_6) {
                                _builder.append("\t\t");
                                _builder.append("+");
                                _builder.newLine();
                                {
                                  boolean _startsWith_6 = p_5.getParams().get((param_6).intValue()).getValue().getValue().startsWith("\"");
                                  if (_startsWith_6) {
                                    _builder.append("\t\t");
                                    String _value_12 = p_5.getParams().get((param_6).intValue()).getValue().getValue();
                                    _builder.append(_value_12, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                  } else {
                                    _builder.append("\t\t");
                                    _builder.append("\"");
                                    String _value_13 = p_5.getParams().get((param_6).intValue()).getValue().getValue();
                                    _builder.append(_value_13, "\t\t");
                                    _builder.append("\"");
                                    _builder.newLineIfNotEmpty();
                                  }
                                }
                                {
                                  int _size_13 = p_5.getParams().size();
                                  int _minus_6 = (_size_13 - 1);
                                  boolean _notEquals_6 = ((param_6).intValue() != _minus_6);
                                  if (_notEquals_6) {
                                    _builder.append("\t\t");
                                    _builder.append("+ \", \"");
                                    _builder.newLine();
                                  }
                                }
                              }
                            }
                          }
                        }
                        {
                          EList<ConstantParams> _constantparams_3 = msg_3.getConstantparams();
                          for(final ConstantParams p_6 : _constantparams_3) {
                            {
                              int _size_14 = p_6.getValues().size();
                              ExclusiveRange _doubleDotLessThan_7 = new ExclusiveRange(0, _size_14, true);
                              for(final Integer param_7 : _doubleDotLessThan_7) {
                                _builder.append("\t\t");
                                _builder.append("+");
                                _builder.newLine();
                                {
                                  boolean _startsWith_7 = p_6.getValues().get((param_7).intValue()).getValue().startsWith("\"");
                                  if (_startsWith_7) {
                                    _builder.append("\t\t");
                                    String _value_14 = p_6.getValues().get((param_7).intValue()).getValue();
                                    _builder.append(_value_14, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                  } else {
                                    _builder.append("\t\t");
                                    _builder.append("\"");
                                    String _value_15 = p_6.getValues().get((param_7).intValue()).getValue();
                                    _builder.append(_value_15, "\t\t");
                                    _builder.append("\"");
                                    _builder.newLineIfNotEmpty();
                                  }
                                }
                                {
                                  int _size_15 = p_6.getValues().size();
                                  int _minus_7 = (_size_15 - 1);
                                  boolean _notEquals_7 = ((param_7).intValue() != _minus_7);
                                  if (_notEquals_7) {
                                    _builder.append("\t\t");
                                    _builder.append("+ \", \"");
                                    _builder.newLine();
                                  }
                                }
                              }
                            }
                          }
                        }
                        _builder.append("\t\t");
                        _builder.append("+ \")\"");
                        _builder.newLine();
                        _builder.append("\t\t");
                        _builder.append("+ \".\" + \"");
                        String _name_13 = msg_3.getReceiver().getName();
                        _builder.append(_name_13, "\t\t");
                        _builder.append(")\" + \" & \"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t\t\t\t\t\t");
                      }
                    }
                    _builder.append(";");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t");
                    _builder.append("str= str.substring(0, str.length() - 3);");
                    _builder.newLine();
                  }
                }
                {
                  boolean _isStrict_8 = m_3.isStrict();
                  boolean _not_4 = (!_isStrict_8);
                  if (_not_4) {
                    {
                      boolean _isRequired_8 = m_3.isRequired();
                      if (_isRequired_8) {
                        {
                          boolean _isFuture_12 = m_3.isFuture();
                          if (_isFuture_12) {
                            _builder.append("\t\t");
                            CharSequence _compile_required_future_3 = new RequiredMessage().compile_required_future(m_3);
                            _builder.append(_compile_required_future_3, "\t\t");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t\t");
                            _builder.append("a.collapse(b);");
                            _builder.newLine();
                          }
                        }
                        {
                          boolean _isPast_9 = m_3.isPast();
                          if (_isPast_9) {
                            _builder.append("\t\t");
                            CharSequence _compile_required_past_3 = new RequiredMessage().compile_required_past(m_3);
                            _builder.append(_compile_required_past_3, "\t\t");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t\t");
                            _builder.append("a.collapse(b);");
                            _builder.newLine();
                          }
                        }
                        {
                          if (((!m_3.isPast()) && (!m_3.isFuture()))) {
                            _builder.append("\t\t");
                            CharSequence _compile_required_3 = new RequiredMessage().compile_required(m_3);
                            _builder.append(_compile_required_3, "\t\t");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t\t");
                            _builder.append("a.collapse(b);");
                            _builder.newLine();
                          }
                        }
                      }
                    }
                    {
                      boolean _isFail_8 = m_3.isFail();
                      if (_isFail_8) {
                        {
                          boolean _isPast_10 = m_3.isPast();
                          if (_isPast_10) {
                            _builder.append("\t\t");
                            CharSequence _compile_fail_past_3 = new FailMessage().compile_fail_past(m_3);
                            _builder.append(_compile_fail_past_3, "\t\t");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t\t");
                            _builder.append("a.collapse(b);");
                            _builder.newLine();
                          }
                        }
                        {
                          if (((!m_3.isPast()) && (!m_3.isFuture()))) {
                            _builder.append("\t\t");
                            CharSequence _compile_fail_3 = new FailMessage().compile_fail(m_3);
                            _builder.append(_compile_fail_3, "\t\t");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t\t");
                            _builder.append("a.collapse(b);");
                            _builder.newLine();
                          }
                        }
                      }
                    }
                    {
                      if (((!m_3.isFail()) && (!m_3.isRequired()))) {
                        {
                          boolean _isFuture_13 = m_3.isFuture();
                          if (_isFuture_13) {
                            _builder.append("\t\t");
                            CharSequence _compile_future_3 = new RegularMessage().compile_future(m_3);
                            _builder.append(_compile_future_3, "\t\t");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t\t");
                            _builder.append("a.collapse(b);");
                            _builder.newLine();
                          }
                        }
                        {
                          boolean _isPast_11 = m_3.isPast();
                          if (_isPast_11) {
                            _builder.append("\t\t");
                            CharSequence _compile_past_3 = new RegularMessage().compile_past(m_3);
                            _builder.append(_compile_past_3, "\t\t");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t\t");
                            _builder.append("a.collapse(b);");
                            _builder.newLine();
                          }
                        }
                        {
                          if (((!m_3.isPast()) && (!m_3.isFuture()))) {
                            _builder.append("\t\t");
                            CharSequence _compile_msg_3 = new RegularMessage().compile_msg(m_3);
                            _builder.append(_compile_msg_3, "\t\t");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t\t");
                            _builder.append("a.collapse(b);");
                            _builder.newLine();
                          }
                        }
                      }
                    }
                  }
                }
                _builder.append("\t\t");
                _builder.newLine();
                {
                  boolean _isStrict_9 = m_3.isStrict();
                  if (_isStrict_9) {
                    {
                      boolean _isRequired_9 = m_3.isRequired();
                      if (_isRequired_9) {
                        {
                          boolean _isFuture_14 = m_3.isFuture();
                          if (_isFuture_14) {
                            _builder.append("\t\t");
                            CharSequence _compile_strict_required_future_3 = new RequiredMessage().compile_strict_required_future(m_3);
                            _builder.append(_compile_strict_required_future_3, "\t\t");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t\t");
                            _builder.append("a.collapse(b);");
                            _builder.newLine();
                          }
                        }
                        {
                          if (((!m_3.isPast()) && (!m_3.isFuture()))) {
                            _builder.append("\t\t");
                            CharSequence _compile_strict_required_3 = new RequiredMessage().compile_strict_required(m_3);
                            _builder.append(_compile_strict_required_3, "\t\t");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t\t");
                            _builder.append("a.collapse(b);");
                            _builder.newLine();
                          }
                        }
                      }
                    }
                    {
                      boolean _isFail_9 = m_3.isFail();
                      if (_isFail_9) {
                        {
                          if (((!m_3.isPast()) && (!m_3.isFuture()))) {
                            _builder.append("\t\t");
                            CharSequence _compile_strict_fail_3 = new FailMessage().compile_strict_fail(m_3);
                            _builder.append(_compile_strict_fail_3, "\t\t");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t\t");
                            _builder.append("a.collapse(b);");
                            _builder.newLine();
                          }
                        }
                      }
                    }
                    {
                      if (((!m_3.isFail()) && (!m_3.isRequired()))) {
                        {
                          boolean _isFuture_15 = m_3.isFuture();
                          if (_isFuture_15) {
                            _builder.append("\t\t");
                            CharSequence _compile_strict_future_3 = new RegularMessage().compile_strict_future(m_3);
                            _builder.append(_compile_strict_future_3, "\t\t");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t\t");
                            _builder.append("a.collapse(b);");
                            _builder.newLine();
                          }
                        }
                        {
                          if (((!m_3.isPast()) && (!m_3.isFuture()))) {
                            _builder.append("\t\t");
                            CharSequence _compile_strict_3 = new RegularMessage().compile_strict(m_3);
                            _builder.append(_compile_strict_3, "\t\t");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t\t");
                            _builder.append("a.collapse(b);");
                            _builder.newLine();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        _builder.append("\t\t");
        _builder.append("a.rename();");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("automatas.add(a);");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void listAutomatas(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(Automaton a : this.automatas){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for(State s : a.getStates()){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("s.writeState();\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for(Transition t : a.getTransitions()){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("t.writeTransition();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ArrayList<Automaton> par(ArrayList<Automaton> automatas) {");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("ArrayList<ArrayList<Automaton>> automataList = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("permute(automataList, new ArrayList<>(), automatas);");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("return listConverter((automataList));");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private void permute(ArrayList<ArrayList<Automaton>> list, ArrayList<Automaton> resultList, ArrayList<Automaton> automatas) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (resultList.size() == automatas.size()) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("list.add(new ArrayList<>(resultList));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("for (int i = 0; i < automatas.size(); i++) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (resultList.contains((automatas.get(i)))) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("continue;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                ");
    _builder.append("resultList.add(automatas.get(i));");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("permute(list, resultList, automatas);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("resultList.remove(resultList.size() - 1);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private ArrayList<Automaton> listConverter(ArrayList<ArrayList<Automaton>> list) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ArrayList<Automaton> result = new ArrayList<>();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for (ArrayList<Automaton> alist : list) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Automaton newauto = new Automaton(\"listConverter\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("for (Automaton auto : alist) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("newauto.collapse(copyAutomaton(auto));");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("result.add(newauto);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return result;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public ArrayList<Automaton> loopSetup(Automaton loopauto, int min, int max) {");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("ArrayList<Automaton> result = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("for (int i = min; i <= max; i++) {");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("Automaton newauto = new Automaton(\"loopauto\");");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("for (int j = 0; j < i; j++) {");
    _builder.newLine();
    _builder.append("\t                    ");
    _builder.append("newauto.collapse(copyAutomaton(loopauto));");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("result.add(newauto);");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("return result;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Automaton copyAutomaton(Automaton referenceAuto) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Automaton result = new Automaton(\"copy automaton\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("int count = 0;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("State previousSender = new State();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("State referencePreviousSender = new State();");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("for (Transition t : referenceAuto.getTransitions()) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("State sender = new State();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("State receiver = new State();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("Transition transition = new Transition();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("Automaton temp = new Automaton(\"temp\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("transition.setId(t.getId());");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (t.getSender() == referencePreviousSender) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("receiver.setId(\"c\" + count);");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("count++;");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("receiver.setType(t.getReceiver().getType());");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("transition.setSender(previousSender);");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("transition.setReceiver(receiver);");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("temp.addState(previousSender);");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("temp.addState(receiver);");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("temp.setInitial(previousSender);");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("temp.setFinale(receiver);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("if (t.getSender() == t.getReceiver()) {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("sender.setId(\"c\" + count);");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("count++;");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("sender.setType(t.getSender().getType());");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("transition.setSender(sender);");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("transition.setReceiver(sender);");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("temp.addState(sender);");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("temp.setInitial(sender);");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("temp.setFinale(sender);");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("sender.setId(\"c\" + count);");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("count++;");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("sender.setType(t.getSender().getType());");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("receiver.setId(\"c\" + count);");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("count++;");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("receiver.setType(t.getReceiver().getType());");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("transition.setSender(sender);");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("transition.setReceiver(receiver);");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("temp.addState(sender);");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("temp.addState(receiver);");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("temp.setInitial(sender);");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("temp.setFinale(receiver);");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("previousSender = sender;");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("referencePreviousSender = t.getSender();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("temp.addTransition(transition);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("result.collapse(temp);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return result;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main(String[] args) throws FileNotFoundException, UnsupportedEncodingException{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Specification specification = new Specification();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("specification.listAutomatas();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("boolean acceptState = false;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("PrintWriter writer = new PrintWriter(\"");
    String _name_14 = s.getName();
    _builder.append(_name_14, "\t\t");
    _builder.append("\" + \".txt\", \"UTF-8\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("for(Automaton a : specification.automatas){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writer.println(\"never{ /*\" + a.getId()+ \"Monitor\" + \"*/\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for(State s : a.getStates()){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(s == a.getInitial()){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("writer.println(\"T0_init:\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("writer.println(\" if\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("for(Transition t : a.findSender(s)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("if(t.getReceiver() == a.getInitial()){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("writer.println(\" :: (\" + t.getId() + \") \" + \"->\" + \" goto T0_init\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}else if(t.getReceiver().getType().equals(StateType.NORMAL)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("writer.println(\" :: (\" + t.getId() + \") \" + \"->\" + \" goto T0_\" + t.getReceiver().getId());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}else if(t.getReceiver().getType().equals(StateType.ACCEPT_ALL)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("writer.println(\" :: (\" + t.getId() + \") \" + \"->\" + \" goto accept_all\" );");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}else if(t.getReceiver().getType().equals(StateType.FINAL)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("writer.println(\" :: (\" + t.getId() + \") \" + \"->\" + \" goto T0_\" + t.getReceiver().getId());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}else if(t.getReceiver().getType().equals(StateType.ACCEPT)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("writer.println(\" :: (\" + t.getId() + \") \" + \"->\" + \" goto accept_\" + t.getReceiver().getId());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("writer.println(\" fi;\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}else if(s.getType().equals(StateType.NORMAL)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("writer.println(\"T0_\" + s.getId() + \":\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("writer.println(\" if\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("for(Transition t : a.findSender(s)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("if(t.getReceiver() == a.getInitial()){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("writer.println(\" :: (\" + t.getId() + \") \" + \"->\" + \" goto T0_init\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}else if(t.getReceiver().getType().equals(StateType.NORMAL)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("writer.println(\" :: (\" + t.getId() + \") \" + \"->\" + \" goto T0_\" + t.getReceiver().getId());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}else if(t.getReceiver().getType().equals(StateType.ACCEPT_ALL)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("writer.println(\" :: (\" + t.getId() + \") \" + \"->\" + \" goto accept_all\" );");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}else if(t.getReceiver().getType().equals(StateType.FINAL)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("writer.println(\" :: (\" + t.getId() + \") \" + \"->\" + \" goto T0_\" + t.getReceiver().getId());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}else if(t.getReceiver().getType().equals(StateType.ACCEPT)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("writer.println(\" :: (\" + t.getId() + \") \" + \"->\" + \" goto accept_\" + t.getReceiver().getId());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("writer.println(\" fi;\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}else if(s.getType().equals(StateType.ACCEPT_ALL) && !acceptState){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("writer.println(\"accept_all:\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("writer.println(\"skip\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("acceptState = true;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}else if(s.getType().equals(StateType.FINAL)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("writer.println(\"T0_\" + s.getId() + \":\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("writer.println(\" if\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("for(Transition t : a.findSender(s)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("if(t.getReceiver() == a.getInitial()){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("writer.println(\" :: (\" + t.getId() + \")\" + \"->\" + \" goto T0_init\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}else if(t.getReceiver().getType().equals(StateType.NORMAL)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("writer.println(\" :: (\" + t.getId() + \") \" + \"->\" + \" goto T0_\" + t.getReceiver().getId());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}else if(t.getReceiver().getType().equals(StateType.ACCEPT_ALL)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("writer.println(\" :: (\" + t.getId() + \") \" + \"->\" + \" goto accept_all\" );");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}else if(t.getReceiver().getType().equals(StateType.FINAL)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("writer.println(\" :: (\" + t.getId() + \") \" + \"->\" + \" goto T0_\" + t.getReceiver().getId());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}else if(t.getReceiver().getType().equals(StateType.ACCEPT)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("writer.println(\" :: (\" + t.getId() + \") \" + \"->\" + \" goto accept_\" + t.getReceiver().getId());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("writer.println(\" fi;\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}else if(s.getType().equals(StateType.ACCEPT)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("writer.println(\"accept_\" + s.getId() + \":\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("writer.println(\" if\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("for(Transition t : a.findSender(s)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("if(t.getReceiver() == a.getInitial()){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("writer.println(\" :: (\" + t.getId() + \")\" + \"->\" + \" goto T0_init\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}else if(t.getReceiver().getType().equals(StateType.NORMAL)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("writer.println(\" :: (\" + t.getId() + \") \" + \"->\" + \" goto T0_\" + t.getReceiver().getId());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}else if(t.getReceiver().getType().equals(StateType.ACCEPT_ALL)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("writer.println(\" :: (\" + t.getId() + \") \" + \"->\" + \" goto accept_all\" );");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}else if(t.getReceiver().getType().equals(StateType.FINAL)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("writer.println(\" :: (\" + t.getId() + \") \" + \"->\" + \" goto T0_\" + t.getReceiver().getId());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}else if(t.getReceiver().getType().equals(StateType.ACCEPT)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("writer.println(\" :: (\" + t.getId() + \") \" + \"->\" + \" goto accept_\" + t.getReceiver().getId());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("writer.println(\" fi;\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writer.println(\"}\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("writer.close();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
