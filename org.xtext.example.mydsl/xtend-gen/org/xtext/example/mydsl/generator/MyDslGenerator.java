/**
 * generated by Xtext 2.16.0
 */
package org.xtext.example.mydsl.generator;

import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.example.mydsl.myDsl.Alt;
import org.xtext.example.mydsl.myDsl.Domain;
import org.xtext.example.mydsl.myDsl.Expression;
import org.xtext.example.mydsl.myDsl.Loop;
import org.xtext.example.mydsl.myDsl.Message;
import org.xtext.example.mydsl.myDsl.Par;
import org.xtext.example.mydsl.myDsl.ParExpression;
import org.xtext.example.mydsl.myDsl.Scenario;
import org.xtext.example.mydsl.myDsl.ScenarioContent;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public class State {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private String id;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private StateType type;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public State() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.id = \"q0\";");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.type = StateType.NORMAL;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public State(String id, StateType stateType) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.id = id;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.type = stateType;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String getId() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return id;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public StateType getType() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return type;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setType(StateType type) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.type = type;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setId(String id) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.id = id;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void writeState(){");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("System.out.println(this.id + \" \" + this.type);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    fsa.generateFile("State.java", _builder);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("public enum StateType {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("NORMAL, ACCEPT, FINAL, ACCEPT_ALL");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    fsa.generateFile("StateType.java", _builder_1);
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("public class Transition {");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("private String id;");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("private State sender;");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("private State receiver;");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("public Transition(String id, State sender, State receiver) {");
    _builder_2.newLine();
    _builder_2.append("    \t");
    _builder_2.append("if(id.equals(\"1\")){");
    _builder_2.newLine();
    _builder_2.append("    \t\t");
    _builder_2.append("this.id = \"true\";");
    _builder_2.newLine();
    _builder_2.append("    \t");
    _builder_2.append("}else{");
    _builder_2.newLine();
    _builder_2.append("        \t");
    _builder_2.append("this.id = id;");
    _builder_2.newLine();
    _builder_2.append("        ");
    _builder_2.append("}");
    _builder_2.newLine();
    _builder_2.append("        ");
    _builder_2.append("this.sender = sender;");
    _builder_2.newLine();
    _builder_2.append("        ");
    _builder_2.append("this.receiver = receiver;");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("}");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("public String getId() {");
    _builder_2.newLine();
    _builder_2.append("        ");
    _builder_2.append("return id;");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("}");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("public State getSender() {");
    _builder_2.newLine();
    _builder_2.append("        ");
    _builder_2.append("return sender;");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("}");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("public State getReceiver() {");
    _builder_2.newLine();
    _builder_2.append("        ");
    _builder_2.append("return receiver;");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("}");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("public void setReceiver(State receiver) {");
    _builder_2.newLine();
    _builder_2.append("        ");
    _builder_2.append("this.receiver = receiver;");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("}");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("public void setSender(State sender) {");
    _builder_2.newLine();
    _builder_2.append("        ");
    _builder_2.append("this.sender = sender;");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("}");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("public void setId(String id) {");
    _builder_2.newLine();
    _builder_2.append("        ");
    _builder_2.append("if(id.equals(\"1\")){");
    _builder_2.newLine();
    _builder_2.append("        \t");
    _builder_2.append("this.id = \"true\";");
    _builder_2.newLine();
    _builder_2.append("        ");
    _builder_2.append("}else{");
    _builder_2.newLine();
    _builder_2.append("        \t");
    _builder_2.append("this.id = id;");
    _builder_2.newLine();
    _builder_2.append("        ");
    _builder_2.append("}");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("}");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("public void writeTransition(){");
    _builder_2.newLine();
    _builder_2.append("    \t");
    _builder_2.append("System.out.println(this.id + \" \" + this.sender.getId() + \"->\" + this.receiver.getId());");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("}");
    _builder_2.newLine();
    _builder_2.append("}");
    _builder_2.newLine();
    fsa.generateFile("Transition.java", _builder_2);
    StringConcatenation _builder_3 = new StringConcatenation();
    _builder_3.append("import java.util.ArrayList;");
    _builder_3.newLine();
    _builder_3.newLine();
    _builder_3.append("public class Automaton {");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("private String id;");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("private ArrayList<State> states;");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("private ArrayList<Transition> transitions;");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("private State initial;");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("private State finale;");
    _builder_3.newLine();
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("public Automaton(String id) {");
    _builder_3.newLine();
    _builder_3.append("        ");
    _builder_3.append("this.id = id;");
    _builder_3.newLine();
    _builder_3.append("        ");
    _builder_3.append("this.states = new ArrayList<>();");
    _builder_3.newLine();
    _builder_3.append("        ");
    _builder_3.append("this.transitions = new ArrayList<>();");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("public void setFinale(State state){");
    _builder_3.newLine();
    _builder_3.append("        ");
    _builder_3.append("this.finale = state;");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("public State getFinale(){");
    _builder_3.newLine();
    _builder_3.append("        ");
    _builder_3.append("return this.finale;");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("public void setInitial(State state){");
    _builder_3.newLine();
    _builder_3.append("    \t");
    _builder_3.append("this.initial = state;");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("public State getInitial(){");
    _builder_3.newLine();
    _builder_3.append("    \t");
    _builder_3.append("return this.initial;");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("}\t");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("public ArrayList<State> getStates(){");
    _builder_3.newLine();
    _builder_3.append("    \t");
    _builder_3.append("return states;");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("public ArrayList<Transition> getTransitions(){");
    _builder_3.newLine();
    _builder_3.append("    \t");
    _builder_3.append("return transitions;");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("public String getId() {");
    _builder_3.newLine();
    _builder_3.append("        ");
    _builder_3.append("return id;");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("public void setId(String id) {");
    _builder_3.newLine();
    _builder_3.append("        ");
    _builder_3.append("this.id = id;");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("public void addState(State newState){");
    _builder_3.newLine();
    _builder_3.append("        ");
    _builder_3.append("states.add(newState);");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("public void rename(){");
    _builder_3.newLine();
    _builder_3.append("       ");
    _builder_3.append("int counter = 0;");
    _builder_3.newLine();
    _builder_3.append("       ");
    _builder_3.append("int _counter = 0;");
    _builder_3.newLine();
    _builder_3.append("       ");
    _builder_3.append("for(State s : this.states) {");
    _builder_3.newLine();
    _builder_3.append("       \t");
    _builder_3.append("if(s.getId().equals(\"qinit\") || s.getId().equals(\"qfinal\") || s.getId().equals(\"qaccepting\")){");
    _builder_3.newLine();
    _builder_3.append("       \t\t");
    _builder_3.append("s.setId(s.getId() + _counter);");
    _builder_3.newLine();
    _builder_3.append("       \t\t");
    _builder_3.append("_counter++;");
    _builder_3.newLine();
    _builder_3.append("       \t");
    _builder_3.append("}else{");
    _builder_3.newLine();
    _builder_3.append("         \t");
    _builder_3.append("s.setId(\"q\" + counter);");
    _builder_3.newLine();
    _builder_3.append("         \t");
    _builder_3.append("counter++;");
    _builder_3.newLine();
    _builder_3.append("         ");
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.append("       ");
    _builder_3.append("}  ");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("public ArrayList<Transition> findSender(State state){");
    _builder_3.newLine();
    _builder_3.append("    \t");
    _builder_3.append("ArrayList<Transition> senderTransitions = new ArrayList<Transition>();");
    _builder_3.newLine();
    _builder_3.append("    \t");
    _builder_3.append("for(Transition t : this.transitions){");
    _builder_3.newLine();
    _builder_3.append("    \t\t");
    _builder_3.append("if(t.getSender().getId().equals(state.getId()))");
    _builder_3.newLine();
    _builder_3.append("    \t\t\t");
    _builder_3.append("senderTransitions.add(t);");
    _builder_3.newLine();
    _builder_3.append("    \t");
    _builder_3.append("}\t");
    _builder_3.newLine();
    _builder_3.append("    \t");
    _builder_3.append("return senderTransitions;");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("public ArrayList<Transition> findReceiver(State state){");
    _builder_3.newLine();
    _builder_3.append("       ");
    _builder_3.append("ArrayList<Transition> receiverTransitions = new ArrayList<Transition>();");
    _builder_3.newLine();
    _builder_3.append("       ");
    _builder_3.append("for(Transition t : this.transitions){");
    _builder_3.newLine();
    _builder_3.append("       \t ");
    _builder_3.append("if(t.getReceiver().getId().equals(state.getId()))");
    _builder_3.newLine();
    _builder_3.append("            ");
    _builder_3.append("receiverTransitions.add(t);");
    _builder_3.newLine();
    _builder_3.append("         ");
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.append("       ");
    _builder_3.append("return receiverTransitions;");
    _builder_3.newLine();
    _builder_3.append("     ");
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.append("     \t\t\t");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("public void addTransition(Transition newTransition){");
    _builder_3.newLine();
    _builder_3.append("   \t\t");
    _builder_3.append("if(transitions.isEmpty()){");
    _builder_3.newLine();
    _builder_3.append("   \t\t\t");
    _builder_3.append("transitions.add(newTransition);");
    _builder_3.newLine();
    _builder_3.append("   \t\t    ");
    _builder_3.append("return;");
    _builder_3.newLine();
    _builder_3.append("   \t\t");
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.append("   \t\t        ");
    _builder_3.newLine();
    _builder_3.append("   \t\t");
    _builder_3.append("for(Transition t : transitions){");
    _builder_3.newLine();
    _builder_3.append("   \t\t\t");
    _builder_3.append("if(t.getId().equals(newTransition.getId()) ");
    _builder_3.newLine();
    _builder_3.append("   \t\t    \t");
    _builder_3.append("&& t.getSender().equals(newTransition.getSender()) ");
    _builder_3.newLine();
    _builder_3.append("   \t\t        ");
    _builder_3.append("&& t.getReceiver().equals(newTransition.getReceiver()))");
    _builder_3.newLine();
    _builder_3.append("   \t\t        \t");
    _builder_3.append("return;");
    _builder_3.newLine();
    _builder_3.append("   \t\t");
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.append("   \t\t        ");
    _builder_3.newLine();
    _builder_3.append("   \t\t");
    _builder_3.append("transitions.add(newTransition);");
    _builder_3.newLine();
    _builder_3.append("   ");
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.append("   ");
    _builder_3.newLine();
    _builder_3.append("   ");
    _builder_3.append("public void collapse(Automaton automaton){");
    _builder_3.newLine();
    _builder_3.append("           ");
    _builder_3.append("if(this.states.isEmpty() && this.transitions.isEmpty()){");
    _builder_3.newLine();
    _builder_3.append("               ");
    _builder_3.append("for (State s : automaton.states)");
    _builder_3.newLine();
    _builder_3.append("                   ");
    _builder_3.append("this.addState(s);");
    _builder_3.newLine();
    _builder_3.append("               ");
    _builder_3.newLine();
    _builder_3.append("   ");
    _builder_3.newLine();
    _builder_3.append("               ");
    _builder_3.append("for (Transition t : automaton.transitions)");
    _builder_3.newLine();
    _builder_3.append("                   ");
    _builder_3.append("this.addTransition(t);");
    _builder_3.newLine();
    _builder_3.append("                   ");
    _builder_3.newLine();
    _builder_3.append("               ");
    _builder_3.append("this.initial = automaton.initial;");
    _builder_3.newLine();
    _builder_3.append("               ");
    _builder_3.append("this.finale = automaton.finale;");
    _builder_3.newLine();
    _builder_3.append("               ");
    _builder_3.newLine();
    _builder_3.append("           ");
    _builder_3.append("}else {");
    _builder_3.newLine();
    _builder_3.append("               ");
    _builder_3.append("ArrayList<Transition> receive = findReceiver(this.finale);");
    _builder_3.newLine();
    _builder_3.append("               ");
    _builder_3.append("ArrayList<Transition> send = findSender(this.finale);");
    _builder_3.newLine();
    _builder_3.append("   ");
    _builder_3.newLine();
    _builder_3.append("               ");
    _builder_3.append("for (State s : automaton.states) ");
    _builder_3.newLine();
    _builder_3.append("                   ");
    _builder_3.append("this.addState(s);");
    _builder_3.newLine();
    _builder_3.append("               ");
    _builder_3.newLine();
    _builder_3.append("   ");
    _builder_3.newLine();
    _builder_3.append("               ");
    _builder_3.append("for (Transition t : automaton.transitions) ");
    _builder_3.newLine();
    _builder_3.append("                   ");
    _builder_3.append("this.addTransition(t);");
    _builder_3.newLine();
    _builder_3.append("               ");
    _builder_3.newLine();
    _builder_3.append("   ");
    _builder_3.newLine();
    _builder_3.append("               ");
    _builder_3.append("for (Transition t : receive) ");
    _builder_3.newLine();
    _builder_3.append("                   ");
    _builder_3.append("t.setReceiver(automaton.initial);");
    _builder_3.newLine();
    _builder_3.append("               ");
    _builder_3.newLine();
    _builder_3.append("   ");
    _builder_3.newLine();
    _builder_3.append("               ");
    _builder_3.append("for (Transition t : send) ");
    _builder_3.newLine();
    _builder_3.append("                   ");
    _builder_3.append("t.setSender(automaton.initial);");
    _builder_3.newLine();
    _builder_3.append("               ");
    _builder_3.newLine();
    _builder_3.append("   ");
    _builder_3.newLine();
    _builder_3.append("               ");
    _builder_3.append("this.states.remove(finale);");
    _builder_3.newLine();
    _builder_3.append("               ");
    _builder_3.append("this.finale = automaton.finale;");
    _builder_3.newLine();
    _builder_3.append("           ");
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.append("   ");
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.append("   ");
    _builder_3.append("public void merge(ArrayList<Automaton> automatas){");
    _builder_3.newLine();
    _builder_3.append("   ");
    _builder_3.newLine();
    _builder_3.append("           ");
    _builder_3.append("State qinit = new State(\"qinit\", StateType.NORMAL);");
    _builder_3.newLine();
    _builder_3.append("           ");
    _builder_3.append("State qfinal = new State(\"qfinal\", StateType.FINAL);");
    _builder_3.newLine();
    _builder_3.append("           ");
    _builder_3.newLine();
    _builder_3.append("           ");
    _builder_3.append("if(this.states.isEmpty() && this.transitions.isEmpty()){");
    _builder_3.newLine();
    _builder_3.append("               ");
    _builder_3.append("this.initial = qinit;");
    _builder_3.newLine();
    _builder_3.append("           ");
    _builder_3.append("}else{");
    _builder_3.newLine();
    _builder_3.append("               ");
    _builder_3.append("this.addTransition(new Transition(\"epsilon\", this.finale, qinit));");
    _builder_3.newLine();
    _builder_3.append("           ");
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.append("   ");
    _builder_3.newLine();
    _builder_3.append("           ");
    _builder_3.append("this.addState(qinit);");
    _builder_3.newLine();
    _builder_3.append("           ");
    _builder_3.append("this.addState(qfinal);");
    _builder_3.newLine();
    _builder_3.append("           ");
    _builder_3.append("this.finale = qfinal;");
    _builder_3.newLine();
    _builder_3.append("           ");
    _builder_3.newLine();
    _builder_3.append("           ");
    _builder_3.append("State qaccepting = new State(\"qaccepting\", StateType.ACCEPT_ALL);");
    _builder_3.newLine();
    _builder_3.append("           ");
    _builder_3.append("this.addState(qaccepting);");
    _builder_3.newLine();
    _builder_3.append("   ");
    _builder_3.newLine();
    _builder_3.append("           ");
    _builder_3.append("for (Automaton a : automatas) {");
    _builder_3.newLine();
    _builder_3.append("               ");
    _builder_3.append("for (Transition t : a.transitions)");
    _builder_3.newLine();
    _builder_3.append("                   ");
    _builder_3.append("this.addTransition(t);");
    _builder_3.newLine();
    _builder_3.append("   ");
    _builder_3.newLine();
    _builder_3.append("   ");
    _builder_3.newLine();
    _builder_3.append("               ");
    _builder_3.append("for (State s : a.states) {");
    _builder_3.newLine();
    _builder_3.append("                   ");
    _builder_3.append("this.addState(s);");
    _builder_3.newLine();
    _builder_3.append("                   ");
    _builder_3.append("if (s.getType().equals(StateType.FINAL))");
    _builder_3.newLine();
    _builder_3.append("                       ");
    _builder_3.append("this.addTransition(new Transition(\"epsilon\", s, qfinal));");
    _builder_3.newLine();
    _builder_3.append("                   ");
    _builder_3.append("if (s.getType().equals(StateType.ACCEPT_ALL))");
    _builder_3.newLine();
    _builder_3.append("                       ");
    _builder_3.append("this.addTransition(new Transition(\"epsilon\", s, qaccepting));");
    _builder_3.newLine();
    _builder_3.append("               ");
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.append("               ");
    _builder_3.append("this.addTransition(new Transition(\"epsilon\", qinit, a.initial));");
    _builder_3.newLine();
    _builder_3.append("           ");
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.append("           ");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.append("}");
    _builder_3.newLine();
    fsa.generateFile("Automaton.java", _builder_3);
    Iterable<Domain> _filter = Iterables.<Domain>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Domain.class);
    for (final Domain s : _filter) {
      fsa.generateFile("Specification.java", this.compile(s));
    }
  }
  
  public CharSequence compile(final Domain s) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.io.FileNotFoundException;");
    _builder.newLine();
    _builder.append("import java.io.PrintWriter;");
    _builder.newLine();
    _builder.append("import java.io.UnsupportedEncodingException;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Specification{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String id = \"");
    String _name = s.getName();
    _builder.append(_name, "\t");
    _builder.append("\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("private ArrayList<Automaton> automatas;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Specification(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("automatas = new ArrayList<Automaton>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String str;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("State actualState;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("State acceptState;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("State finalState;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("State newState;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("State acceptState_new;");
    _builder.newLine();
    {
      EList<Scenario> _scenarios = s.getScenarios();
      for(final Scenario scenario : _scenarios) {
        _builder.append("\t\t");
        _builder.append("Automaton a = new Automaton(\"");
        String _name_1 = scenario.getName();
        _builder.append(_name_1, "\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("Automaton b;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("ArrayList<Automaton> altauto;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("ArrayList<Automaton> parauto;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("Automaton loopauto;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("Automaton expression;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("int counter = 0;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.newLine();
        {
          EList<ScenarioContent> _scenariocontents = scenario.getScenariocontents();
          for(final ScenarioContent sc : _scenariocontents) {
            {
              EList<Loop> _loop = sc.getLoop();
              for(final Loop l : _loop) {
                _builder.append("\t\t");
                _builder.append("loopauto = new Automaton(\"loopauto\" + counter);");
                _builder.newLine();
                {
                  EList<Message> _messages = l.getMessages();
                  for(final Message m : _messages) {
                    {
                      boolean _isConstraint = m.isConstraint();
                      if (_isConstraint) {
                        _builder.append("\t\t");
                        _builder.append("str = \"\" ");
                        _builder.newLine();
                        {
                          EList<Message> _messages_1 = m.getC().getMessages();
                          for(final Message msg : _messages_1) {
                            _builder.append("\t\t");
                            _builder.append("+ \"!\" + \"");
                            String _name_2 = msg.getSender().getName();
                            _builder.append(_name_2, "\t\t");
                            _builder.append("\" + \".\" + \"");
                            String _name_3 = msg.getName();
                            _builder.append(_name_3, "\t\t");
                            _builder.append("\" + \".\" + \"");
                            String _name_4 = msg.getReceiver().getName();
                            _builder.append(_name_4, "\t\t");
                            _builder.append("\" + \" & \"");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t\t\t\t\t\t\t\t\t");
                          }
                        }
                        _builder.append(";");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t");
                        _builder.append("str= str.substring(0, str.length() - 3);");
                        _builder.newLine();
                      }
                    }
                    {
                      boolean _isStrict = m.isStrict();
                      boolean _not = (!_isStrict);
                      if (_not) {
                        {
                          boolean _isRequired = m.isRequired();
                          if (_isRequired) {
                            {
                              boolean _isFuture = m.isFuture();
                              if (_isFuture) {
                                _builder.append("\t\t");
                                CharSequence _compile_required_future = this.compile_required_future(m);
                                _builder.append(_compile_required_future, "\t\t");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t\t");
                                _builder.append("loopauto.collapse(b);");
                                _builder.newLine();
                              }
                            }
                            {
                              boolean _isPast = m.isPast();
                              if (_isPast) {
                                _builder.append("\t\t");
                                CharSequence _compile_required_past = this.compile_required_past(m);
                                _builder.append(_compile_required_past, "\t\t");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t\t");
                                _builder.append("loopauto.collapse(b);");
                                _builder.newLine();
                              }
                            }
                            {
                              if (((!m.isPast()) && (!m.isFuture()))) {
                                _builder.append("\t\t");
                                CharSequence _compile_required = this.compile_required(m);
                                _builder.append(_compile_required, "\t\t");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t\t");
                                _builder.append("loopauto.collapse(b);");
                                _builder.newLine();
                              }
                            }
                          }
                        }
                        {
                          boolean _isFail = m.isFail();
                          if (_isFail) {
                            {
                              boolean _isPast_1 = m.isPast();
                              if (_isPast_1) {
                                _builder.append("\t\t");
                                CharSequence _compile_fail_past = this.compile_fail_past(m);
                                _builder.append(_compile_fail_past, "\t\t");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t\t");
                                _builder.append("loopauto.collapse(b);");
                                _builder.newLine();
                              }
                            }
                            {
                              if (((!m.isPast()) && (!m.isFuture()))) {
                                _builder.append("\t\t");
                                CharSequence _compile_fail = this.compile_fail(m);
                                _builder.append(_compile_fail, "\t\t");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t\t");
                                _builder.append("loopauto.collapse(b);");
                                _builder.newLine();
                              }
                            }
                          }
                        }
                        {
                          if (((!m.isFail()) && (!m.isRequired()))) {
                            {
                              boolean _isFuture_1 = m.isFuture();
                              if (_isFuture_1) {
                                _builder.append("\t\t");
                                CharSequence _compile_future = this.compile_future(m);
                                _builder.append(_compile_future, "\t\t");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t\t");
                                _builder.append("loopauto.collapse(b);");
                                _builder.newLine();
                              }
                            }
                            {
                              boolean _isPast_2 = m.isPast();
                              if (_isPast_2) {
                                _builder.append("\t\t");
                                CharSequence _compile_past = this.compile_past(m);
                                _builder.append(_compile_past, "\t\t");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t\t");
                                _builder.append("loopauto.collapse(b);");
                                _builder.newLine();
                              }
                            }
                            {
                              if (((!m.isPast()) && (!m.isFuture()))) {
                                _builder.append("\t\t");
                                CharSequence _compile_msg = this.compile_msg(m);
                                _builder.append(_compile_msg, "\t\t");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t\t");
                                _builder.append("loopauto.collapse(b);");
                                _builder.newLine();
                              }
                            }
                          }
                        }
                      }
                    }
                    _builder.append("\t\t");
                    _builder.newLine();
                    {
                      boolean _isStrict_1 = m.isStrict();
                      if (_isStrict_1) {
                        {
                          boolean _isRequired_1 = m.isRequired();
                          if (_isRequired_1) {
                            {
                              boolean _isFuture_2 = m.isFuture();
                              if (_isFuture_2) {
                                _builder.append("\t\t");
                                CharSequence _compile_strict_required_future = this.compile_strict_required_future(m);
                                _builder.append(_compile_strict_required_future, "\t\t");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t\t");
                                _builder.append("loopauto.collapse(b);");
                                _builder.newLine();
                              }
                            }
                            {
                              if (((!m.isPast()) && (!m.isFuture()))) {
                                _builder.append("\t\t");
                                CharSequence _compile_strict_required = this.compile_strict_required(m);
                                _builder.append(_compile_strict_required, "\t\t");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t\t");
                                _builder.append("loopauto.collapse(b);");
                                _builder.newLine();
                              }
                            }
                          }
                        }
                        {
                          boolean _isFail_1 = m.isFail();
                          if (_isFail_1) {
                            {
                              if (((!m.isPast()) && (!m.isFuture()))) {
                                _builder.append("\t\t");
                                CharSequence _compile_strict_fail = this.compile_strict_fail(m);
                                _builder.append(_compile_strict_fail, "\t\t");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t\t");
                                _builder.append("loopauto.collapse(b);");
                                _builder.newLine();
                              }
                            }
                          }
                        }
                        {
                          if (((!m.isFail()) && (!m.isRequired()))) {
                            {
                              boolean _isFuture_3 = m.isFuture();
                              if (_isFuture_3) {
                                _builder.append("\t\t");
                                CharSequence _compile_strict_future = this.compile_strict_future(m);
                                _builder.append(_compile_strict_future, "\t\t");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t\t");
                                _builder.append("loopauto.collapse(b);");
                                _builder.newLine();
                              }
                            }
                            {
                              if (((!m.isPast()) && (!m.isFuture()))) {
                                _builder.append("\t\t");
                                CharSequence _compile_strict = this.compile_strict(m);
                                _builder.append(_compile_strict, "\t\t");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t\t");
                                _builder.append("loopauto.collapse(b);");
                                _builder.newLine();
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                _builder.append("\t\t");
                _builder.append("a.merge(loopSetup(loopauto, ");
                String _min = l.getMin();
                _builder.append(_min, "\t\t");
                _builder.append(", ");
                String _max = l.getMax();
                _builder.append(_max, "\t\t");
                _builder.append("));");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              EList<Par> _par = sc.getPar();
              for(final Par p : _par) {
                _builder.append("\t\t");
                _builder.append("parauto = new ArrayList<Automaton>();");
                _builder.newLine();
                {
                  EList<ParExpression> _parexpression = p.getParexpression();
                  for(final ParExpression pe : _parexpression) {
                    _builder.append("\t\t");
                    _builder.append("expression = new Automaton(\"expauto\" + counter);");
                    _builder.newLine();
                    {
                      EList<Message> _messages_2 = pe.getMessages();
                      for(final Message m_1 : _messages_2) {
                        {
                          boolean _isConstraint_1 = m_1.isConstraint();
                          if (_isConstraint_1) {
                            _builder.append("\t\t");
                            _builder.append("str = \"\" ");
                            _builder.newLine();
                            {
                              EList<Message> _messages_3 = m_1.getC().getMessages();
                              for(final Message msg_1 : _messages_3) {
                                _builder.append("\t\t");
                                _builder.append("+ \"!\" + \"");
                                String _name_5 = msg_1.getSender().getName();
                                _builder.append(_name_5, "\t\t");
                                _builder.append("\" + \".\" + \"");
                                String _name_6 = msg_1.getName();
                                _builder.append(_name_6, "\t\t");
                                _builder.append("\" + \".\" + \"");
                                String _name_7 = msg_1.getReceiver().getName();
                                _builder.append(_name_7, "\t\t");
                                _builder.append("\" + \" & \"");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t\t\t\t\t\t\t\t\t\t");
                              }
                            }
                            _builder.append(";");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t\t");
                            _builder.append("str= str.substring(0, str.length() - 3);");
                            _builder.newLine();
                          }
                        }
                        {
                          boolean _isStrict_2 = m_1.isStrict();
                          boolean _not_1 = (!_isStrict_2);
                          if (_not_1) {
                            {
                              boolean _isRequired_2 = m_1.isRequired();
                              if (_isRequired_2) {
                                {
                                  boolean _isFuture_4 = m_1.isFuture();
                                  if (_isFuture_4) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_required_future_1 = this.compile_required_future(m_1);
                                    _builder.append(_compile_required_future_1, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                                {
                                  boolean _isPast_3 = m_1.isPast();
                                  if (_isPast_3) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_required_past_1 = this.compile_required_past(m_1);
                                    _builder.append(_compile_required_past_1, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                                {
                                  if (((!m_1.isPast()) && (!m_1.isFuture()))) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_required_1 = this.compile_required(m_1);
                                    _builder.append(_compile_required_1, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                              }
                            }
                            {
                              boolean _isFail_2 = m_1.isFail();
                              if (_isFail_2) {
                                {
                                  boolean _isPast_4 = m_1.isPast();
                                  if (_isPast_4) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_fail_past_1 = this.compile_fail_past(m_1);
                                    _builder.append(_compile_fail_past_1, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                                {
                                  if (((!m_1.isPast()) && (!m_1.isFuture()))) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_fail_1 = this.compile_fail(m_1);
                                    _builder.append(_compile_fail_1, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                              }
                            }
                            {
                              if (((!m_1.isFail()) && (!m_1.isRequired()))) {
                                {
                                  boolean _isFuture_5 = m_1.isFuture();
                                  if (_isFuture_5) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_future_1 = this.compile_future(m_1);
                                    _builder.append(_compile_future_1, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                                {
                                  boolean _isPast_5 = m_1.isPast();
                                  if (_isPast_5) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_past_1 = this.compile_past(m_1);
                                    _builder.append(_compile_past_1, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                                {
                                  if (((!m_1.isPast()) && (!m_1.isFuture()))) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_msg_1 = this.compile_msg(m_1);
                                    _builder.append(_compile_msg_1, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                              }
                            }
                          }
                        }
                        _builder.append("\t\t");
                        _builder.newLine();
                        {
                          boolean _isStrict_3 = m_1.isStrict();
                          if (_isStrict_3) {
                            {
                              boolean _isRequired_3 = m_1.isRequired();
                              if (_isRequired_3) {
                                {
                                  boolean _isFuture_6 = m_1.isFuture();
                                  if (_isFuture_6) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_strict_required_future_1 = this.compile_strict_required_future(m_1);
                                    _builder.append(_compile_strict_required_future_1, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                                {
                                  if (((!m_1.isPast()) && (!m_1.isFuture()))) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_strict_required_1 = this.compile_strict_required(m_1);
                                    _builder.append(_compile_strict_required_1, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                              }
                            }
                            {
                              boolean _isFail_3 = m_1.isFail();
                              if (_isFail_3) {
                                {
                                  if (((!m_1.isPast()) && (!m_1.isFuture()))) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_strict_fail_1 = this.compile_strict_fail(m_1);
                                    _builder.append(_compile_strict_fail_1, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                              }
                            }
                            {
                              if (((!m_1.isFail()) && (!m_1.isRequired()))) {
                                {
                                  boolean _isFuture_7 = m_1.isFuture();
                                  if (_isFuture_7) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_strict_future_1 = this.compile_strict_future(m_1);
                                    _builder.append(_compile_strict_future_1, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                                {
                                  if (((!m_1.isPast()) && (!m_1.isFuture()))) {
                                    _builder.append("\t\t");
                                    CharSequence _compile_strict_1 = this.compile_strict(m_1);
                                    _builder.append(_compile_strict_1, "\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    _builder.append("\t\t");
                    _builder.append("parauto.add(expression);\t\t\t");
                    _builder.newLine();
                  }
                }
                _builder.append("\t\t");
                _builder.append("a.merge(par(parauto));");
                _builder.newLine();
              }
            }
            {
              EList<Alt> _alt = sc.getAlt();
              for(final Alt a : _alt) {
                _builder.append("\t\t");
                _builder.append("altauto = new ArrayList<Automaton>();");
                _builder.newLine();
                {
                  EList<Expression> _expressions = a.getExpressions();
                  for(final Expression e : _expressions) {
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("expression = new Automaton(\"expauto\" + counter);");
                    _builder.newLine();
                    {
                      EList<Message> _messages_4 = e.getMessages();
                      for(final Message m_2 : _messages_4) {
                        {
                          boolean _isConstraint_2 = m_2.isConstraint();
                          if (_isConstraint_2) {
                            _builder.append("\t\t");
                            _builder.append("\t");
                            _builder.append("str = \"\" ");
                            _builder.newLine();
                            {
                              EList<Message> _messages_5 = m_2.getC().getMessages();
                              for(final Message msg_2 : _messages_5) {
                                _builder.append("\t\t");
                                _builder.append("\t");
                                _builder.append("+ \"!\" + \"");
                                String _name_8 = msg_2.getSender().getName();
                                _builder.append(_name_8, "\t\t\t");
                                _builder.append("\" + \".\" + \"");
                                String _name_9 = msg_2.getName();
                                _builder.append(_name_9, "\t\t\t");
                                _builder.append("\" + \".\" + \"");
                                String _name_10 = msg_2.getReceiver().getName();
                                _builder.append(_name_10, "\t\t\t");
                                _builder.append("\" + \" & \"");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t\t\t\t\t\t\t\t\t\t");
                              }
                            }
                            _builder.append(";");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t\t");
                            _builder.append("\t");
                            _builder.append("str= str.substring(0, str.length() - 3);");
                            _builder.newLine();
                          }
                        }
                        {
                          boolean _isStrict_4 = m_2.isStrict();
                          boolean _not_2 = (!_isStrict_4);
                          if (_not_2) {
                            {
                              boolean _isRequired_4 = m_2.isRequired();
                              if (_isRequired_4) {
                                {
                                  boolean _isFuture_8 = m_2.isFuture();
                                  if (_isFuture_8) {
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    CharSequence _compile_required_future_2 = this.compile_required_future(m_2);
                                    _builder.append(_compile_required_future_2, "\t\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                                {
                                  boolean _isPast_6 = m_2.isPast();
                                  if (_isPast_6) {
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    CharSequence _compile_required_past_2 = this.compile_required_past(m_2);
                                    _builder.append(_compile_required_past_2, "\t\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                                {
                                  if (((!m_2.isPast()) && (!m_2.isFuture()))) {
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    CharSequence _compile_required_2 = this.compile_required(m_2);
                                    _builder.append(_compile_required_2, "\t\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                              }
                            }
                            {
                              boolean _isFail_4 = m_2.isFail();
                              if (_isFail_4) {
                                {
                                  boolean _isPast_7 = m_2.isPast();
                                  if (_isPast_7) {
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    CharSequence _compile_fail_past_2 = this.compile_fail_past(m_2);
                                    _builder.append(_compile_fail_past_2, "\t\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                                {
                                  if (((!m_2.isPast()) && (!m_2.isFuture()))) {
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    CharSequence _compile_fail_2 = this.compile_fail(m_2);
                                    _builder.append(_compile_fail_2, "\t\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                              }
                            }
                            {
                              if (((!m_2.isFail()) && (!m_2.isRequired()))) {
                                {
                                  boolean _isFuture_9 = m_2.isFuture();
                                  if (_isFuture_9) {
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    CharSequence _compile_future_2 = this.compile_future(m_2);
                                    _builder.append(_compile_future_2, "\t\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                                {
                                  boolean _isPast_8 = m_2.isPast();
                                  if (_isPast_8) {
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    CharSequence _compile_past_2 = this.compile_past(m_2);
                                    _builder.append(_compile_past_2, "\t\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                                {
                                  if (((!m_2.isPast()) && (!m_2.isFuture()))) {
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    CharSequence _compile_msg_2 = this.compile_msg(m_2);
                                    _builder.append(_compile_msg_2, "\t\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                              }
                            }
                          }
                        }
                        _builder.append("\t\t");
                        _builder.append("\t");
                        _builder.newLine();
                        {
                          boolean _isStrict_5 = m_2.isStrict();
                          if (_isStrict_5) {
                            {
                              boolean _isRequired_5 = m_2.isRequired();
                              if (_isRequired_5) {
                                {
                                  boolean _isFuture_10 = m_2.isFuture();
                                  if (_isFuture_10) {
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    CharSequence _compile_strict_required_future_2 = this.compile_strict_required_future(m_2);
                                    _builder.append(_compile_strict_required_future_2, "\t\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                                {
                                  if (((!m_2.isPast()) && (!m_2.isFuture()))) {
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    CharSequence _compile_strict_required_2 = this.compile_strict_required(m_2);
                                    _builder.append(_compile_strict_required_2, "\t\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                              }
                            }
                            {
                              boolean _isFail_5 = m_2.isFail();
                              if (_isFail_5) {
                                {
                                  if (((!m_2.isPast()) && (!m_2.isFuture()))) {
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    CharSequence _compile_strict_fail_2 = this.compile_strict_fail(m_2);
                                    _builder.append(_compile_strict_fail_2, "\t\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                              }
                            }
                            {
                              if (((!m_2.isFail()) && (!m_2.isRequired()))) {
                                {
                                  boolean _isFuture_11 = m_2.isFuture();
                                  if (_isFuture_11) {
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    CharSequence _compile_strict_future_2 = this.compile_strict_future(m_2);
                                    _builder.append(_compile_strict_future_2, "\t\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                                {
                                  if (((!m_2.isPast()) && (!m_2.isFuture()))) {
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    CharSequence _compile_strict_2 = this.compile_strict(m_2);
                                    _builder.append(_compile_strict_2, "\t\t\t");
                                    _builder.newLineIfNotEmpty();
                                    _builder.append("\t\t");
                                    _builder.append("\t");
                                    _builder.append("expression.collapse(b);");
                                    _builder.newLine();
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    _builder.append("\t\t");
                    _builder.append("\t");
                    _builder.append("altauto.add(expression);\t\t\t\t\t\t");
                    _builder.newLine();
                  }
                }
                _builder.append("\t\t");
                _builder.append("\t");
                _builder.append("a.merge(altauto);");
                _builder.newLine();
              }
            }
            {
              EList<Message> _message = sc.getMessage();
              for(final Message m_3 : _message) {
                {
                  boolean _isConstraint_3 = m_3.isConstraint();
                  if (_isConstraint_3) {
                    _builder.append("\t\t");
                    _builder.append("str = \"\" ");
                    _builder.newLine();
                    {
                      EList<Message> _messages_6 = m_3.getC().getMessages();
                      for(final Message msg_3 : _messages_6) {
                        _builder.append("\t\t");
                        _builder.append("+ \"!\" + \"");
                        String _name_11 = msg_3.getSender().getName();
                        _builder.append(_name_11, "\t\t");
                        _builder.append("\" + \".\" + \"");
                        String _name_12 = msg_3.getName();
                        _builder.append(_name_12, "\t\t");
                        _builder.append("\" + \".\" + \"");
                        String _name_13 = msg_3.getReceiver().getName();
                        _builder.append(_name_13, "\t\t");
                        _builder.append("\" + \" & \"");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t\t\t\t\t\t\t\t");
                      }
                    }
                    _builder.append(";");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t");
                    _builder.append("str= str.substring(0, str.length() - 3);");
                    _builder.newLine();
                  }
                }
                {
                  boolean _isStrict_6 = m_3.isStrict();
                  boolean _not_3 = (!_isStrict_6);
                  if (_not_3) {
                    {
                      boolean _isRequired_6 = m_3.isRequired();
                      if (_isRequired_6) {
                        {
                          boolean _isFuture_12 = m_3.isFuture();
                          if (_isFuture_12) {
                            _builder.append("\t\t");
                            CharSequence _compile_required_future_3 = this.compile_required_future(m_3);
                            _builder.append(_compile_required_future_3, "\t\t");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t\t");
                            _builder.append("a.collapse(b);");
                            _builder.newLine();
                          }
                        }
                        {
                          boolean _isPast_9 = m_3.isPast();
                          if (_isPast_9) {
                            _builder.append("\t\t");
                            CharSequence _compile_required_past_3 = this.compile_required_past(m_3);
                            _builder.append(_compile_required_past_3, "\t\t");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t\t");
                            _builder.append("a.collapse(b);");
                            _builder.newLine();
                          }
                        }
                        {
                          if (((!m_3.isPast()) && (!m_3.isFuture()))) {
                            _builder.append("\t\t");
                            CharSequence _compile_required_3 = this.compile_required(m_3);
                            _builder.append(_compile_required_3, "\t\t");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t\t");
                            _builder.append("a.collapse(b);");
                            _builder.newLine();
                          }
                        }
                      }
                    }
                    {
                      boolean _isFail_6 = m_3.isFail();
                      if (_isFail_6) {
                        {
                          boolean _isPast_10 = m_3.isPast();
                          if (_isPast_10) {
                            _builder.append("\t\t");
                            CharSequence _compile_fail_past_3 = this.compile_fail_past(m_3);
                            _builder.append(_compile_fail_past_3, "\t\t");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t\t");
                            _builder.append("a.collapse(b);");
                            _builder.newLine();
                          }
                        }
                        {
                          if (((!m_3.isPast()) && (!m_3.isFuture()))) {
                            _builder.append("\t\t");
                            CharSequence _compile_fail_3 = this.compile_fail(m_3);
                            _builder.append(_compile_fail_3, "\t\t");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t\t");
                            _builder.append("a.collapse(b);");
                            _builder.newLine();
                          }
                        }
                      }
                    }
                    {
                      if (((!m_3.isFail()) && (!m_3.isRequired()))) {
                        {
                          boolean _isFuture_13 = m_3.isFuture();
                          if (_isFuture_13) {
                            _builder.append("\t\t");
                            CharSequence _compile_future_3 = this.compile_future(m_3);
                            _builder.append(_compile_future_3, "\t\t");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t\t");
                            _builder.append("a.collapse(b);");
                            _builder.newLine();
                          }
                        }
                        {
                          boolean _isPast_11 = m_3.isPast();
                          if (_isPast_11) {
                            _builder.append("\t\t");
                            CharSequence _compile_past_3 = this.compile_past(m_3);
                            _builder.append(_compile_past_3, "\t\t");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t\t");
                            _builder.append("a.collapse(b);");
                            _builder.newLine();
                          }
                        }
                        {
                          if (((!m_3.isPast()) && (!m_3.isFuture()))) {
                            _builder.append("\t\t");
                            CharSequence _compile_msg_3 = this.compile_msg(m_3);
                            _builder.append(_compile_msg_3, "\t\t");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t\t");
                            _builder.append("a.collapse(b);");
                            _builder.newLine();
                          }
                        }
                      }
                    }
                  }
                }
                _builder.append("\t\t");
                _builder.newLine();
                {
                  boolean _isStrict_7 = m_3.isStrict();
                  if (_isStrict_7) {
                    {
                      boolean _isRequired_7 = m_3.isRequired();
                      if (_isRequired_7) {
                        {
                          boolean _isFuture_14 = m_3.isFuture();
                          if (_isFuture_14) {
                            _builder.append("\t\t");
                            CharSequence _compile_strict_required_future_3 = this.compile_strict_required_future(m_3);
                            _builder.append(_compile_strict_required_future_3, "\t\t");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t\t");
                            _builder.append("a.collapse(b);");
                            _builder.newLine();
                          }
                        }
                        {
                          if (((!m_3.isPast()) && (!m_3.isFuture()))) {
                            _builder.append("\t\t");
                            CharSequence _compile_strict_required_3 = this.compile_strict_required(m_3);
                            _builder.append(_compile_strict_required_3, "\t\t");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t\t");
                            _builder.append("a.collapse(b);");
                            _builder.newLine();
                          }
                        }
                      }
                    }
                    {
                      boolean _isFail_7 = m_3.isFail();
                      if (_isFail_7) {
                        {
                          if (((!m_3.isPast()) && (!m_3.isFuture()))) {
                            _builder.append("\t\t");
                            CharSequence _compile_strict_fail_3 = this.compile_strict_fail(m_3);
                            _builder.append(_compile_strict_fail_3, "\t\t");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t\t");
                            _builder.append("a.collapse(b);");
                            _builder.newLine();
                          }
                        }
                      }
                    }
                    {
                      if (((!m_3.isFail()) && (!m_3.isRequired()))) {
                        {
                          boolean _isFuture_15 = m_3.isFuture();
                          if (_isFuture_15) {
                            _builder.append("\t\t");
                            CharSequence _compile_strict_future_3 = this.compile_strict_future(m_3);
                            _builder.append(_compile_strict_future_3, "\t\t");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t\t");
                            _builder.append("a.collapse(b);");
                            _builder.newLine();
                          }
                        }
                        {
                          if (((!m_3.isPast()) && (!m_3.isFuture()))) {
                            _builder.append("\t\t");
                            CharSequence _compile_strict_3 = this.compile_strict(m_3);
                            _builder.append(_compile_strict_3, "\t\t");
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t\t");
                            _builder.append("a.collapse(b);");
                            _builder.newLine();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        _builder.append("\t\t");
        _builder.append("a.rename();");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("automatas.add(a);");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void listAutomatas(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(Automaton a : this.automatas){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for(State s : a.getStates()){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("s.writeState();\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for(Transition t : a.getTransitions()){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("t.writeTransition();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ArrayList<Automaton> par(ArrayList<Automaton> automatas) {");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("ArrayList<ArrayList<Automaton>> automataList = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("permute(automataList, new ArrayList<>(), automatas);");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("return listConverter((automataList));");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private void permute(ArrayList<ArrayList<Automaton>> list, ArrayList<Automaton> resultList, ArrayList<Automaton> automatas) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (resultList.size() == automatas.size()) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("list.add(new ArrayList<>(resultList));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("for (int i = 0; i < automatas.size(); i++) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (resultList.contains((automatas.get(i)))) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("continue;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                ");
    _builder.append("resultList.add(automatas.get(i));");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("permute(list, resultList, automatas);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("resultList.remove(resultList.size() - 1);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private ArrayList<Automaton> listConverter(ArrayList<ArrayList<Automaton>> list) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ArrayList<Automaton> result = new ArrayList<>();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for (ArrayList<Automaton> alist : list) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Automaton newauto = new Automaton(\"listConverter\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("for (Automaton auto : alist) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("newauto.collapse(auto);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("result.add(newauto);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return result;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public ArrayList<Automaton> loopSetup(Automaton loopauto, int min, int max) {");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("ArrayList<Automaton> result = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("for (int i = min; i <= max; i++) {");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("Automaton newauto = new Automaton(\"loopauto\");");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("for (int j = 0; j < i; j++) {");
    _builder.newLine();
    _builder.append("\t                    ");
    _builder.append("newauto.collapse(loopauto);");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("result.add(newauto);");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("return result;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main(String[] args) throws FileNotFoundException, UnsupportedEncodingException{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Specification specification = new Specification();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("specification.listAutomatas();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("boolean acceptState = false;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("PrintWriter writer = new PrintWriter(\"");
    String _name_14 = s.getName();
    _builder.append(_name_14, "\t\t");
    _builder.append("\" + \".txt\", \"UTF-8\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("for(Automaton a : specification.automatas){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writer.println(\"never{ /*\" + a.getId() + \"*/\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for(State s : a.getStates()){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(s == a.getInitial()){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("writer.println(\"T0_init:\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("writer.println(\" do\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("for(Transition t : a.findSender(s)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("if(t.getReceiver() == a.getInitial()){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("writer.println(\" :: (\" + t.getId() + \") \" + \"->\" + \" goto T0_init\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}else if(t.getReceiver().getType().equals(StateType.NORMAL)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("writer.println(\" :: (\" + t.getId() + \") \" + \"->\" + \" goto T0_\" + t.getReceiver().getId());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}else if(t.getReceiver().getType().equals(StateType.ACCEPT_ALL)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("writer.println(\" :: (\" + t.getId() + \") \" + \"->\" + \" goto accept_all\" );");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}else if(t.getReceiver().getType().equals(StateType.FINAL)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("writer.println(\" :: (\" + t.getId() + \") \" + \"->\" + \" goto T0_\" + t.getReceiver().getId());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}else if(t.getReceiver().getType().equals(StateType.ACCEPT)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("writer.println(\" :: (\" + t.getId() + \") \" + \"->\" + \" goto accept_\" + t.getReceiver().getId());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("writer.println(\" od;\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}else if(s.getType().equals(StateType.NORMAL)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("writer.println(\"T0_\" + s.getId() + \":\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("writer.println(\" do\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("for(Transition t : a.findSender(s)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("if(t.getReceiver() == a.getInitial()){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("writer.println(\" :: (\" + t.getId() + \") \" + \"->\" + \" goto T0_init\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}else if(t.getReceiver().getType().equals(StateType.NORMAL)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("writer.println(\" :: (\" + t.getId() + \") \" + \"->\" + \" goto T0_\" + t.getReceiver().getId());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}else if(t.getReceiver().getType().equals(StateType.ACCEPT_ALL)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("writer.println(\" :: (\" + t.getId() + \") \" + \"->\" + \" goto accept_all\" );");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}else if(t.getReceiver().getType().equals(StateType.FINAL)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("writer.println(\" :: (\" + t.getId() + \") \" + \"->\" + \" goto T0_\" + t.getReceiver().getId());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}else if(t.getReceiver().getType().equals(StateType.ACCEPT)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("writer.println(\" :: (\" + t.getId() + \") \" + \"->\" + \" goto accept_\" + t.getReceiver().getId());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("writer.println(\" od;\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}else if(s.getType().equals(StateType.ACCEPT_ALL) && !acceptState){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("writer.println(\"accept_all:\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("writer.println(\"skip\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("acceptState = true;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}else if(s.getType().equals(StateType.FINAL)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("writer.println(\"T0_\" + s.getId() + \":\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("writer.println(\" do\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("for(Transition t : a.findSender(s)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("if(t.getReceiver() == a.getInitial()){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("writer.println(\" :: (\" + t.getId() + \")\" + \"->\" + \" goto T0_init\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}else if(t.getReceiver().getType().equals(StateType.NORMAL)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("writer.println(\" :: (\" + t.getId() + \") \" + \"->\" + \" goto T0_\" + t.getReceiver().getId());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}else if(t.getReceiver().getType().equals(StateType.ACCEPT_ALL)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("writer.println(\" :: (\" + t.getId() + \") \" + \"->\" + \" goto accept_all\" );");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}else if(t.getReceiver().getType().equals(StateType.FINAL)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("writer.println(\" :: (\" + t.getId() + \") \" + \"->\" + \" goto T0_\" + t.getReceiver().getId());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}else if(t.getReceiver().getType().equals(StateType.ACCEPT)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("writer.println(\" :: (\" + t.getId() + \") \" + \"->\" + \" goto accept_\" + t.getReceiver().getId());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("writer.println(\" od;\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}else if(s.getType().equals(StateType.ACCEPT)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("writer.println(\"accept_\" + s.getId() + \":\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("writer.println(\" do\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("for(Transition t : a.findSender(s)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("if(t.getReceiver() == a.getInitial()){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("writer.println(\" :: (\" + t.getId() + \")\" + \"->\" + \" goto T0_init\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}else if(t.getReceiver().getType().equals(StateType.NORMAL)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("writer.println(\" :: (\" + t.getId() + \") \" + \"->\" + \" goto T0_\" + t.getReceiver().getId());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}else if(t.getReceiver().getType().equals(StateType.ACCEPT_ALL)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("writer.println(\" :: (\" + t.getId() + \") \" + \"->\" + \" goto accept_all\" );");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}else if(t.getReceiver().getType().equals(StateType.FINAL)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("writer.println(\" :: (\" + t.getId() + \") \" + \"->\" + \" goto T0_\" + t.getReceiver().getId());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}else if(t.getReceiver().getType().equals(StateType.ACCEPT)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("writer.println(\" :: (\" + t.getId() + \") \" + \"->\" + \" goto accept_\" + t.getReceiver().getId());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("writer.println(\" od;\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("writer.println(\"}\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("writer.close();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile_required_future(final Message m) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("b = new Automaton(\"auto1\");");
    _builder.newLine();
    _builder.append("actualState = new State(\"q\" + counter, StateType.ACCEPT);");
    _builder.newLine();
    _builder.append("counter++;");
    _builder.newLine();
    _builder.append("b.addState(actualState);");
    _builder.newLine();
    _builder.append("b.setInitial(actualState);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("b.addTransition(new Transition(\"!\" + \"");
    String _name = m.getSender().getName();
    _builder.append(_name);
    _builder.append("\" + \".\" + \"");
    String _name_1 = m.getName();
    _builder.append(_name_1);
    _builder.append("\" + \".\" + \"");
    String _name_2 = m.getReceiver().getName();
    _builder.append(_name_2);
    _builder.append("\", actualState, actualState));");
    _builder.newLineIfNotEmpty();
    _builder.append("finalState = new State(\"q\" + counter, StateType.FINAL);");
    _builder.newLine();
    _builder.append("counter++;");
    _builder.newLine();
    _builder.append("acceptState = new State(\"q\" + counter, StateType.ACCEPT_ALL);");
    _builder.newLine();
    _builder.append("counter++;");
    _builder.newLine();
    _builder.append("b.addTransition(new Transition(\"");
    String _name_3 = m.getSender().getName();
    _builder.append(_name_3);
    _builder.append("\" + \".\" + \"");
    String _name_4 = m.getName();
    _builder.append(_name_4);
    _builder.append("\" + \".\" + \"");
    String _name_5 = m.getReceiver().getName();
    _builder.append(_name_5);
    _builder.append("\", actualState, finalState));");
    _builder.newLineIfNotEmpty();
    _builder.append("b.addTransition(new Transition(str, finalState, finalState));");
    _builder.newLine();
    _builder.append("b.addTransition(new Transition(\"!\" + \"(\" + str + \")\", finalState, acceptState));");
    _builder.newLine();
    _builder.append("b.addTransition(new Transition(\"1\", acceptState, acceptState));");
    _builder.newLine();
    _builder.append("b.addState(acceptState);");
    _builder.newLine();
    _builder.append("b.addState(finalState);");
    _builder.newLine();
    _builder.append("b.setFinale(finalState);");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile_required_past(final Message m) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("b = new Automaton(\"auto2\");");
    _builder.newLine();
    _builder.append("actualState = new State(\"q\" + counter, StateType.ACCEPT);");
    _builder.newLine();
    _builder.append("counter++;");
    _builder.newLine();
    _builder.append("b.addState(actualState);");
    _builder.newLine();
    _builder.append("b.setInitial(actualState);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("b.addTransition(new Transition(\"!\" + \"");
    String _name = m.getSender().getName();
    _builder.append(_name);
    _builder.append("\" + \".\" + \"");
    String _name_1 = m.getName();
    _builder.append(_name_1);
    _builder.append("\" + \".\" + \"");
    String _name_2 = m.getReceiver().getName();
    _builder.append(_name_2);
    _builder.append("\" + \" & \" + str, actualState, actualState));");
    _builder.newLineIfNotEmpty();
    _builder.append("acceptState = new State(\"q\" + counter, StateType.ACCEPT_ALL);");
    _builder.newLine();
    _builder.append("counter++;");
    _builder.newLine();
    _builder.append("finalState = new State(\"q\" + counter, StateType.FINAL);");
    _builder.newLine();
    _builder.append("counter++;");
    _builder.newLine();
    _builder.append("b.addTransition(new Transition(\"");
    String _name_3 = m.getSender().getName();
    _builder.append(_name_3);
    _builder.append("\" + \".\" + \"");
    String _name_4 = m.getName();
    _builder.append(_name_4);
    _builder.append("\" + \".\" + \"");
    String _name_5 = m.getReceiver().getName();
    _builder.append(_name_5);
    _builder.append("\", actualState, finalState));");
    _builder.newLineIfNotEmpty();
    _builder.append("b.addTransition(new Transition(\"!\" + \"(\" + str + \")\", actualState, acceptState));");
    _builder.newLine();
    _builder.append("b.addTransition(new Transition(\"1\", acceptState, acceptState));");
    _builder.newLine();
    _builder.append("b.addState(acceptState);");
    _builder.newLine();
    _builder.append("b.addState(finalState);");
    _builder.newLine();
    _builder.append("b.setFinale(finalState);");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile_required(final Message m) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("b = new Automaton(\"auto3\");");
    _builder.newLine();
    _builder.append("actualState = new State(\"q\" + counter, StateType.ACCEPT);");
    _builder.newLine();
    _builder.append("counter++;");
    _builder.newLine();
    _builder.append("b.addState(actualState);");
    _builder.newLine();
    _builder.append("b.setInitial(actualState);");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("b.addTransition(new Transition(\"!\" + \"");
    String _name = m.getSender().getName();
    _builder.append(_name);
    _builder.append("\" + \".\" + \"");
    String _name_1 = m.getName();
    _builder.append(_name_1);
    _builder.append("\" + \".\" + \"");
    String _name_2 = m.getReceiver().getName();
    _builder.append(_name_2);
    _builder.append("\", actualState, actualState));");
    _builder.newLineIfNotEmpty();
    _builder.append("newState = new State(\"q\" + counter, StateType.FINAL);");
    _builder.newLine();
    _builder.append("counter++;");
    _builder.newLine();
    _builder.append("b.addTransition(new Transition(\"");
    String _name_3 = m.getSender().getName();
    _builder.append(_name_3);
    _builder.append("\" + \".\" + \"");
    String _name_4 = m.getName();
    _builder.append(_name_4);
    _builder.append("\" + \".\" + \"");
    String _name_5 = m.getReceiver().getName();
    _builder.append(_name_5);
    _builder.append("\", actualState, newState));");
    _builder.newLineIfNotEmpty();
    _builder.append("b.addState(newState);");
    _builder.newLine();
    _builder.append("b.setFinale(newState);");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile_fail_past(final Message m) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("b = new Automaton(\"auto4\");");
    _builder.newLine();
    _builder.append("actualState = new State(\"q\" + counter, StateType.NORMAL);");
    _builder.newLine();
    _builder.append("counter++;");
    _builder.newLine();
    _builder.append("b.addState(actualState);");
    _builder.newLine();
    _builder.append("b.setInitial(actualState);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("b.addTransition(new Transition(str, actualState, actualState));");
    _builder.newLine();
    _builder.append("finalState = new State(\"q\" + counter, StateType.FINAL);");
    _builder.newLine();
    _builder.append("counter++;");
    _builder.newLine();
    _builder.append("acceptState = new State(\"q\" + counter, StateType.ACCEPT_ALL);");
    _builder.newLine();
    _builder.append("counter++;");
    _builder.newLine();
    _builder.append("b.addTransition(new Transition(\"!\" + \"(\" + str + \")\", actualState, finalState));");
    _builder.newLine();
    _builder.append("b.addTransition(new Transition(\"");
    String _name = m.getSender().getName();
    _builder.append(_name);
    _builder.append("\" + \".\" + \"");
    String _name_1 = m.getName();
    _builder.append(_name_1);
    _builder.append("\" + \".\" + \"");
    String _name_2 = m.getReceiver().getName();
    _builder.append(_name_2);
    _builder.append("\" , actualState, acceptState));");
    _builder.newLineIfNotEmpty();
    _builder.append("b.addTransition(new Transition(\"1\", acceptState, acceptState));");
    _builder.newLine();
    _builder.append("b.addState(acceptState);");
    _builder.newLine();
    _builder.append("b.addState(finalState);");
    _builder.newLine();
    _builder.append("b.setFinale(finalState);");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile_fail(final Message m) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("b = new Automaton(\"auto5\");");
    _builder.newLine();
    _builder.append("actualState = new State(\"q\" + counter, StateType.FINAL);");
    _builder.newLine();
    _builder.append("counter++;");
    _builder.newLine();
    _builder.append("b.addState(actualState);");
    _builder.newLine();
    _builder.append("b.setInitial(actualState);");
    _builder.newLine();
    _builder.append("b.setFinale(actualState);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("b.addTransition(new Transition(\"1\", actualState, actualState));");
    _builder.newLine();
    _builder.append("newState = new State(\"q\" + counter, StateType.ACCEPT_ALL);");
    _builder.newLine();
    _builder.append("counter++;");
    _builder.newLine();
    _builder.append("b.addTransition(new Transition(\"");
    String _name = m.getSender().getName();
    _builder.append(_name);
    _builder.append("\" + \".\" + \"");
    String _name_1 = m.getName();
    _builder.append(_name_1);
    _builder.append("\" + \".\" + \"");
    String _name_2 = m.getReceiver().getName();
    _builder.append(_name_2);
    _builder.append("\" , actualState, newState));");
    _builder.newLineIfNotEmpty();
    _builder.append("b.addState(newState);");
    _builder.newLine();
    _builder.append("b.addTransition(new Transition(\"1\", newState, newState));");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile_future(final Message m) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("b = new Automaton(\"auto6\");");
    _builder.newLine();
    _builder.append("actualState = new State(\"q\" + counter, StateType.NORMAL);");
    _builder.newLine();
    _builder.append("counter++;");
    _builder.newLine();
    _builder.append("b.addState(actualState);");
    _builder.newLine();
    _builder.append("b.setInitial(actualState);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("b.addTransition(new Transition(\"1\", actualState, actualState));");
    _builder.newLine();
    _builder.append("newState = new State(\"q\" + counter, StateType.FINAL);");
    _builder.newLine();
    _builder.append("counter++;");
    _builder.newLine();
    _builder.append("b.addTransition(new Transition(\"");
    String _name = m.getSender().getName();
    _builder.append(_name);
    _builder.append("\" + \".\" + \"");
    String _name_1 = m.getName();
    _builder.append(_name_1);
    _builder.append("\" + \".\" + \"");
    String _name_2 = m.getReceiver().getName();
    _builder.append(_name_2);
    _builder.append("\" , actualState, newState));");
    _builder.newLineIfNotEmpty();
    _builder.append("b.addState(newState);");
    _builder.newLine();
    _builder.append("b.addTransition(new Transition(str, newState, newState));");
    _builder.newLine();
    _builder.append("b.setFinale(newState);");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile_past(final Message m) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("b = new Automaton(\"auto7\");");
    _builder.newLine();
    _builder.append("actualState = new State(\"q\" + counter, StateType.NORMAL);");
    _builder.newLine();
    _builder.append("counter++;");
    _builder.newLine();
    _builder.append("b.addState(actualState);");
    _builder.newLine();
    _builder.append("b.setInitial(actualState);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("b.addTransition(new Transition(str, actualState, actualState));");
    _builder.newLine();
    _builder.append("newState = new State(\"q\" + counter, StateType.FINAL);");
    _builder.newLine();
    _builder.append("counter++;");
    _builder.newLine();
    _builder.append("b.addTransition(new Transition(\"");
    String _name = m.getSender().getName();
    _builder.append(_name);
    _builder.append("\" + \".\" + \"");
    String _name_1 = m.getName();
    _builder.append(_name_1);
    _builder.append("\" + \".\" + \"");
    String _name_2 = m.getReceiver().getName();
    _builder.append(_name_2);
    _builder.append("\", actualState, newState));");
    _builder.newLineIfNotEmpty();
    _builder.append("b.addState(newState);");
    _builder.newLine();
    _builder.append("b.setFinale(newState);");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile_msg(final Message m) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("b = new Automaton(\"auto7\");");
    _builder.newLine();
    _builder.append("actualState = new State(\"q\" + counter, StateType.NORMAL);");
    _builder.newLine();
    _builder.append("counter++;");
    _builder.newLine();
    _builder.append("b.addState(actualState);");
    _builder.newLine();
    _builder.append("b.setInitial(actualState);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("b.addTransition(new Transition(\"1\", actualState, actualState));");
    _builder.newLine();
    _builder.append("newState = new State(\"q\" + counter, StateType.FINAL);");
    _builder.newLine();
    _builder.append("counter++;");
    _builder.newLine();
    _builder.append("b.addTransition(new Transition(\"");
    String _name = m.getSender().getName();
    _builder.append(_name);
    _builder.append("\" + \".\" + \"");
    String _name_1 = m.getName();
    _builder.append(_name_1);
    _builder.append("\" + \".\" + \"");
    String _name_2 = m.getReceiver().getName();
    _builder.append(_name_2);
    _builder.append("\" , actualState, newState));");
    _builder.newLineIfNotEmpty();
    _builder.append("b.addState(newState);");
    _builder.newLine();
    _builder.append("b.setFinale(newState);");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile_strict_required_future(final Message m) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("b = new Automaton(\"auto8\");");
    _builder.newLine();
    _builder.append("actualState = new State(\"q\" + counter, StateType.ACCEPT);");
    _builder.newLine();
    _builder.append("counter++;");
    _builder.newLine();
    _builder.append("b.addState(actualState);");
    _builder.newLine();
    _builder.append("b.setInitial(actualState);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("finalState = new State(\"q\" + counter, StateType.FINAL);");
    _builder.newLine();
    _builder.append("counter++;");
    _builder.newLine();
    _builder.append("acceptState = new State(\"q\" + counter, StateType.ACCEPT_ALL);");
    _builder.newLine();
    _builder.append("counter++;");
    _builder.newLine();
    _builder.append("acceptState_new = new State(\"q\" + counter, StateType.ACCEPT_ALL);");
    _builder.newLine();
    _builder.append("counter++;");
    _builder.newLine();
    _builder.append("b.addTransition(new Transition(\"!\" + \"");
    String _name = m.getSender().getName();
    _builder.append(_name);
    _builder.append("\" + \".\" + \"");
    String _name_1 = m.getName();
    _builder.append(_name_1);
    _builder.append("\" + \".\" + \"");
    String _name_2 = m.getReceiver().getName();
    _builder.append(_name_2);
    _builder.append("\", actualState, acceptState_new));");
    _builder.newLineIfNotEmpty();
    _builder.append("b.addTransition(new Transition(\"1\", acceptState_new, acceptState_new));");
    _builder.newLine();
    _builder.append("b.addTransition(new Transition(\"");
    String _name_3 = m.getSender().getName();
    _builder.append(_name_3);
    _builder.append("\" + \".\" + \"");
    String _name_4 = m.getName();
    _builder.append(_name_4);
    _builder.append("\" + \".\" + \"");
    String _name_5 = m.getReceiver().getName();
    _builder.append(_name_5);
    _builder.append("\", actualState, finalState));");
    _builder.newLineIfNotEmpty();
    _builder.append("b.addTransition(new Transition(str, finalState, finalState));");
    _builder.newLine();
    _builder.append("b.addTransition(new Transition(\"!\" + \"(\" + str + \")\", finalState, acceptState));");
    _builder.newLine();
    _builder.append("b.addTransition(new Transition(\"1\", acceptState, acceptState));");
    _builder.newLine();
    _builder.append("b.addState(finalState);");
    _builder.newLine();
    _builder.append("b.addState(acceptState);");
    _builder.newLine();
    _builder.append("b.addState(acceptState_new);");
    _builder.newLine();
    _builder.append("b.setFinale(finalState);");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile_strict_required(final Message m) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("b = new Automaton(\"auto9\");");
    _builder.newLine();
    _builder.append("actualState = new State(\"q\" + counter, StateType.ACCEPT);");
    _builder.newLine();
    _builder.append("counter++;");
    _builder.newLine();
    _builder.append("b.addState(actualState);");
    _builder.newLine();
    _builder.append("b.setInitial(actualState);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("finalState = new State(\"q\" + counter, StateType.FINAL);");
    _builder.newLine();
    _builder.append("counter++;");
    _builder.newLine();
    _builder.append("acceptState = new State(\"q\" + counter, StateType.ACCEPT_ALL);");
    _builder.newLine();
    _builder.append("counter++;");
    _builder.newLine();
    _builder.append("b.addTransition(new Transition(\"");
    String _name = m.getSender().getName();
    _builder.append(_name);
    _builder.append("\" + \".\" + \"");
    String _name_1 = m.getName();
    _builder.append(_name_1);
    _builder.append("\" + \".\" + \"");
    String _name_2 = m.getReceiver().getName();
    _builder.append(_name_2);
    _builder.append("\" , actualState, finalState));");
    _builder.newLineIfNotEmpty();
    _builder.append("b.addTransition(new Transition(\"!\" + \"");
    String _name_3 = m.getSender().getName();
    _builder.append(_name_3);
    _builder.append("\" + \".\" + \"");
    String _name_4 = m.getName();
    _builder.append(_name_4);
    _builder.append("\" + \".\" + \"");
    String _name_5 = m.getReceiver().getName();
    _builder.append(_name_5);
    _builder.append("\" , actualState, acceptState));");
    _builder.newLineIfNotEmpty();
    _builder.append("b.addTransition(new Transition(\"1\", acceptState, acceptState));");
    _builder.newLine();
    _builder.append("b.addState(acceptState);");
    _builder.newLine();
    _builder.append("b.addState(finalState);");
    _builder.newLine();
    _builder.append("b.setFinale(finalState);");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile_strict_fail(final Message m) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("b = new Automaton(\"auto10\");");
    _builder.newLine();
    _builder.append("actualState = new State(\"q\" + counter, StateType.NORMAL);");
    _builder.newLine();
    _builder.append("counter++;");
    _builder.newLine();
    _builder.append("b.addState(actualState);");
    _builder.newLine();
    _builder.append("b.setInitial(actualState);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("finalState = new State(\"q\" + counter, StateType.FINAL);");
    _builder.newLine();
    _builder.append("counter++;");
    _builder.newLine();
    _builder.append("acceptState = new State(\"q\" + counter, StateType.ACCEPT_ALL);");
    _builder.newLine();
    _builder.append("counter++;");
    _builder.newLine();
    _builder.append("b.addTransition(new Transition(\"!\" + \"");
    String _name = m.getSender().getName();
    _builder.append(_name);
    _builder.append("\" + \".\" + \"");
    String _name_1 = m.getName();
    _builder.append(_name_1);
    _builder.append("\" + \".\" + \"");
    String _name_2 = m.getReceiver().getName();
    _builder.append(_name_2);
    _builder.append("\", actualState, finalState));");
    _builder.newLineIfNotEmpty();
    _builder.append("b.addTransition(new Transition(\"");
    String _name_3 = m.getSender().getName();
    _builder.append(_name_3);
    _builder.append("\" + \".\" + \"");
    String _name_4 = m.getName();
    _builder.append(_name_4);
    _builder.append("\" + \".\" + \"");
    String _name_5 = m.getReceiver().getName();
    _builder.append(_name_5);
    _builder.append("\", actualState, acceptState));");
    _builder.newLineIfNotEmpty();
    _builder.append("b.addTransition(new Transition(\"1\", acceptState, acceptState));");
    _builder.newLine();
    _builder.append("b.addState(finalState);");
    _builder.newLine();
    _builder.append("b.addState(acceptState);");
    _builder.newLine();
    _builder.append("b.setFinale(finalState);");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile_strict_future(final Message m) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("b = new Automaton(\"auto11\");");
    _builder.newLine();
    _builder.append("actualState = new State(\"q\" + counter, StateType.NORMAL);");
    _builder.newLine();
    _builder.append("counter++;");
    _builder.newLine();
    _builder.append("b.addState(actualState);");
    _builder.newLine();
    _builder.append("b.setInitial(actualState);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("newState = new State(\"q\" + counter, StateType.FINAL);");
    _builder.newLine();
    _builder.append("counter++;");
    _builder.newLine();
    _builder.append("b.addTransition(new Transition(\"");
    String _name = m.getSender().getName();
    _builder.append(_name);
    _builder.append("\" + \".\" + \"");
    String _name_1 = m.getName();
    _builder.append(_name_1);
    _builder.append("\" + \".\" + \"");
    String _name_2 = m.getReceiver().getName();
    _builder.append(_name_2);
    _builder.append("\", actualState, newState));");
    _builder.newLineIfNotEmpty();
    _builder.append("b.addState(newState);");
    _builder.newLine();
    _builder.append("b.addTransition(new Transition(str, newState, newState));");
    _builder.newLine();
    _builder.append("b.setFinale(newState);");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile_strict(final Message m) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("b = new Automaton(\"auto12\");");
    _builder.newLine();
    _builder.append("actualState = new State(\"q\" + counter, StateType.NORMAL);");
    _builder.newLine();
    _builder.append("counter++;");
    _builder.newLine();
    _builder.append("b.addState(actualState);");
    _builder.newLine();
    _builder.append("b.setInitial(actualState);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("newState = new State(\"q\" + counter, StateType.FINAL);");
    _builder.newLine();
    _builder.append("counter++;");
    _builder.newLine();
    _builder.append("b.addTransition(new Transition(\"");
    String _name = m.getSender().getName();
    _builder.append(_name);
    _builder.append("\" + \".\" + \"");
    String _name_1 = m.getName();
    _builder.append(_name_1);
    _builder.append("\" + \".\" + \"");
    String _name_2 = m.getReceiver().getName();
    _builder.append(_name_2);
    _builder.append("\", actualState, newState));");
    _builder.newLineIfNotEmpty();
    _builder.append("b.addState(newState);");
    _builder.newLine();
    _builder.append("b.setFinale(newState);");
    _builder.newLine();
    return _builder;
  }
}
